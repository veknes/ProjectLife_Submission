
ProjectLife.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d878  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c4c4  0800da20  0800da20  0001da20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019ee4  08019ee4  00030a44  2**0
                  CONTENTS
  4 .ARM          00000008  08019ee4  08019ee4  00029ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019eec  08019eec  00030a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019eec  08019eec  00029eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019ef0  08019ef0  00029ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a44  20000000  08019ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030a44  2**0
                  CONTENTS
 10 .bss          00003610  20000a44  20000a44  00030a44  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20004054  20004054  00030a44  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030a44  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019590  00000000  00000000  00030a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a3  00000000  00000000  0004a004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0004d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f8  00000000  00000000  0004ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bc3  00000000  00000000  00050000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af68  00000000  00000000  00075bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e12ac  00000000  00000000  00090b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00171dd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d98  00000000  00000000  00171e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00178bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00178c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a44 	.word	0x20000a44
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9f0 	.word	0x0800d9f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a48 	.word	0x20000a48
 80001cc:	0800d9f0 	.word	0x0800d9f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <bufclr>:

uint8_t debugBuf1 [40] = {'\0'}; // variable to stored the data to be transmitted


void bufclr (char *buf)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff f98b 	bl	80001d0 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e007      	b.n	8000ed4 <bufclr+0x28>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf3      	blt.n	8000ec4 <bufclr+0x18>
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b096      	sub	sp, #88	; 0x58
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000ef2:	f000 f953 	bl	800119c <Ringbuf_init>
	//sprintf ((char*)debugBuf1, "Send Data1\r\n");
	//HAL_UART_Transmit (&huart1 , debugBuf1 , sizeof ( debugBuf1 ) , 50) ; // transmit the data
	Uart_sendstring("AT+RST\r\n");
 8000ef6:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <ESP_Init+0xcc>)
 8000ef8:	f000 fa1c 	bl	8001334 <Uart_sendstring>
	HAL_Delay(1000);
 8000efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f00:	f002 ffd4 	bl	8003eac <HAL_Delay>

	Uart_flush();
 8000f04:	f000 f992 	bl	800122c <Uart_flush>
	//sprintf ((char*)debugBuf1, "Send Data2\r\n");
	//HAL_UART_Transmit (&huart1 , debugBuf1 , sizeof ( debugBuf1 ) , 50) ; // transmit the data
	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000f08:	482b      	ldr	r0, [pc, #172]	; (8000fb8 <ESP_Init+0xd0>)
 8000f0a:	f000 fa13 	bl	8001334 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000f0e:	bf00      	nop
 8000f10:	482a      	ldr	r0, [pc, #168]	; (8000fbc <ESP_Init+0xd4>)
 8000f12:	f000 fa3f 	bl	8001394 <Wait_for>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f9      	beq.n	8000f10 <ESP_Init+0x28>
	//sprintf ((char*)debugBuf1, "Send Data3\r\n");
	//HAL_UART_Transmit (&huart1 , debugBuf1 , sizeof ( debugBuf1 ) , 50) ; // transmit the data
	Uart_flush();
 8000f1c:	f000 f986 	bl	800122c <Uart_flush>


	/********* AT+CWMODE=1 **********/
	//Uart_sendstring("AT+CWMODE=1\r\n");
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000f20:	4827      	ldr	r0, [pc, #156]	; (8000fc0 <ESP_Init+0xd8>)
 8000f22:	f000 fa07 	bl	8001334 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000f26:	bf00      	nop
 8000f28:	4824      	ldr	r0, [pc, #144]	; (8000fbc <ESP_Init+0xd4>)
 8000f2a:	f000 fa33 	bl	8001394 <Wait_for>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f9      	beq.n	8000f28 <ESP_Init+0x40>
	//sprintf ((char*)debugBuf1, "Send Data4\r\n");
	//HAL_UART_Transmit (&huart1 , debugBuf1 , sizeof ( debugBuf1 ) , 50) ; // transmit the data
	Uart_flush();
 8000f34:	f000 f97a 	bl	800122c <Uart_flush>

	/********* AT+CWDHCP=1,1 **********/
	//Uart_sendstring("AT+CWMODE=1\r\n");
	Uart_sendstring("AT+CWDHCP=1,1\r\n");
 8000f38:	4822      	ldr	r0, [pc, #136]	; (8000fc4 <ESP_Init+0xdc>)
 8000f3a:	f000 f9fb 	bl	8001334 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000f3e:	bf00      	nop
 8000f40:	481e      	ldr	r0, [pc, #120]	; (8000fbc <ESP_Init+0xd4>)
 8000f42:	f000 fa27 	bl	8001394 <Wait_for>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f9      	beq.n	8000f40 <ESP_Init+0x58>
	//sprintf ((char*)debugBuf1, "Send Data5\r\n");
	//HAL_UART_Transmit (&huart1 , debugBuf1 , sizeof ( debugBuf1 ) , 50) ; // transmit the data
	Uart_flush();
 8000f4c:	f000 f96e 	bl	800122c <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000f50:	f107 0008 	add.w	r0, r7, #8
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	491b      	ldr	r1, [pc, #108]	; (8000fc8 <ESP_Init+0xe0>)
 8000f5a:	f00a fa51 	bl	800b400 <siprintf>
	Uart_sendstring(data);
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f9e6 	bl	8001334 <Uart_sendstring>
	//while (!(Wait_for("GOT IP\r\n")));
	while (!(Wait_for("WIFI GOT IP\r\n")));
 8000f68:	bf00      	nop
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <ESP_Init+0xe4>)
 8000f6c:	f000 fa12 	bl	8001394 <Wait_for>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <ESP_Init+0x82>
	//sprintf ((char*)debugBuf1, "Send Data6\r\n");
	//HAL_UART_Transmit (&huart1 , debugBuf1 , sizeof ( debugBuf1 ) , 50) ; // transmit the data

	Uart_flush();
 8000f76:	f000 f959 	bl	800122c <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <ESP_Init+0xe8>)
 8000f7c:	f000 f9da 	bl	8001334 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000f80:	bf00      	nop
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <ESP_Init+0xd4>)
 8000f84:	f000 fa06 	bl	8001394 <Wait_for>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f9      	beq.n	8000f82 <ESP_Init+0x9a>
	bufclr((char*)debugBuf1);
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <ESP_Init+0xec>)
 8000f90:	f7ff ff8c 	bl	8000eac <bufclr>
	sprintf ((char*)debugBuf1, "ESP WIFI Done\r\n");
 8000f94:	4910      	ldr	r1, [pc, #64]	; (8000fd8 <ESP_Init+0xf0>)
 8000f96:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <ESP_Init+0xec>)
 8000f98:	f00a fa32 	bl	800b400 <siprintf>
	HAL_UART_Transmit (&huart1 , debugBuf1 , sizeof ( debugBuf1 ) , 50) ; // transmit the data
 8000f9c:	2332      	movs	r3, #50	; 0x32
 8000f9e:	2228      	movs	r2, #40	; 0x28
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <ESP_Init+0xec>)
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <ESP_Init+0xf4>)
 8000fa4:	f006 f877 	bl	8007096 <HAL_UART_Transmit>
	Uart_flush();
 8000fa8:	f000 f940 	bl	800122c <Uart_flush>

}
 8000fac:	bf00      	nop
 8000fae:	3758      	adds	r7, #88	; 0x58
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0800da20 	.word	0x0800da20
 8000fb8:	0800da2c 	.word	0x0800da2c
 8000fbc:	0800da34 	.word	0x0800da34
 8000fc0:	0800da3c 	.word	0x0800da3c
 8000fc4:	0800da4c 	.word	0x0800da4c
 8000fc8:	0800da5c 	.word	0x0800da5c
 8000fcc:	0800da74 	.word	0x0800da74
 8000fd0:	0800da84 	.word	0x0800da84
 8000fd4:	20000a60 	.word	0x20000a60
 8000fd8:	0800da94 	.word	0x0800da94
 8000fdc:	200036a4 	.word	0x200036a4

08000fe0 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, int value[])
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000fec:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000ff0:	6018      	str	r0, [r3, #0]
 8000ff2:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ff6:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000ffa:	6019      	str	r1, [r3, #0]
 8000ffc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001000:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001004:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8001006:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800100a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	3304      	adds	r3, #4
 8001014:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f009 fc76 	bl	800a90c <memset>
	char local_buf2[30] = {0};
 8001020:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001024:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	3304      	adds	r3, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 800103e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001042:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	3304      	adds	r3, #4
 800104c:	22c4      	movs	r2, #196	; 0xc4
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f009 fc5b 	bl	800a90c <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8001056:	4848      	ldr	r0, [pc, #288]	; (8001178 <ESP_Send_Multi+0x198>)
 8001058:	f000 f96c 	bl	8001334 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800105c:	bf00      	nop
 800105e:	4847      	ldr	r0, [pc, #284]	; (800117c <ESP_Send_Multi+0x19c>)
 8001060:	f000 f998 	bl	8001394 <Wait_for>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f9      	beq.n	800105e <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 800106a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800106e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001072:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4941      	ldr	r1, [pc, #260]	; (8001180 <ESP_Send_Multi+0x1a0>)
 800107a:	f00a f9c1 	bl	800b400 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8001084:	e01f      	b.n	80010c6 <ESP_Send_Multi+0xe6>
	{
		sprintf(field_buf, "&field%d=%d",i+1, value[i]);
 8001086:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800108a:	1c59      	adds	r1, r3, #1
 800108c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8001096:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	4413      	add	r3, r2
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f107 0014 	add.w	r0, r7, #20
 80010a4:	460a      	mov	r2, r1
 80010a6:	4937      	ldr	r1, [pc, #220]	; (8001184 <ESP_Send_Multi+0x1a4>)
 80010a8:	f00a f9aa 	bl	800b400 <siprintf>
		strcat (local_buf, field_buf);
 80010ac:	f107 0214 	add.w	r2, r7, #20
 80010b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00a f9c2 	bl	800b440 <strcat>
	for (int i=0; i<numberoffileds; i++)
 80010bc:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80010c0:	3301      	adds	r3, #1
 80010c2:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80010c6:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80010ca:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80010ce:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbd6      	blt.n	8001086 <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 80010d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f877 	bl	80001d0 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010ea:	4413      	add	r3, r2
 80010ec:	4a26      	ldr	r2, [pc, #152]	; (8001188 <ESP_Send_Multi+0x1a8>)
 80010ee:	8811      	ldrh	r1, [r2, #0]
 80010f0:	7892      	ldrb	r2, [r2, #2]
 80010f2:	8019      	strh	r1, [r3, #0]
 80010f4:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 80010f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f868 	bl	80001d0 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8001106:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800110a:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 800110e:	491f      	ldr	r1, [pc, #124]	; (800118c <ESP_Send_Multi+0x1ac>)
 8001110:	4618      	mov	r0, r3
 8001112:	f00a f975 	bl	800b400 <siprintf>
	Uart_sendstring(local_buf2);
 8001116:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f90a 	bl	8001334 <Uart_sendstring>
	while (!(Wait_for(">")));
 8001120:	bf00      	nop
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <ESP_Send_Multi+0x1b0>)
 8001124:	f000 f936 	bl	8001394 <Wait_for>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f9      	beq.n	8001122 <ESP_Send_Multi+0x142>

	Uart_sendstring (local_buf);
 800112e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f8fe 	bl	8001334 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8001138:	bf00      	nop
 800113a:	4816      	ldr	r0, [pc, #88]	; (8001194 <ESP_Send_Multi+0x1b4>)
 800113c:	f000 f92a 	bl	8001394 <Wait_for>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f9      	beq.n	800113a <ESP_Send_Multi+0x15a>

	while (!(Wait_for("CLOSED")));
 8001146:	bf00      	nop
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <ESP_Send_Multi+0x1b8>)
 800114a:	f000 f923 	bl	8001394 <Wait_for>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f9      	beq.n	8001148 <ESP_Send_Multi+0x168>

	bufclr(local_buf);
 8001154:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fea7 	bl	8000eac <bufclr>
	bufclr(local_buf2);
 800115e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fea2 	bl	8000eac <bufclr>

	Ringbuf_init();
 8001168:	f000 f818 	bl	800119c <Ringbuf_init>

}
 800116c:	bf00      	nop
 800116e:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	0800daa4 	.word	0x0800daa4
 800117c:	0800da34 	.word	0x0800da34
 8001180:	0800db1c 	.word	0x0800db1c
 8001184:	0800db34 	.word	0x0800db34
 8001188:	0800db40 	.word	0x0800db40
 800118c:	0800daf4 	.word	0x0800daf4
 8001190:	0800db04 	.word	0x0800db04
 8001194:	0800db08 	.word	0x0800db08
 8001198:	0800db14 	.word	0x0800db14

0800119c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <Ringbuf_init+0x3c>)
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <Ringbuf_init+0x40>)
 80011a4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <Ringbuf_init+0x44>)
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <Ringbuf_init+0x48>)
 80011aa:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <Ringbuf_init+0x4c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <Ringbuf_init+0x4c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0201 	orr.w	r2, r2, #1
 80011ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <Ringbuf_init+0x4c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <Ringbuf_init+0x4c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0220 	orr.w	r2, r2, #32
 80011ca:	60da      	str	r2, [r3, #12]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000b18 	.word	0x20000b18
 80011dc:	20000a88 	.word	0x20000a88
 80011e0:	20000b1c 	.word	0x20000b1c
 80011e4:	20000ad0 	.word	0x20000ad0
 80011e8:	200036e8 	.word	0x200036e8

080011ec <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	3301      	adds	r3, #1
 80011fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001202:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	429a      	cmp	r2, r3
 800120c:	d007      	beq.n	800121e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	79f9      	ldrb	r1, [r7, #7]
 8001216:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <Uart_flush>:

void Uart_flush (void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <Uart_flush+0x1c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <Uart_flush+0x1c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000b18 	.word	0x20000b18

0800124c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <Uart_read+0x4c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <Uart_read+0x4c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	429a      	cmp	r2, r3
 8001260:	d102      	bne.n	8001268 <Uart_read+0x1c>
  {
    return -1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	e010      	b.n	800128a <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <Uart_read+0x4c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <Uart_read+0x4c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <Uart_read+0x4c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <Uart_read+0x4c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001286:	645a      	str	r2, [r3, #68]	; 0x44

    //sprintf ((char*)debugBuf2, "%c\r\n", c);
    //HAL_UART_Transmit (&huart1 , debugBuf2 , sizeof ( debugBuf2 ) , 50) ; // transmit the data
    return c;
 8001288:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000b18 	.word	0x20000b18

0800129c <Uart_write>:

void Uart_write(int c)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db21      	blt.n	80012ee <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <Uart_write+0x60>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	3301      	adds	r3, #1
 80012b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012b6:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80012b8:	bf00      	nop
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <Uart_write+0x60>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d0f9      	beq.n	80012ba <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <Uart_write+0x60>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <Uart_write+0x60>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	b2c9      	uxtb	r1, r1
 80012d4:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <Uart_write+0x60>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Uart_write+0x64>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <Uart_write+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ec:	60da      	str	r2, [r3, #12]
	}
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000b1c 	.word	0x20000b1c
 8001300:	200036e8 	.word	0x200036e8

08001304 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <IsDataAvailable+0x2c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <IsDataAvailable+0x2c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	b29b      	uxth	r3, r3
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29b      	uxth	r3, r3
 800131c:	3340      	adds	r3, #64	; 0x40
 800131e:	b29b      	uxth	r3, r3
 8001320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000b18 	.word	0x20000b18

08001334 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 800133c:	e006      	b.n	800134c <Uart_sendstring+0x18>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffa8 	bl	800129c <Uart_write>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f4      	bne.n	800133e <Uart_sendstring+0xa>
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <Uart_peek+0x30>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <Uart_peek+0x30>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	429a      	cmp	r2, r3
 8001372:	d102      	bne.n	800137a <Uart_peek+0x1a>
  {
    return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	e005      	b.n	8001386 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <Uart_peek+0x30>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <Uart_peek+0x30>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20000b18 	.word	0x20000b18

08001394 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7fe ff15 	bl	80001d0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80013aa:	bf00      	nop
 80013ac:	f7ff ffaa 	bl	8001304 <IsDataAvailable>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0fa      	beq.n	80013ac <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 80013b6:	f7ff ffd3 	bl	8001360 <Uart_peek>
 80013ba:	4601      	mov	r1, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4299      	cmp	r1, r3
 80013c6:	d01a      	beq.n	80013fe <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <Wait_for+0xa4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <Wait_for+0xa4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 80013da:	e7e6      	b.n	80013aa <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80013e2:	f7ff ff33 	bl	800124c <Uart_read>
		if (so_far == len) return 1;
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d101      	bne.n	80013f2 <Wait_for+0x5e>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e01d      	b.n	800142e <Wait_for+0x9a>
		while (!IsDataAvailable());
 80013f2:	bf00      	nop
 80013f4:	f7ff ff86 	bl	8001304 <IsDataAvailable>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0fa      	beq.n	80013f4 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 80013fe:	f7ff ffaf 	bl	8001360 <Uart_peek>
 8001402:	4601      	mov	r1, r0
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4299      	cmp	r1, r3
 800140e:	d0e5      	beq.n	80013dc <Wait_for+0x48>
	}

	if (so_far != len)
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	429a      	cmp	r2, r3
 8001416:	d002      	beq.n	800141e <Wait_for+0x8a>
	{
		so_far = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
		goto again;
 800141c:	e7c5      	b.n	80013aa <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d101      	bne.n	800142a <Wait_for+0x96>
 8001426:	2301      	movs	r3, #1
 8001428:	e001      	b.n	800142e <Wait_for+0x9a>
	else return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000b18 	.word	0x20000b18

0800143c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	2b00      	cmp	r3, #0
 800145c:	d013      	beq.n	8001486 <Uart_isr+0x4a>
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00e      	beq.n	8001486 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <Uart_isr+0xac>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff feb4 	bl	80011ec <store_char>
        return;
 8001484:	e02c      	b.n	80014e0 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148c:	2b00      	cmp	r3, #0
 800148e:	d027      	beq.n	80014e0 <Uart_isr+0xa4>
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b00      	cmp	r3, #0
 8001498:	d022      	beq.n	80014e0 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <Uart_isr+0xb0>)
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <Uart_isr+0xb0>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d108      	bne.n	80014b8 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80014b6:	e012      	b.n	80014de <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <Uart_isr+0xb0>)
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <Uart_isr+0xb0>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <Uart_isr+0xb0>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	3301      	adds	r3, #1
 80014c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <Uart_isr+0xb0>)
 80014ce:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	7bba      	ldrb	r2, [r7, #14]
 80014dc:	605a      	str	r2, [r3, #4]
    	return;
 80014de:	bf00      	nop
    }
}
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000b18 	.word	0x20000b18
 80014ec:	20000ad0 	.word	0x20000ad0

080014f0 <Max30102_WriteReg>:

uint8_t debugBuf [40] = {'\0'}; // variable to stored the data to be transmitted
UART_HandleTypeDef *huart_debug = &huart1;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af04      	add	r7, sp, #16
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Max30102_WriteReg+0x40>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	b29a      	uxth	r2, r3
 8001508:	2301      	movs	r3, #1
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	21ae      	movs	r1, #174	; 0xae
 8001518:	f003 f94a 	bl	80047b0 <HAL_I2C_Mem_Write>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <Max30102_WriteReg+0x36>
		return MAX30102_OK;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000b20 	.word	0x20000b20

08001534 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af04      	add	r7, sp, #16
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <Max30102_ReadReg+0x3c>)
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	b29a      	uxth	r2, r3
 8001548:	2301      	movs	r3, #1
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	21ae      	movs	r1, #174	; 0xae
 8001558:	f003 fa24 	bl	80049a4 <HAL_I2C_Mem_Read>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <Max30102_ReadReg+0x32>
		return MAX30102_OK;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000b20 	.word	0x20000b20

08001574 <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	460b      	mov	r3, r1
 8001580:	71bb      	strb	r3, [r7, #6]
 8001582:	4613      	mov	r3, r2
 8001584:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 8001586:	f107 020f 	add.w	r2, r7, #15
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ffd0 	bl	8001534 <Max30102_ReadReg>
 8001594:	4603      	mov	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 800159a:	2300      	movs	r3, #0
 800159c:	e025      	b.n	80015ea <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1<<Bit);
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	b25a      	sxtb	r2, r3
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4013      	ands	r3, r2
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	f003 0201 	and.w	r2, r3, #1
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	b25a      	sxtb	r2, r3
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff89 	bl	80014f0 <Max30102_WriteReg>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d001      	beq.n	80015e8 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e000      	b.n	80015ea <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	uint32_t un_temp;
	*pun_red_led=0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
	*pun_ir_led=0;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <Max30102_ReadFifo+0xd8>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	2301      	movs	r3, #1
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	2306      	movs	r3, #6
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	2207      	movs	r2, #7
 8001620:	21ae      	movs	r1, #174	; 0xae
 8001622:	f003 f9bf 	bl	80049a4 <HAL_I2C_Mem_Read>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <Max30102_ReadFifo+0x3c>
	{
		return MAX30102_ERROR;
 800162c:	2300      	movs	r3, #0
 800162e:	e048      	b.n	80016c2 <Max30102_ReadFifo+0xce>
	}
	un_temp=(unsigned char) ach_i2c_data[0];
 8001630:	7b3b      	ldrb	r3, [r7, #12]
 8001632:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	441a      	add	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 8001646:	7b7b      	ldrb	r3, [r7, #13]
 8001648:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	441a      	add	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 800165c:	7bbb      	ldrb	r3, [r7, #14]
 800165e:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	441a      	add	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	601a      	str	r2, [r3, #0]

	un_temp=(unsigned char) ach_i2c_data[3];
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	041b      	lsls	r3, r3, #16
 8001674:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	441a      	add	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 8001682:	7c3b      	ldrb	r3, [r7, #16]
 8001684:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	441a      	add	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 8001698:	7c7b      	ldrb	r3, [r7, #17]
 800169a:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	441a      	add	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	601a      	str	r2, [r3, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	601a      	str	r2, [r3, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	601a      	str	r2, [r3, #0]

	return MAX30102_OK;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000b20 	.word	0x20000b20

080016d0 <Max30102_SetIntAlmostFullEnabled>:

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	461a      	mov	r2, r3
 80016de:	2107      	movs	r1, #7
 80016e0:	2002      	movs	r0, #2
 80016e2:	f7ff ff47 	bl	8001574 <Max30102_WriteRegisterBit>
 80016e6:	4603      	mov	r3, r0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	461a      	mov	r2, r3
 80016fe:	2106      	movs	r1, #6
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff ff37 	bl	8001574 <Max30102_WriteRegisterBit>
 8001706:	4603      	mov	r3, r0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <Max30102_ReadInterruptStatus>:

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
}
#endif
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	*Status = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]

	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 800171e:	f107 030f 	add.w	r3, r7, #15
 8001722:	4619      	mov	r1, r3
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff ff05 	bl	8001534 <Max30102_ReadReg>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d001      	beq.n	8001734 <Max30102_ReadInterruptStatus+0x24>
		return MAX30102_ERROR;
 8001730:	2300      	movs	r3, #0
 8001732:	e00d      	b.n	8001750 <Max30102_ReadInterruptStatus+0x40>
	*Status |= tmp & 0xE1; // 3 highest bits
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b25a      	sxtb	r2, r3
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f023 031e 	bic.w	r3, r3, #30
 8001742:	b25b      	sxtb	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b25b      	sxtb	r3, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	701a      	strb	r2, [r3, #0]
#ifdef MAX30102_USE_INTERNAL_TEMPERATURE
	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_2, &tmp))
		return MAX30102_ERROR;
	*Status |= tmp & 0x02;
#endif
	return MAX30102_OK;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <Max30102_Callback>:

void Max30102_Callback(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	uint8_t Status;
	while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 800175e:	bf00      	nop
 8001760:	1dbb      	adds	r3, r7, #6
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ffd4 	bl	8001710 <Max30102_ReadInterruptStatus>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d1f8      	bne.n	8001760 <Max30102_Callback+0x8>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	b25b      	sxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	da4a      	bge.n	800180c <Max30102_Callback+0xb4>
	{
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	e044      	b.n	8001806 <Max30102_Callback+0xae>
		{
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 800177c:	bf00      	nop
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <Max30102_Callback+0x14c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <Max30102_Callback+0x150>)
 8001786:	441a      	add	r2, r3
 8001788:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <Max30102_Callback+0x14c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4947      	ldr	r1, [pc, #284]	; (80018ac <Max30102_Callback+0x154>)
 8001790:	440b      	add	r3, r1
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff ff2d 	bl	80015f4 <Max30102_ReadFifo>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d1ee      	bne.n	800177e <Max30102_Callback+0x26>
			if(IsFingerOnScreen)
 80017a0:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <Max30102_Callback+0x158>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00c      	beq.n	80017c4 <Max30102_Callback+0x6c>
			{
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <Max30102_Callback+0x14c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a3f      	ldr	r2, [pc, #252]	; (80018ac <Max30102_Callback+0x154>)
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d80e      	bhi.n	80017da <Max30102_Callback+0x82>
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <Max30102_Callback+0x158>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e00a      	b.n	80017da <Max30102_Callback+0x82>
			}
			else
			{
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <Max30102_Callback+0x14c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <Max30102_Callback+0x154>)
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80017d2:	d902      	bls.n	80017da <Max30102_Callback+0x82>
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <Max30102_Callback+0x158>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
			}
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <Max30102_Callback+0x14c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <Max30102_Callback+0x15c>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <Max30102_Callback+0x14c>)
 80017f4:	6013      	str	r3, [r2, #0]
			CollectedSamples++;
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <Max30102_Callback+0x160>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <Max30102_Callback+0x160>)
 80017fe:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	3301      	adds	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b10      	cmp	r3, #16
 800180a:	d9b7      	bls.n	800177c <Max30102_Callback+0x24>
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d041      	beq.n	800189a <Max30102_Callback+0x142>
	{
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8001816:	bf00      	nop
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <Max30102_Callback+0x14c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <Max30102_Callback+0x150>)
 8001820:	441a      	add	r2, r3
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <Max30102_Callback+0x14c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4920      	ldr	r1, [pc, #128]	; (80018ac <Max30102_Callback+0x154>)
 800182a:	440b      	add	r3, r1
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff fee0 	bl	80015f4 <Max30102_ReadFifo>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d1ee      	bne.n	8001818 <Max30102_Callback+0xc0>
		if(IsFingerOnScreen)
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <Max30102_Callback+0x158>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00c      	beq.n	800185e <Max30102_Callback+0x106>
		{
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <Max30102_Callback+0x14c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <Max30102_Callback+0x154>)
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001852:	4293      	cmp	r3, r2
 8001854:	d80e      	bhi.n	8001874 <Max30102_Callback+0x11c>
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <Max30102_Callback+0x158>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	e00a      	b.n	8001874 <Max30102_Callback+0x11c>
		}
		else
		{
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <Max30102_Callback+0x14c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <Max30102_Callback+0x154>)
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800186c:	d902      	bls.n	8001874 <Max30102_Callback+0x11c>
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <Max30102_Callback+0x158>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
		}
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <Max30102_Callback+0x14c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <Max30102_Callback+0x15c>)
 800187c:	fba3 1302 	umull	r1, r3, r3, r2
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <Max30102_Callback+0x14c>)
 800188e:	6013      	str	r3, [r2, #0]
		CollectedSamples++;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <Max30102_Callback+0x160>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <Max30102_Callback+0x160>)
 8001898:	6013      	str	r3, [r2, #0]
	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
	{

	}
#endif
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20001de4 	.word	0x20001de4
 80018a8:	20001484 	.word	0x20001484
 80018ac:	20000b24 	.word	0x20000b24
 80018b0:	20001df0 	.word	0x20001df0
 80018b4:	1b4e81b5 	.word	0x1b4e81b5
 80018b8:	20001dec 	.word	0x20001dec

080018bc <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	2004      	movs	r0, #4
 80018d2:	f7ff fe0d 	bl	80014f0 <Max30102_WriteReg>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d001      	beq.n	80018e0 <Max30102_FifoWritePointer+0x24>
			return MAX30102_ERROR;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	2005      	movs	r0, #5
 8001900:	f7ff fdf6 	bl	80014f0 <Max30102_WriteReg>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	d001      	beq.n	800190e <Max30102_FifoOverflowCounter+0x24>
			return MAX30102_ERROR;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4619      	mov	r1, r3
 800192c:	2006      	movs	r0, #6
 800192e:	f7ff fddf 	bl	80014f0 <Max30102_WriteReg>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d001      	beq.n	800193c <Max30102_FifoReadPointer+0x24>
			return MAX30102_ERROR;
 8001938:	2300      	movs	r3, #0
 800193a:	e000      	b.n	800193e <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8001950:	f107 030f 	add.w	r3, r7, #15
 8001954:	4619      	mov	r1, r3
 8001956:	2008      	movs	r0, #8
 8001958:	f7ff fdec 	bl	8001534 <Max30102_ReadReg>
 800195c:	4603      	mov	r3, r0
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 8001962:	2300      	movs	r3, #0
 8001964:	e018      	b.n	8001998 <Max30102_FifoSampleAveraging+0x52>
	tmp &= ~(0x07);
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	f023 0307 	bic.w	r3, r3, #7
 800196c:	b2db      	uxtb	r3, r3
 800196e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	015b      	lsls	r3, r3, #5
 8001974:	b25a      	sxtb	r2, r3
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	b25b      	sxtb	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b25b      	sxtb	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	4619      	mov	r1, r3
 8001986:	2008      	movs	r0, #8
 8001988:	f7ff fdb2 	bl	80014f0 <Max30102_WriteReg>
 800198c:	4603      	mov	r3, r0
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <Max30102_FifoSampleAveraging+0x50>
		return MAX30102_ERROR;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <Max30102_FifoSampleAveraging+0x52>

	return MAX30102_OK;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	2104      	movs	r1, #4
 80019b6:	2008      	movs	r0, #8
 80019b8:	f7ff fddc 	bl	8001574 <Max30102_WriteRegisterBit>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
	if(Value < 17) Value = 17;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d801      	bhi.n	80019da <Max30102_FifoAlmostFullValue+0x14>
 80019d6:	2311      	movs	r3, #17
 80019d8:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d901      	bls.n	80019e4 <Max30102_FifoAlmostFullValue+0x1e>
 80019e0:	2320      	movs	r3, #32
 80019e2:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f1c3 0320 	rsb	r3, r3, #32
 80019ea:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 80019ec:	f107 030f 	add.w	r3, r7, #15
 80019f0:	4619      	mov	r1, r3
 80019f2:	2008      	movs	r0, #8
 80019f4:	f7ff fd9e 	bl	8001534 <Max30102_ReadReg>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e01a      	b.n	8001a38 <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f023 030f 	bic.w	r3, r3, #15
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	b25a      	sxtb	r2, r3
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	4619      	mov	r1, r3
 8001a26:	2008      	movs	r0, #8
 8001a28:	f7ff fd62 	bl	80014f0 <Max30102_WriteReg>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <Max30102_Reset>:
{
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 8001a46:	23ff      	movs	r3, #255	; 0xff
 8001a48:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	2009      	movs	r0, #9
 8001a4e:	f7ff fd4f 	bl	80014f0 <Max30102_WriteReg>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d001      	beq.n	8001a5c <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00f      	b.n	8001a7c <Max30102_Reset+0x3c>
    do
    {
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	2009      	movs	r0, #9
 8001a62:	f7ff fd67 	bl	8001534 <Max30102_ReadReg>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d001      	beq.n	8001a70 <Max30102_Reset+0x30>
    		return MAX30102_ERROR;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e005      	b.n	8001a7c <Max30102_Reset+0x3c>
    } while(tmp & (1<<6));
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <Max30102_Reset+0x1c>

    return MAX30102_OK;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8001a8e:	f107 030f 	add.w	r3, r7, #15
 8001a92:	4619      	mov	r1, r3
 8001a94:	2009      	movs	r0, #9
 8001a96:	f7ff fd4d 	bl	8001534 <Max30102_ReadReg>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d001      	beq.n	8001aa4 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e01a      	b.n	8001ada <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	f023 0307 	bic.w	r3, r3, #7
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	b25a      	sxtb	r2, r3
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2009      	movs	r0, #9
 8001aca:	f7ff fd11 	bl	80014f0 <Max30102_WriteReg>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d001      	beq.n	8001ad8 <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e000      	b.n	8001ada <Max30102_SetMode+0x56>

	return MAX30102_OK;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001aec:	f107 030f 	add.w	r3, r7, #15
 8001af0:	4619      	mov	r1, r3
 8001af2:	200a      	movs	r0, #10
 8001af4:	f7ff fd1e 	bl	8001534 <Max30102_ReadReg>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e01b      	b.n	8001b3a <Max30102_SpO2AdcRange+0x58>
	tmp &= ~(0x03);
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	f023 0303 	bic.w	r3, r3, #3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	015b      	lsls	r3, r3, #5
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	4619      	mov	r1, r3
 8001b28:	200a      	movs	r0, #10
 8001b2a:	f7ff fce1 	bl	80014f0 <Max30102_WriteReg>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <Max30102_SpO2AdcRange+0x56>
		return MAX30102_ERROR;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <Max30102_SpO2AdcRange+0x58>

	return MAX30102_OK;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001b4c:	f107 030f 	add.w	r3, r7, #15
 8001b50:	4619      	mov	r1, r3
 8001b52:	200a      	movs	r0, #10
 8001b54:	f7ff fcee 	bl	8001534 <Max30102_ReadReg>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e01b      	b.n	8001b9a <Max30102_SpO2SampleRate+0x58>
	tmp &= ~(0x07);
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	f023 0307 	bic.w	r3, r3, #7
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	f003 031c 	and.w	r3, r3, #28
 8001b76:	b25a      	sxtb	r2, r3
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	4619      	mov	r1, r3
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f7ff fcb1 	bl	80014f0 <Max30102_WriteReg>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d001      	beq.n	8001b98 <Max30102_SpO2SampleRate+0x56>
		return MAX30102_ERROR;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e000      	b.n	8001b9a <Max30102_SpO2SampleRate+0x58>

	return MAX30102_OK;
 8001b98:	2301      	movs	r3, #1
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001bac:	f107 030f 	add.w	r3, r7, #15
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	200a      	movs	r0, #10
 8001bb4:	f7ff fcbe 	bl	8001534 <Max30102_ReadReg>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e01a      	b.n	8001bf8 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	f023 0303 	bic.w	r3, r3, #3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	b25a      	sxtb	r2, r3
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	4619      	mov	r1, r3
 8001be6:	200a      	movs	r0, #10
 8001be8:	f7ff fc82 	bl	80014f0 <Max30102_WriteReg>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	200c      	movs	r0, #12
 8001c10:	f7ff fc6e 	bl	80014f0 <Max30102_WriteReg>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d001      	beq.n	8001c1e <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4619      	mov	r1, r3
 8001c36:	200d      	movs	r0, #13
 8001c38:	f7ff fc5a 	bl	80014f0 <Max30102_WriteReg>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d001      	beq.n	8001c46 <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <Max30102_IsFingerOnSensor>:

//
//	Usage functions
//
MAX30102_STATUS Max30102_IsFingerOnSensor(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
	return IsFingerOnScreen;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <Max30102_IsFingerOnSensor+0x14>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	20001df0 	.word	0x20001df0

08001c68 <Max30102_GetHeartRate>:

int32_t Max30102_GetHeartRate(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
	return HeartRate;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <Max30102_GetHeartRate+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20001dfc 	.word	0x20001dfc

08001c80 <Max30102_GetHeartRateValid>:

int8_t Max30102_GetHeartRateValid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	return IsHrValid;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <Max30102_GetHeartRateValid+0x14>)
 8001c86:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	20001e00 	.word	0x20001e00

08001c98 <Max30102_GetSpO2Value>:

int32_t Max30102_GetSpO2Value(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	return Sp02Value;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <Max30102_GetSpO2Value+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20001df4 	.word	0x20001df4

08001cb0 <Max30102_GetSpO2Valid>:

int8_t Max30102_GetSpO2Valid(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	return Sp02IsValid;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <Max30102_GetSpO2Valid+0x14>)
 8001cb6:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20001df8 	.word	0x20001df8

08001cc8 <Max30102_Task>:

void Max30102_Task(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af04      	add	r7, sp, #16
	switch(StateMachine)
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <Max30102_Task+0x158>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	f200 80a1 	bhi.w	8001e1a <Max30102_Task+0x152>
 8001cd8:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <Max30102_Task+0x18>)
 8001cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cde:	bf00      	nop
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001d2b 	.word	0x08001d2b
 8001ce8:	08001d5b 	.word	0x08001d5b
 8001cec:	08001de3 	.word	0x08001de3
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <Max30102_Task+0x15c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <Max30102_Task+0x160>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <Max30102_Task+0x164>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8084 	beq.w	8001e10 <Max30102_Task+0x148>
			{
				CollectedSamples = 0;
 8001d08:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <Max30102_Task+0x168>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <Max30102_Task+0x16c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <Max30102_Task+0x170>)
 8001d14:	6013      	str	r3, [r2, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8001d16:	2024      	movs	r0, #36	; 0x24
 8001d18:	f7ff ff72 	bl	8001c00 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8001d1c:	2024      	movs	r0, #36	; 0x24
 8001d1e:	f7ff ff83 	bl	8001c28 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <Max30102_Task+0x158>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
			}
			//sprintf ((char*)debugBuf, "IsFinger %d\r\n", IsFingerOnScreen);
		    //HAL_UART_Transmit (huart_debug , debugBuf , sizeof ( debugBuf ) , 50) ; // transmit the data
			break;
 8001d28:	e072      	b.n	8001e10 <Max30102_Task+0x148>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <Max30102_Task+0x164>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <Max30102_Task+0x7e>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <Max30102_Task+0x168>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d3c:	d96a      	bls.n	8001e14 <Max30102_Task+0x14c>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <Max30102_Task+0x158>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
				//sprintf ((char*)debugBuf, "MAX30102_STATE_CALIBRATE\r\n");
				//HAL_UART_Transmit (huart_debug , debugBuf , sizeof ( debugBuf ) , 50) ; // transmit the data
			break;
 8001d44:	e066      	b.n	8001e14 <Max30102_Task+0x14c>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff ff5a 	bl	8001c00 <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff ff6b 	bl	8001c28 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <Max30102_Task+0x158>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
			break;
 8001d58:	e05c      	b.n	8001e14 <Max30102_Task+0x14c>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8001d5a:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <Max30102_Task+0x164>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d026      	beq.n	8001db2 <Max30102_Task+0xea>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <Max30102_Task+0x170>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4a34      	ldr	r2, [pc, #208]	; (8001e3c <Max30102_Task+0x174>)
 8001d6c:	9203      	str	r2, [sp, #12]
 8001d6e:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <Max30102_Task+0x15c>)
 8001d70:	9202      	str	r2, [sp, #8]
 8001d72:	4a33      	ldr	r2, [pc, #204]	; (8001e40 <Max30102_Task+0x178>)
 8001d74:	9201      	str	r2, [sp, #4]
 8001d76:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <Max30102_Task+0x160>)
 8001d78:	9200      	str	r2, [sp, #0]
 8001d7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d7e:	4931      	ldr	r1, [pc, #196]	; (8001e44 <Max30102_Task+0x17c>)
 8001d80:	4831      	ldr	r0, [pc, #196]	; (8001e48 <Max30102_Task+0x180>)
 8001d82:	f000 f901 	bl	8001f88 <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <Max30102_Task+0x170>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <Max30102_Task+0x184>)
 8001d90:	fba3 1302 	umull	r1, r3, r3, r2
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <Max30102_Task+0x170>)
 8001da2:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 8001da4:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <Max30102_Task+0x168>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <Max30102_Task+0x158>)
 8001dac:	2203      	movs	r2, #3
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e008      	b.n	8001dc4 <Max30102_Task+0xfc>
			}
			else
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff ff24 	bl	8001c00 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff ff35 	bl	8001c28 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <Max30102_Task+0x158>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			bufclr((char*)debugBuf);
 8001dc4:	4822      	ldr	r0, [pc, #136]	; (8001e50 <Max30102_Task+0x188>)
 8001dc6:	f7ff f871 	bl	8000eac <bufclr>
			sprintf ((char*)debugBuf, "MAX30102_STATE_CALCULATE_HR\r\n");
 8001dca:	4922      	ldr	r1, [pc, #136]	; (8001e54 <Max30102_Task+0x18c>)
 8001dcc:	4820      	ldr	r0, [pc, #128]	; (8001e50 <Max30102_Task+0x188>)
 8001dce:	f009 fb17 	bl	800b400 <siprintf>
			HAL_UART_Transmit (huart_debug , debugBuf , sizeof ( debugBuf ) , 50) ; // transmit the data
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <Max30102_Task+0x190>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	2332      	movs	r3, #50	; 0x32
 8001dd8:	2228      	movs	r2, #40	; 0x28
 8001dda:	491d      	ldr	r1, [pc, #116]	; (8001e50 <Max30102_Task+0x188>)
 8001ddc:	f005 f95b 	bl	8007096 <HAL_UART_Transmit>
			break;
 8001de0:	e01b      	b.n	8001e1a <Max30102_Task+0x152>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <Max30102_Task+0x164>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <Max30102_Task+0x134>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <Max30102_Task+0x168>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d911      	bls.n	8001e18 <Max30102_Task+0x150>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <Max30102_Task+0x158>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	701a      	strb	r2, [r3, #0]
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			//sprintf ((char*)debugBuf, "MAX30102_STATE_COLLECT_NEXT_PORTION\r\n");
			//HAL_UART_Transmit (huart_debug , debugBuf , sizeof ( debugBuf ) , 50) ; // transmit the data
			break;
 8001dfa:	e00d      	b.n	8001e18 <Max30102_Task+0x150>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff feff 	bl	8001c00 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff ff10 	bl	8001c28 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <Max30102_Task+0x158>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
			break;
 8001e0e:	e003      	b.n	8001e18 <Max30102_Task+0x150>
			break;
 8001e10:	bf00      	nop
 8001e12:	e002      	b.n	8001e1a <Max30102_Task+0x152>
			break;
 8001e14:	bf00      	nop
 8001e16:	e000      	b.n	8001e1a <Max30102_Task+0x152>
			break;
 8001e18:	bf00      	nop
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20001e01 	.word	0x20001e01
 8001e24:	20001dfc 	.word	0x20001dfc
 8001e28:	20001df4 	.word	0x20001df4
 8001e2c:	20001df0 	.word	0x20001df0
 8001e30:	20001dec 	.word	0x20001dec
 8001e34:	20001de4 	.word	0x20001de4
 8001e38:	20001de8 	.word	0x20001de8
 8001e3c:	20001e00 	.word	0x20001e00
 8001e40:	20001df8 	.word	0x20001df8
 8001e44:	20001484 	.word	0x20001484
 8001e48:	20000b24 	.word	0x20000b24
 8001e4c:	1b4e81b5 	.word	0x1b4e81b5
 8001e50:	20001e04 	.word	0x20001e04
 8001e54:	0800db44 	.word	0x0800db44
 8001e58:	20000000 	.word	0x20000000

08001e5c <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8001e64:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <Max30102_Init+0x124>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
	if(MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 8001e6a:	f7ff fde9 	bl	8001a40 <Max30102_Reset>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d001      	beq.n	8001e78 <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e07e      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy))
 8001e78:	f107 030f 	add.w	r3, r7, #15
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fb58 	bl	8001534 <Max30102_ReadReg>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <Max30102_Init+0x32>
		return MAX30102_ERROR;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e073      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff fd14 	bl	80018bc <Max30102_FifoWritePointer>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <Max30102_Init+0x42>
		return MAX30102_ERROR;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e06b      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fd23 	bl	80018ea <Max30102_FifoOverflowCounter>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <Max30102_Init+0x52>
		return MAX30102_ERROR;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e063      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fd32 	bl	8001918 <Max30102_FifoReadPointer>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <Max30102_Init+0x62>
		return MAX30102_ERROR;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e05b      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff fd41 	bl	8001946 <Max30102_FifoSampleAveraging>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d001      	beq.n	8001ece <Max30102_Init+0x72>
		return MAX30102_ERROR;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e053      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fd66 	bl	80019a0 <Max30102_FifoRolloverEnable>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <Max30102_Init+0x82>
		return MAX30102_ERROR;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e04b      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8001ede:	2011      	movs	r0, #17
 8001ee0:	f7ff fd71 	bl	80019c6 <Max30102_FifoAlmostFullValue>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <Max30102_Init+0x92>
		return MAX30102_ERROR;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e043      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f7ff fdc8 	bl	8001a84 <Max30102_SetMode>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e03b      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff fdef 	bl	8001ae2 <Max30102_SpO2AdcRange>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e033      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff fe17 	bl	8001b42 <Max30102_SpO2SampleRate>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e02b      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f7ff fe3f 	bl	8001ba2 <Max30102_SpO2LedPulseWidth>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e023      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff fe66 	bl	8001c00 <Max30102_Led1PulseAmplitude>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e01b      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff fe72 	bl	8001c28 <Max30102_Led2PulseAmplitude>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d001      	beq.n	8001f4e <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e013      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff fbbe 	bl	80016d0 <Max30102_SetIntAlmostFullEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <Max30102_Init+0x102>
		return MAX30102_ERROR;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e00b      	b.n	8001f76 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff fbc6 	bl	80016f0 <Max30102_SetIntFifoDataReadyEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <Max30102_Init+0x112>
		return MAX30102_ERROR;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e003      	b.n	8001f76 <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <Max30102_Init+0x128>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000b20 	.word	0x20000b20
 8001f84:	20001e01 	.word	0x20001e01

08001f88 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b0d3      	sub	sp, #332	; 0x14c
 8001f8c:	af04      	add	r7, sp, #16
 8001f8e:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8001f92:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 8001f96:	6020      	str	r0, [r4, #0]
 8001f98:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001f9c:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8001fa0:	6001      	str	r1, [r0, #0]
 8001fa2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001fa6:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8001faa:	600a      	str	r2, [r1, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fb2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001fb6:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5],n_ratio_average; 
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8001fb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fbc:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal    
    un_ir_mean =0; 
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001fd2:	e021      	b.n	8002018 <maxim_heart_rate_and_oxygen_saturation+0x90>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8001fd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001fde:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001fec:	4413      	add	r3, r2
 8001fee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	4ad4      	ldr	r2, [pc, #848]	; (800234c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8001ffa:	fba2 1203 	umull	r1, r2, r2, r3
 8001ffe:	0992      	lsrs	r2, r2, #6
 8002000:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002004:	fb01 f202 	mul.w	r2, r1, r2
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 800200e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002012:	3301      	adds	r3, #1
 8002014:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002018:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800201c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002020:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	dbd4      	blt.n	8001fd4 <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 800202a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800202e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8002040:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002044:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002054:	e025      	b.n	80020a2 <maxim_heart_rate_and_oxygen_saturation+0x11a>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8002056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002060:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4413      	add	r3, r2
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	4619      	mov	r1, r3
 8002072:	4ab7      	ldr	r2, [pc, #732]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8002074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002078:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800207c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002080:	3301      	adds	r3, #1
 8002082:	4ab2      	ldr	r2, [pc, #712]	; (800234c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8002084:	fba2 1203 	umull	r1, r2, r2, r3
 8002088:	0992      	lsrs	r2, r2, #6
 800208a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800208e:	fb01 f202 	mul.w	r2, r1, r2
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8002098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800209c:	3301      	adds	r3, #1
 800209e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80020a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80020a6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	dbd0      	blt.n	8002056 <maxim_heart_rate_and_oxygen_saturation+0xce>
	}
    
    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80020ba:	e02c      	b.n	8002116 <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 80020bc:	4aa4      	ldr	r2, [pc, #656]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80020be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ca:	3301      	adds	r3, #1
 80020cc:	49a0      	ldr	r1, [pc, #640]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80020ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020d2:	441a      	add	r2, r3
 80020d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020d8:	3302      	adds	r3, #2
 80020da:	499d      	ldr	r1, [pc, #628]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80020dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020e0:	441a      	add	r2, r3
 80020e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020e6:	3303      	adds	r3, #3
 80020e8:	4999      	ldr	r1, [pc, #612]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80020ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020ee:	4413      	add	r3, r2
 80020f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4; 
 80020f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	da00      	bge.n	80020fe <maxim_heart_rate_and_oxygen_saturation+0x176>
 80020fc:	3303      	adds	r3, #3
 80020fe:	109b      	asrs	r3, r3, #2
 8002100:	4619      	mov	r1, r3
 8002102:	4a93      	ldr	r2, [pc, #588]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8002104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002108:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 800210c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002110:	3301      	adds	r3, #1
 8002112:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800211a:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 800211e:	dbcd      	blt.n	80020bc <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002126:	e015      	b.n	8002154 <maxim_heart_rate_and_oxygen_saturation+0x1cc>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8002128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800212c:	3301      	adds	r3, #1
 800212e:	4a88      	ldr	r2, [pc, #544]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8002130:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002134:	4986      	ldr	r1, [pc, #536]	; (8002350 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8002136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800213a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	4984      	ldr	r1, [pc, #528]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8002142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 800214a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800214e:	3301      	adds	r3, #1
 8002150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002158:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800215c:	dde4      	ble.n	8002128 <maxim_heart_rate_and_oxygen_saturation+0x1a0>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002164:	e019      	b.n	800219a <maxim_heart_rate_and_oxygen_saturation+0x212>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8002166:	4a7b      	ldr	r2, [pc, #492]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8002168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800216c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002174:	3301      	adds	r3, #1
 8002176:	4977      	ldr	r1, [pc, #476]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8002178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800217c:	4413      	add	r3, r2
 800217e:	0fda      	lsrs	r2, r3, #31
 8002180:	4413      	add	r3, r2
 8002182:	105b      	asrs	r3, r3, #1
 8002184:	4619      	mov	r1, r3
 8002186:	4a73      	ldr	r2, [pc, #460]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8002188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800218c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8002190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002194:	3301      	adds	r3, #1
 8002196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800219a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800219e:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80021a2:	dbe0      	blt.n	8002166 <maxim_heart_rate_and_oxygen_saturation+0x1de>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021aa:	e039      	b.n	8002220 <maxim_heart_rate_and_oxygen_saturation+0x298>
        s= 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80021b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80021ba:	e018      	b.n	80021ee <maxim_heart_rate_and_oxygen_saturation+0x266>
            s -= an_dx[k] *auw_hamm[k-i] ; 
 80021bc:	4a65      	ldr	r2, [pc, #404]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80021be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80021ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80021ce:	1a8a      	subs	r2, r1, r2
 80021d0:	4961      	ldr	r1, [pc, #388]	; (8002358 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 80021d2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80021e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021e8:	3301      	adds	r3, #1
 80021ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80021ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021f2:	3304      	adds	r3, #4
 80021f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dddf      	ble.n	80021bc <maxim_heart_rate_and_oxygen_saturation+0x234>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 80021fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002200:	4a56      	ldr	r2, [pc, #344]	; (800235c <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8002202:	fb82 1203 	smull	r1, r2, r2, r3
 8002206:	1252      	asrs	r2, r2, #9
 8002208:	17db      	asrs	r3, r3, #31
 800220a:	1ad2      	subs	r2, r2, r3
 800220c:	4951      	ldr	r1, [pc, #324]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800220e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8002216:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800221a:	3301      	adds	r3, #1
 800221c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002220:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002224:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002228:	ddc0      	ble.n	80021ac <maxim_heart_rate_and_oxygen_saturation+0x224>
    }

 
    n_th1=0; // threshold calculation
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002236:	e011      	b.n	800225c <maxim_heart_rate_and_oxygen_saturation+0x2d4>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8002238:	4a46      	ldr	r2, [pc, #280]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800223a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	2b00      	cmp	r3, #0
 8002244:	bfb8      	it	lt
 8002246:	425b      	neglt	r3, r3
 8002248:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800224c:	4413      	add	r3, r2
 800224e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8002252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002256:	3301      	adds	r3, #1
 8002258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800225c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002260:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8002264:	dde8      	ble.n	8002238 <maxim_heart_rate_and_oxygen_saturation+0x2b0>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8002266:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800226a:	4a3d      	ldr	r2, [pc, #244]	; (8002360 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 800226c:	fb82 1203 	smull	r1, r2, r2, r3
 8002270:	1192      	asrs	r2, r2, #6
 8002272:	17db      	asrs	r3, r3, #31
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is actually index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 800227a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800227e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002282:	2305      	movs	r3, #5
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	2308      	movs	r3, #8
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f240 13ef 	movw	r3, #495	; 0x1ef
 8002294:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8002296:	f000 fb91 	bl	80029bc <maxim_find_peaks>

    n_peak_interval_sum =0;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 80022a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	dd44      	ble.n	8002332 <maxim_heart_rate_and_oxygen_saturation+0x3aa>
        for (k=1; k<n_npks; k++)
 80022a8:	2301      	movs	r3, #1
 80022aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80022ae:	e01b      	b.n	80022e8 <maxim_heart_rate_and_oxygen_saturation+0x360>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 80022b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80022b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80022bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022c4:	1e59      	subs	r1, r3, #1
 80022c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80022ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80022d8:	4413      	add	r3, r2
 80022da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 80022de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022e2:	3301      	adds	r3, #1
 80022e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80022e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbdd      	blt.n	80022b0 <maxim_heart_rate_and_oxygen_saturation+0x328>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 80022f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022f8:	3b01      	subs	r3, #1
 80022fa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80022fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002302:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8002306:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002312:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002364 <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 8002316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231e:	ee17 2a90 	vmov	r2, s15
 8002322:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002326:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8002328:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e007      	b.n	8002342 <maxim_heart_rate_and_oxygen_saturation+0x3ba>
    }
    else  {
        *pn_heart_rate = -999;
 8002332:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8002338:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 800233a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
    }
            
    for ( k=0 ; k<n_npks ;k++)
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002348:	e026      	b.n	8002398 <maxim_heart_rate_and_oxygen_saturation+0x410>
 800234a:	bf00      	nop
 800234c:	1b4e81b5 	.word	0x1b4e81b5
 8002350:	200025ec 	.word	0x200025ec
 8002354:	20001e2c 	.word	0x20001e2c
 8002358:	0800dcf8 	.word	0x0800dcf8
 800235c:	725f9bed 	.word	0x725f9bed
 8002360:	21195767 	.word	0x21195767
 8002364:	45bb8000 	.word	0x45bb8000
 8002368:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 800236c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002370:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002374:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	1c9a      	adds	r2, r3, #2
 800237e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002388:	443b      	add	r3, r7
 800238a:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 800238e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002392:	3301      	adds	r3, #1
 8002394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800239c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbe3      	blt.n	800236c <maxim_heart_rate_and_oxygen_saturation+0x3e4>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 80023a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80023a8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80023b8:	e032      	b.n	8002420 <maxim_heart_rate_and_oxygen_saturation+0x498>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80023ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80023c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4ab3      	ldr	r2, [pc, #716]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80023d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 80023da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80023e4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	4aac      	ldr	r2, [pc, #688]	; (80026a4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80023f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80023fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023fe:	3301      	adds	r3, #1
 8002400:	4aa9      	ldr	r2, [pc, #676]	; (80026a8 <maxim_heart_rate_and_oxygen_saturation+0x720>)
 8002402:	fba2 1203 	umull	r1, r2, r2, r3
 8002406:	0992      	lsrs	r2, r2, #6
 8002408:	f44f 7116 	mov.w	r1, #600	; 0x258
 800240c:	fb01 f202 	mul.w	r2, r1, r2
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8002416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800241a:	3301      	adds	r3, #1
 800241c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002420:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002424:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002428:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	dbc3      	blt.n	80023ba <maxim_heart_rate_and_oxygen_saturation+0x432>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0; 
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800243e:	e05a      	b.n	80024f6 <maxim_heart_rate_and_oxygen_saturation+0x56e>
        un_only_once =1;
 8002440:	2301      	movs	r3, #1
 8002442:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8002446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002450:	443b      	add	r3, r7
 8002452:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 800245a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800245e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8002462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002466:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 800246a:	da3f      	bge.n	80024ec <maxim_heart_rate_and_oxygen_saturation+0x564>
 800246c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002470:	2b05      	cmp	r3, #5
 8002472:	dd3b      	ble.n	80024ec <maxim_heart_rate_and_oxygen_saturation+0x564>
            for(i= m-5;i<m+5; i++)
 8002474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002478:	3b05      	subs	r3, #5
 800247a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800247e:	e025      	b.n	80024cc <maxim_heart_rate_and_oxygen_saturation+0x544>
                if (an_x[i]<n_c_min){
 8002480:	4a87      	ldr	r2, [pc, #540]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8002482:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800248e:	429a      	cmp	r2, r3
 8002490:	dd17      	ble.n	80024c2 <maxim_heart_rate_and_oxygen_saturation+0x53a>
                    if (un_only_once >0){
 8002492:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <maxim_heart_rate_and_oxygen_saturation+0x518>
                       un_only_once =0;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   } 
                   n_c_min= an_x[i] ;
 80024a0:	4a7f      	ldr	r2, [pc, #508]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80024a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 80024ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80024b8:	443b      	add	r3, r7
 80024ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80024be:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 80024c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024c6:	3301      	adds	r3, #1
 80024c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d0:	3304      	adds	r3, #4
 80024d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80024d6:	429a      	cmp	r2, r3
 80024d8:	ddd2      	ble.n	8002480 <maxim_heart_rate_and_oxygen_saturation+0x4f8>
                }
            if (un_only_once ==0)
 80024da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <maxim_heart_rate_and_oxygen_saturation+0x564>
                n_exact_ir_valley_locs_count ++ ;
 80024e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024e6:	3301      	adds	r3, #1
 80024e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 80024ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024f0:	3301      	adds	r3, #1
 80024f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80024f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80024fe:	429a      	cmp	r2, r3
 8002500:	db9e      	blt.n	8002440 <maxim_heart_rate_and_oxygen_saturation+0x4b8>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8002502:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002506:	2b01      	cmp	r3, #1
 8002508:	dc08      	bgt.n	800251c <maxim_heart_rate_and_oxygen_saturation+0x594>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 800250a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800250e:	4a67      	ldr	r2, [pc, #412]	; (80026ac <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8002510:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0; 
 8002512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
       return;
 800251a:	e243      	b.n	80029a4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002522:	e04c      	b.n	80025be <maxim_heart_rate_and_oxygen_saturation+0x636>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8002524:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8002526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800252a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800252e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002532:	3301      	adds	r3, #1
 8002534:	495a      	ldr	r1, [pc, #360]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8002536:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800253a:	441a      	add	r2, r3
 800253c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002540:	3302      	adds	r3, #2
 8002542:	4957      	ldr	r1, [pc, #348]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8002544:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002548:	441a      	add	r2, r3
 800254a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800254e:	3303      	adds	r3, #3
 8002550:	4953      	ldr	r1, [pc, #332]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8002552:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002556:	4413      	add	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	da00      	bge.n	800255e <maxim_heart_rate_and_oxygen_saturation+0x5d6>
 800255c:	3303      	adds	r3, #3
 800255e:	109b      	asrs	r3, r3, #2
 8002560:	4619      	mov	r1, r3
 8002562:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8002564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002568:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800256e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002572:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800257a:	3301      	adds	r3, #1
 800257c:	4949      	ldr	r1, [pc, #292]	; (80026a4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800257e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002582:	441a      	add	r2, r3
 8002584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002588:	3302      	adds	r3, #2
 800258a:	4946      	ldr	r1, [pc, #280]	; (80026a4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800258c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002590:	441a      	add	r2, r3
 8002592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002596:	3303      	adds	r3, #3
 8002598:	4942      	ldr	r1, [pc, #264]	; (80026a4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800259a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800259e:	4413      	add	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da00      	bge.n	80025a6 <maxim_heart_rate_and_oxygen_saturation+0x61e>
 80025a4:	3303      	adds	r3, #3
 80025a6:	109b      	asrs	r3, r3, #2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4a3e      	ldr	r2, [pc, #248]	; (80026a4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80025ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80025b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025b8:	3301      	adds	r3, #1
 80025ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80025be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025c2:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80025c6:	dbad      	blt.n	8002524 <maxim_heart_rate_and_oxygen_saturation+0x59c>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0; 
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0; 
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    for(k=0; k< 5; k++) an_ratio[k]=0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80025da:	e00d      	b.n	80025f8 <maxim_heart_rate_and_oxygen_saturation+0x670>
 80025dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80025e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025e4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80025e8:	2100      	movs	r1, #0
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025f2:	3301      	adds	r3, #1
 80025f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80025f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	dded      	ble.n	80025dc <maxim_heart_rate_and_oxygen_saturation+0x654>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002606:	e018      	b.n	800263a <maxim_heart_rate_and_oxygen_saturation+0x6b2>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8002608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002612:	443b      	add	r3, r7
 8002614:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002618:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800261c:	dd08      	ble.n	8002630 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 800261e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002622:	4a22      	ldr	r2, [pc, #136]	; (80026ac <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8002624:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0; 
 8002626:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
            return;
 800262e:	e1b9      	b.n	80029a4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8002630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800263a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800263e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002642:	429a      	cmp	r2, r3
 8002644:	dbe0      	blt.n	8002608 <maxim_heart_rate_and_oxygen_saturation+0x680>
        }
    }
    // find max between two valley locations 
    // and use ratio between AC component of Ir & Red and DC component of Ir & Red for SPO2

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800264c:	e14d      	b.n	80028ea <maxim_heart_rate_and_oxygen_saturation+0x962>
        n_y_dc_max= -16777216 ; 
 800264e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002652:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216; 
 8002656:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800265a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 800265e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002662:	3301      	adds	r3, #1
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800266a:	443b      	add	r3, r7
 800266c:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8002670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800267a:	443b      	add	r3, r7
 800267c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b0a      	cmp	r3, #10
 8002684:	f340 812c 	ble.w	80028e0 <maxim_heart_rate_and_oxygen_saturation+0x958>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8002688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002692:	443b      	add	r3, r7
 8002694:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002698:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800269c:	e035      	b.n	800270a <maxim_heart_rate_and_oxygen_saturation+0x782>
 800269e:	bf00      	nop
 80026a0:	200025ec 	.word	0x200025ec
 80026a4:	20002dbc 	.word	0x20002dbc
 80026a8:	1b4e81b5 	.word	0x1b4e81b5
 80026ac:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80026b0:	4abe      	ldr	r2, [pc, #760]	; (80029ac <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80026b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ba:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80026be:	429a      	cmp	r2, r3
 80026c0:	da0a      	bge.n	80026d8 <maxim_heart_rate_and_oxygen_saturation+0x750>
 80026c2:	4aba      	ldr	r2, [pc, #744]	; (80029ac <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80026c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80026d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80026d8:	4ab5      	ldr	r2, [pc, #724]	; (80029b0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80026da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80026e6:	429a      	cmp	r2, r3
 80026e8:	da0a      	bge.n	8002700 <maxim_heart_rate_and_oxygen_saturation+0x778>
 80026ea:	4ab1      	ldr	r2, [pc, #708]	; (80029b0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80026ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80026f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8002700:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002704:	3301      	adds	r3, #1
 8002706:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800270a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800270e:	3301      	adds	r3, #1
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002716:	443b      	add	r3, r7
 8002718:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800271c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002720:	429a      	cmp	r2, r3
 8002722:	dbc5      	blt.n	80026b0 <maxim_heart_rate_and_oxygen_saturation+0x728>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8002724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002728:	3301      	adds	r3, #1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002730:	443b      	add	r3, r7
 8002732:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002736:	4a9e      	ldr	r2, [pc, #632]	; (80029b0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8002738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800273c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002746:	443b      	add	r3, r7
 8002748:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800274c:	4998      	ldr	r1, [pc, #608]	; (80029b0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800274e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800275e:	443b      	add	r3, r7
 8002760:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002764:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8002768:	1acb      	subs	r3, r1, r3
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 8002772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800277c:	443b      	add	r3, r7
 800277e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002782:	4a8b      	ldr	r2, [pc, #556]	; (80029b0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8002784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800278c:	3301      	adds	r3, #1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002794:	443b      	add	r3, r7
 8002796:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 800279a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80027a4:	443b      	add	r3, r7
 80027a6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80027aa:	1acb      	subs	r3, r1, r3
 80027ac:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80027b0:	fb91 f3f3 	sdiv	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        
        
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subtracting linear DC components from raw
 80027ba:	4a7d      	ldr	r2, [pc, #500]	; (80029b0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80027bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 80027ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027d2:	3301      	adds	r3, #1
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80027da:	443b      	add	r3, r7
 80027dc:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80027e0:	4a72      	ldr	r2, [pc, #456]	; (80029ac <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80027e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80027f0:	443b      	add	r3, r7
 80027f2:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80027f6:	496d      	ldr	r1, [pc, #436]	; (80029ac <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80027f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027fc:	1ad2      	subs	r2, r2, r3
 80027fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002808:	443b      	add	r3, r7
 800280a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800280e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8002812:	1acb      	subs	r3, r1, r3
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 800281c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002826:	443b      	add	r3, r7
 8002828:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800282c:	4a5f      	ldr	r2, [pc, #380]	; (80029ac <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 800282e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002836:	3301      	adds	r3, #1
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800283e:	443b      	add	r3, r7
 8002840:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8002844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800284e:	443b      	add	r3, r7
 8002850:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002854:	1acb      	subs	r3, r1, r3
 8002856:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800285a:	fb91 f3f3 	sdiv	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subtracting linear DC components from raw
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8002866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800286a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800286e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8002878:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800287c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	11db      	asrs	r3, r3, #7
 8002886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 800288a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800288e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	11db      	asrs	r3, r3, #7
 8002898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 800289c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	dd1d      	ble.n	80028e0 <maxim_heart_rate_and_oxygen_saturation+0x958>
 80028a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	dc19      	bgt.n	80028e0 <maxim_heart_rate_and_oxygen_saturation+0x958>
 80028ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <maxim_heart_rate_and_oxygen_saturation+0x958>
            {   
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formula is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80028b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b8:	2264      	movs	r2, #100	; 0x64
 80028ba:	fb03 f202 	mul.w	r2, r3, r2
 80028be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c2:	fb92 f1f3 	sdiv	r1, r2, r3
 80028c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028ce:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80028d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 80028d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028da:	3301      	adds	r3, #1
 80028dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80028e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028e4:	3301      	adds	r3, #1
 80028e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80028ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f6ff aeaa 	blt.w	800264e <maxim_heart_rate_and_oxygen_saturation+0x6c6>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f94f 	bl	8002ba6 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8002908:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800290c:	0fda      	lsrs	r2, r3, #31
 800290e:	4413      	add	r3, r2
 8002910:	105b      	asrs	r3, r3, #1
 8002912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291a:	2b01      	cmp	r3, #1
 800291c:	dd17      	ble.n	800294e <maxim_heart_rate_and_oxygen_saturation+0x9c6>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 800291e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002922:	1e5a      	subs	r2, r3, #1
 8002924:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002928:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800292c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002930:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002934:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002938:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800293c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002940:	4413      	add	r3, r2
 8002942:	0fda      	lsrs	r2, r3, #31
 8002944:	4413      	add	r3, r2
 8002946:	105b      	asrs	r3, r3, #1
 8002948:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800294c:	e009      	b.n	8002962 <maxim_heart_rate_and_oxygen_saturation+0x9da>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 800294e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002952:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002956:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800295a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8002962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002966:	2b02      	cmp	r3, #2
 8002968:	dd14      	ble.n	8002994 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
 800296a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800296e:	2bb7      	cmp	r3, #183	; 0xb7
 8002970:	dc10      	bgt.n	8002994 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <maxim_heart_rate_and_oxygen_saturation+0xa2c>)
 8002974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002978:	4413      	add	r3, r2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 8002980:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002984:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002988:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 800298a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e007      	b.n	80029a4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8002994:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <maxim_heart_rate_and_oxygen_saturation+0xa30>)
 800299a:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0; 
 800299c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
    }
}
 80029a4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	200025ec 	.word	0x200025ec
 80029b0:	20002dbc 	.word	0x20002dbc
 80029b4:	0800dd38 	.word	0x0800dd38
 80029b8:	fffffc19 	.word	0xfffffc19

080029bc <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f812 	bl	80029fe <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f880 	bl	8002ae6 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	bfa8      	it	ge
 80029f0:	461a      	movge	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	601a      	str	r2, [r3, #0]
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    
    while (i < n_size-1){
 8002a16:	e05a      	b.n	8002ace <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a3a      	ldr	r2, [r7, #32]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	da4f      	bge.n	8002ac8 <maxim_peaks_above_min_height+0xca>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	440b      	add	r3, r1
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dd40      	ble.n	8002ac8 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8002a4a:	e002      	b.n	8002a52 <maxim_peaks_above_min_height+0x54>
                n_width++;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dd0d      	ble.n	8002a7a <maxim_peaks_above_min_height+0x7c>
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	6979      	ldr	r1, [r7, #20]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	440b      	add	r3, r1
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	440b      	add	r3, r1
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d0e8      	beq.n	8002a4c <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	6979      	ldr	r1, [r7, #20]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	440b      	add	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	440b      	add	r3, r1
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dd13      	ble.n	8002abe <maxim_peaks_above_min_height+0xc0>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b0e      	cmp	r3, #14
 8002a9c:	dc0f      	bgt.n	8002abe <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	6011      	str	r1, [r2, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4413      	add	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e003      	b.n	8002ac6 <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8002ac6:	e002      	b.n	8002ace <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	db9f      	blt.n	8002a18 <maxim_peaks_above_min_height+0x1a>
    }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f895 	bl	8002c2c <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	e03e      	b.n	8002b88 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	e02c      	b.n	8002b7a <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d005      	beq.n	8002b3e <maxim_remove_close_peaks+0x58>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	440b      	add	r3, r1
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	e001      	b.n	8002b42 <maxim_remove_close_peaks+0x5c>
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dc04      	bgt.n	8002b58 <maxim_remove_close_peaks+0x72>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	425b      	negs	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	da0d      	bge.n	8002b74 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	441a      	add	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c58      	adds	r0, r3, #1
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	6008      	str	r0, [r1, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	440b      	add	r3, r1
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	3301      	adds	r3, #1
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	dbce      	blt.n	8002b20 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3301      	adds	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbbb      	blt.n	8002b0a <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4619      	mov	r1, r3
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f804 	bl	8002ba6 <maxim_sort_ascend>
}
 8002b9e:	bf00      	nop
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b087      	sub	sp, #28
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e02f      	b.n	8002c16 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e00f      	b.n	8002be8 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	441a      	add	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	440b      	add	r3, r1
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd0a      	ble.n	8002c04 <maxim_sort_ascend+0x5e>
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbe1      	blt.n	8002bc8 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbcb      	blt.n	8002bb6 <maxim_sort_ascend+0x10>
    }
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8002c38:	2301      	movs	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e037      	b.n	8002cae <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	e00f      	b.n	8002c70 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c56:	3b01      	subs	r3, #1
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	441a      	add	r2, r3
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	440b      	add	r3, r1
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	dd12      	ble.n	8002c9c <maxim_sort_indices_descend+0x70>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c86:	3b01      	subs	r3, #1
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	440b      	add	r3, r1
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	440b      	add	r3, r1
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dcd9      	bgt.n	8002c50 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	dbc3      	blt.n	8002c3e <maxim_sort_indices_descend+0x12>
    }
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	3724      	adds	r7, #36	; 0x24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cca:	f001 f87d 	bl	8003dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cce:	f000 f993 	bl	8002ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cd2:	f000 fb69 	bl	80033a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002cd6:	f000 fa03 	bl	80030e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002cda:	f000 fb11 	bl	8003300 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002cde:	f000 fb39 	bl	8003354 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002ce2:	f000 fabd 	bl	8003260 <MX_TIM1_Init>
  MX_I2C2_Init();
 8002ce6:	f000 fa29 	bl	800313c <MX_I2C2_Init>
  MX_CRC_Init();
 8002cea:	f000 f9e5 	bl	80030b8 <MX_CRC_Init>
  MX_RTC_Init();
 8002cee:	f000 fa53 	bl	8003198 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10000);
 8002cf2:	f242 7010 	movw	r0, #10000	; 0x2710
 8002cf6:	f001 f8d9 	bl	8003eac <HAL_Delay>
  //MPU6050 Gyroscope and Accelerometer Initialization
  bufclr((char*)dataBuf);
 8002cfa:	48a2      	ldr	r0, [pc, #648]	; (8002f84 <main+0x2c0>)
 8002cfc:	f7fe f8d6 	bl	8000eac <bufclr>
  sprintf ((char*)dataBuf, "MPU6050 Init\r\n");
 8002d00:	49a1      	ldr	r1, [pc, #644]	; (8002f88 <main+0x2c4>)
 8002d02:	48a0      	ldr	r0, [pc, #640]	; (8002f84 <main+0x2c0>)
 8002d04:	f008 fb7c 	bl	800b400 <siprintf>
  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ;
 8002d08:	2332      	movs	r3, #50	; 0x32
 8002d0a:	2232      	movs	r2, #50	; 0x32
 8002d0c:	499d      	ldr	r1, [pc, #628]	; (8002f84 <main+0x2c0>)
 8002d0e:	489f      	ldr	r0, [pc, #636]	; (8002f8c <main+0x2c8>)
 8002d10:	f004 f9c1 	bl	8007096 <HAL_UART_Transmit>
  MPU6050_Init();
 8002d14:	f000 fbaa 	bl	800346c <MPU6050_Init>

  //MAX30102 Oximeter and Heart Rate Sensor Initialization
  bufclr((char*)dataBuf);
 8002d18:	489a      	ldr	r0, [pc, #616]	; (8002f84 <main+0x2c0>)
 8002d1a:	f7fe f8c7 	bl	8000eac <bufclr>
  sprintf ((char*)dataBuf, "MAX30102 Init\r\n");
 8002d1e:	499c      	ldr	r1, [pc, #624]	; (8002f90 <main+0x2cc>)
 8002d20:	4898      	ldr	r0, [pc, #608]	; (8002f84 <main+0x2c0>)
 8002d22:	f008 fb6d 	bl	800b400 <siprintf>
  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ;
 8002d26:	2332      	movs	r3, #50	; 0x32
 8002d28:	2232      	movs	r2, #50	; 0x32
 8002d2a:	4996      	ldr	r1, [pc, #600]	; (8002f84 <main+0x2c0>)
 8002d2c:	4897      	ldr	r0, [pc, #604]	; (8002f8c <main+0x2c8>)
 8002d2e:	f004 f9b2 	bl	8007096 <HAL_UART_Transmit>
  Max30102_Init(&hi2c2);
 8002d32:	4898      	ldr	r0, [pc, #608]	; (8002f94 <main+0x2d0>)
 8002d34:	f7ff f892 	bl	8001e5c <Max30102_Init>
  //AI Model Initialization
  bufclr((char*)dataBuf);
 8002d38:	4892      	ldr	r0, [pc, #584]	; (8002f84 <main+0x2c0>)
 8002d3a:	f7fe f8b7 	bl	8000eac <bufclr>
  sprintf ((char*)dataBuf, "AI Init\r\n");
 8002d3e:	4996      	ldr	r1, [pc, #600]	; (8002f98 <main+0x2d4>)
 8002d40:	4890      	ldr	r0, [pc, #576]	; (8002f84 <main+0x2c0>)
 8002d42:	f008 fb5d 	bl	800b400 <siprintf>
  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ;
 8002d46:	2332      	movs	r3, #50	; 0x32
 8002d48:	2232      	movs	r2, #50	; 0x32
 8002d4a:	498e      	ldr	r1, [pc, #568]	; (8002f84 <main+0x2c0>)
 8002d4c:	488f      	ldr	r0, [pc, #572]	; (8002f8c <main+0x2c8>)
 8002d4e:	f004 f9a2 	bl	8007096 <HAL_UART_Transmit>
  AI_Init();
 8002d52:	f000 fcb9 	bl	80036c8 <AI_Init>
  //ESP8266 Initialization (SSID, PASSWORD)
  bufclr((char*)dataBuf);
 8002d56:	488b      	ldr	r0, [pc, #556]	; (8002f84 <main+0x2c0>)
 8002d58:	f7fe f8a8 	bl	8000eac <bufclr>
  sprintf ((char*)dataBuf, "ESP WIFI Init\r\n");
 8002d5c:	498f      	ldr	r1, [pc, #572]	; (8002f9c <main+0x2d8>)
 8002d5e:	4889      	ldr	r0, [pc, #548]	; (8002f84 <main+0x2c0>)
 8002d60:	f008 fb4e 	bl	800b400 <siprintf>
  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ;
 8002d64:	2332      	movs	r3, #50	; 0x32
 8002d66:	2232      	movs	r2, #50	; 0x32
 8002d68:	4986      	ldr	r1, [pc, #536]	; (8002f84 <main+0x2c0>)
 8002d6a:	4888      	ldr	r0, [pc, #544]	; (8002f8c <main+0x2c8>)
 8002d6c:	f004 f993 	bl	8007096 <HAL_UART_Transmit>
  ESP_Init("OnePlus", "123456789");
 8002d70:	498b      	ldr	r1, [pc, #556]	; (8002fa0 <main+0x2dc>)
 8002d72:	488c      	ldr	r0, [pc, #560]	; (8002fa4 <main+0x2e0>)
 8002d74:	f7fe f8b8 	bl	8000ee8 <ESP_Init>
  bufclr((char*)dataBuf);
 8002d78:	4882      	ldr	r0, [pc, #520]	; (8002f84 <main+0x2c0>)
 8002d7a:	f7fe f897 	bl	8000eac <bufclr>
  sprintf ((char*)dataBuf, "MAX30102 Calibration\r\n");
 8002d7e:	498a      	ldr	r1, [pc, #552]	; (8002fa8 <main+0x2e4>)
 8002d80:	4880      	ldr	r0, [pc, #512]	; (8002f84 <main+0x2c0>)
 8002d82:	f008 fb3d 	bl	800b400 <siprintf>
  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ;
 8002d86:	2332      	movs	r3, #50	; 0x32
 8002d88:	2232      	movs	r2, #50	; 0x32
 8002d8a:	497e      	ldr	r1, [pc, #504]	; (8002f84 <main+0x2c0>)
 8002d8c:	487f      	ldr	r0, [pc, #508]	; (8002f8c <main+0x2c8>)
 8002d8e:	f004 f982 	bl	8007096 <HAL_UART_Transmit>
  while(HRData == 0){
 8002d92:	e001      	b.n	8002d98 <main+0xd4>
	  MAX30102_PollingRoutine();
 8002d94:	f000 fc4c 	bl	8003630 <MAX30102_PollingRoutine>
  while(HRData == 0){
 8002d98:	4b84      	ldr	r3, [pc, #528]	; (8002fac <main+0x2e8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f9      	beq.n	8002d94 <main+0xd0>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (write_index < AI_NETWORK_IN_1_SIZE){
 8002da0:	e080      	b.n	8002ea4 <main+0x1e0>

		MPU6050_Read_Accel(); // read acceleration data from MPU6050
 8002da2:	f000 fbb9 	bl	8003518 <MPU6050_Read_Accel>
		//sprintf ((char*)dataBuf, "Ax:%5d Ay:%5d Az:%5d\r\n", (int) Ax, (int) Ay, (int) Az);
		//HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ; // transmit the data

		//while(SPO2Data == 0){
			MAX30102_PollingRoutine();
 8002da6:	f000 fc43 	bl	8003630 <MAX30102_PollingRoutine>
		//}

		/* Normalize data to [-1; 1] and accumulate into input buffer */
		/* Note: window overlapping can be managed here */
		aiInData[write_index + 0] = (float) Ax;
 8002daa:	4b81      	ldr	r3, [pc, #516]	; (8002fb0 <main+0x2ec>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <main+0x2f0>)
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	4981      	ldr	r1, [pc, #516]	; (8002fb8 <main+0x2f4>)
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	601a      	str	r2, [r3, #0]
		aiInData[write_index + 1] = (float) Ay;
 8002dba:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <main+0x2ec>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4a7e      	ldr	r2, [pc, #504]	; (8002fbc <main+0x2f8>)
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	497c      	ldr	r1, [pc, #496]	; (8002fb8 <main+0x2f4>)
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	601a      	str	r2, [r3, #0]
		aiInData[write_index + 2] = (float) Az;
 8002dcc:	4b78      	ldr	r3, [pc, #480]	; (8002fb0 <main+0x2ec>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	4a7b      	ldr	r2, [pc, #492]	; (8002fc0 <main+0x2fc>)
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	4978      	ldr	r1, [pc, #480]	; (8002fb8 <main+0x2f4>)
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	601a      	str	r2, [r3, #0]
		write_index += 3;
 8002dde:	4b74      	ldr	r3, [pc, #464]	; (8002fb0 <main+0x2ec>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3303      	adds	r3, #3
 8002de4:	4a72      	ldr	r2, [pc, #456]	; (8002fb0 <main+0x2ec>)
 8002de6:	6013      	str	r3, [r2, #0]

		if (write_index == AI_NETWORK_IN_1_SIZE) {
 8002de8:	4b71      	ldr	r3, [pc, #452]	; (8002fb0 <main+0x2ec>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b4e      	cmp	r3, #78	; 0x4e
 8002dee:	d14a      	bne.n	8002e86 <main+0x1c2>
		  //write_index = 0;

		  bufclr((char*)dataBuf);
 8002df0:	4864      	ldr	r0, [pc, #400]	; (8002f84 <main+0x2c0>)
 8002df2:	f7fe f85b 	bl	8000eac <bufclr>
		  sprintf ((char*)dataBuf, "Running inference\r\n");
 8002df6:	4973      	ldr	r1, [pc, #460]	; (8002fc4 <main+0x300>)
 8002df8:	4862      	ldr	r0, [pc, #392]	; (8002f84 <main+0x2c0>)
 8002dfa:	f008 fb01 	bl	800b400 <siprintf>
		  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ; // transmit the data
 8002dfe:	2332      	movs	r3, #50	; 0x32
 8002e00:	2232      	movs	r2, #50	; 0x32
 8002e02:	4960      	ldr	r1, [pc, #384]	; (8002f84 <main+0x2c0>)
 8002e04:	4861      	ldr	r0, [pc, #388]	; (8002f8c <main+0x2c8>)
 8002e06:	f004 f946 	bl	8007096 <HAL_UART_Transmit>
		  AI_Run(aiInData, aiOutData);
 8002e0a:	496f      	ldr	r1, [pc, #444]	; (8002fc8 <main+0x304>)
 8002e0c:	486a      	ldr	r0, [pc, #424]	; (8002fb8 <main+0x2f4>)
 8002e0e:	f000 fc97 	bl	8003740 <AI_Run>

		  /* Output results */
		  for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	e019      	b.n	8002e4c <main+0x188>
			bufclr((char*)dataBuf);
 8002e18:	485a      	ldr	r0, [pc, #360]	; (8002f84 <main+0x2c0>)
 8002e1a:	f7fe f847 	bl	8000eac <bufclr>
			sprintf ((char*)dataBuf, "%8.6f ", aiOutData[i]);
 8002e1e:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <main+0x304>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fb8d 	bl	8000548 <__aeabi_f2d>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4966      	ldr	r1, [pc, #408]	; (8002fcc <main+0x308>)
 8002e34:	4853      	ldr	r0, [pc, #332]	; (8002f84 <main+0x2c0>)
 8002e36:	f008 fae3 	bl	800b400 <siprintf>
			HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ; // transmit the data
 8002e3a:	2332      	movs	r3, #50	; 0x32
 8002e3c:	2232      	movs	r2, #50	; 0x32
 8002e3e:	4951      	ldr	r1, [pc, #324]	; (8002f84 <main+0x2c0>)
 8002e40:	4852      	ldr	r0, [pc, #328]	; (8002f8c <main+0x2c8>)
 8002e42:	f004 f928 	bl	8007096 <HAL_UART_Transmit>
		  for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d9e2      	bls.n	8002e18 <main+0x154>
		  }
		  uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8002e52:	2103      	movs	r1, #3
 8002e54:	485c      	ldr	r0, [pc, #368]	; (8002fc8 <main+0x304>)
 8002e56:	f000 fcab 	bl	80037b0 <argmax>
 8002e5a:	6038      	str	r0, [r7, #0]
		  bufclr((char*)dataBuf);
 8002e5c:	4849      	ldr	r0, [pc, #292]	; (8002f84 <main+0x2c0>)
 8002e5e:	f7fe f825 	bl	8000eac <bufclr>
		  sprintf ((char*)dataBuf, ": %d - %s\r\n", (int) class, activities[class]);
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	495a      	ldr	r1, [pc, #360]	; (8002fd0 <main+0x30c>)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e6c:	4959      	ldr	r1, [pc, #356]	; (8002fd4 <main+0x310>)
 8002e6e:	4845      	ldr	r0, [pc, #276]	; (8002f84 <main+0x2c0>)
 8002e70:	f008 fac6 	bl	800b400 <siprintf>
		  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50) ; // transmit the data
 8002e74:	2332      	movs	r3, #50	; 0x32
 8002e76:	2232      	movs	r2, #50	; 0x32
 8002e78:	4942      	ldr	r1, [pc, #264]	; (8002f84 <main+0x2c0>)
 8002e7a:	4844      	ldr	r0, [pc, #272]	; (8002f8c <main+0x2c8>)
 8002e7c:	f004 f90b 	bl	8007096 <HAL_UART_Transmit>
		  Value_Buf[2] = class;
 8002e80:	4a55      	ldr	r2, [pc, #340]	; (8002fd8 <main+0x314>)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6093      	str	r3, [r2, #8]
		}

		//Values to send to ThingSpeak
		  Value_Buf[0] = HRData;
 8002e86:	4b49      	ldr	r3, [pc, #292]	; (8002fac <main+0x2e8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <main+0x314>)
 8002e8e:	601a      	str	r2, [r3, #0]
		  Value_Buf[1] = SPO2Data;
 8002e90:	4b52      	ldr	r3, [pc, #328]	; (8002fdc <main+0x318>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <main+0x314>)
 8002e98:	605a      	str	r2, [r3, #4]
		  Value_Buf[3] = buttonstate;
 8002e9a:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <main+0x31c>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <main+0x314>)
 8002ea2:	60da      	str	r2, [r3, #12]
	while (write_index < AI_NETWORK_IN_1_SIZE){
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <main+0x2ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b4d      	cmp	r3, #77	; 0x4d
 8002eaa:	f67f af7a 	bls.w	8002da2 <main+0xde>
	}
	  //Refresh ai inference variable
	  write_index = 0;
 8002eae:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <main+0x2ec>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
	  bufclr((char*)dataBuf);
 8002eb4:	4833      	ldr	r0, [pc, #204]	; (8002f84 <main+0x2c0>)
 8002eb6:	f7fd fff9 	bl	8000eac <bufclr>
	  sprintf ((char*)dataBuf, "%d %d %d %d\r\n", (int)Value_Buf[0], (int)Value_Buf[1], (int)Value_Buf[2], (int)Value_Buf[3]);
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <main+0x314>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4b45      	ldr	r3, [pc, #276]	; (8002fd8 <main+0x314>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <main+0x314>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <main+0x314>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	9200      	str	r2, [sp, #0]
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	460a      	mov	r2, r1
 8002ed8:	4942      	ldr	r1, [pc, #264]	; (8002fe4 <main+0x320>)
 8002eda:	482a      	ldr	r0, [pc, #168]	; (8002f84 <main+0x2c0>)
 8002edc:	f008 fa90 	bl	800b400 <siprintf>
	  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50);
 8002ee0:	2332      	movs	r3, #50	; 0x32
 8002ee2:	2232      	movs	r2, #50	; 0x32
 8002ee4:	4927      	ldr	r1, [pc, #156]	; (8002f84 <main+0x2c0>)
 8002ee6:	4829      	ldr	r0, [pc, #164]	; (8002f8c <main+0x2c8>)
 8002ee8:	f004 f8d5 	bl	8007096 <HAL_UART_Transmit>

	  if(buttonstate == false){
 8002eec:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <main+0x31c>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	f083 0301 	eor.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <main+0x23e>
		  HAL_Delay(15000);
 8002efa:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002efe:	f000 ffd5 	bl	8003eac <HAL_Delay>
	  }

	  ESP_Send_Multi("E8OJOQ3OMRFVJZUP", 4, (int*)Value_Buf);
 8002f02:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <main+0x314>)
 8002f04:	2104      	movs	r1, #4
 8002f06:	4838      	ldr	r0, [pc, #224]	; (8002fe8 <main+0x324>)
 8002f08:	f7fe f86a 	bl	8000fe0 <ESP_Send_Multi>

	  //SPO2Data = 0;
	  if(buttonstate == false){
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <main+0x31c>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <main+0x25c>
		  buttonstate = true;
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <main+0x31c>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
	  }

	  //HAL_Delay (15000) ; // wait for 15s before reading the sensor again
	  bufclr((char*)dataBuf);
 8002f20:	4818      	ldr	r0, [pc, #96]	; (8002f84 <main+0x2c0>)
 8002f22:	f7fd ffc3 	bl	8000eac <bufclr>
	  sprintf ((char*)dataBuf, "Enter STOP Mode\r\n");
 8002f26:	4931      	ldr	r1, [pc, #196]	; (8002fec <main+0x328>)
 8002f28:	4816      	ldr	r0, [pc, #88]	; (8002f84 <main+0x2c0>)
 8002f2a:	f008 fa69 	bl	800b400 <siprintf>
	  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50);
 8002f2e:	2332      	movs	r3, #50	; 0x32
 8002f30:	2232      	movs	r2, #50	; 0x32
 8002f32:	4914      	ldr	r1, [pc, #80]	; (8002f84 <main+0x2c0>)
 8002f34:	4815      	ldr	r0, [pc, #84]	; (8002f8c <main+0x2c8>)
 8002f36:	f004 f8ae 	bl	8007096 <HAL_UART_Transmit>
	  //Power Enter Stop Mode
	  HAL_SuspendTick();
 8002f3a:	f000 ffdb 	bl	8003ef4 <HAL_SuspendTick>
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x7530, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f247 5130 	movw	r1, #30000	; 0x7530
 8002f44:	482a      	ldr	r0, [pc, #168]	; (8002ff0 <main+0x32c>)
 8002f46:	f003 fa63 	bl	8006410 <HAL_RTCEx_SetWakeUpTimer_IT>
	  HAL_PWREx_EnableFlashPowerDown();
 8002f4a:	f002 fad9 	bl	8005500 <HAL_PWREx_EnableFlashPowerDown>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2001      	movs	r0, #1
 8002f52:	f002 faa9 	bl	80054a8 <HAL_PWR_EnterSTOPMode>
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002f56:	4826      	ldr	r0, [pc, #152]	; (8002ff0 <main+0x32c>)
 8002f58:	f003 fb1a 	bl	8006590 <HAL_RTCEx_DeactivateWakeUpTimer>
	  HAL_PWREx_DisableFlashPowerDown();
 8002f5c:	f002 fadc 	bl	8005518 <HAL_PWREx_DisableFlashPowerDown>
	  SystemClock_Config();
 8002f60:	f000 f84a 	bl	8002ff8 <SystemClock_Config>
	  //Power Exit Stop Mode
	  HAL_ResumeTick();
 8002f64:	f000 ffd6 	bl	8003f14 <HAL_ResumeTick>
	  bufclr((char*)dataBuf);
 8002f68:	4806      	ldr	r0, [pc, #24]	; (8002f84 <main+0x2c0>)
 8002f6a:	f7fd ff9f 	bl	8000eac <bufclr>
	  sprintf ((char*)dataBuf, "Exit STOP Mode\r\n");
 8002f6e:	4921      	ldr	r1, [pc, #132]	; (8002ff4 <main+0x330>)
 8002f70:	4804      	ldr	r0, [pc, #16]	; (8002f84 <main+0x2c0>)
 8002f72:	f008 fa45 	bl	800b400 <siprintf>
	  HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ) , 50);
 8002f76:	2332      	movs	r3, #50	; 0x32
 8002f78:	2232      	movs	r2, #50	; 0x32
 8002f7a:	4902      	ldr	r1, [pc, #8]	; (8002f84 <main+0x2c0>)
 8002f7c:	4803      	ldr	r0, [pc, #12]	; (8002f8c <main+0x2c8>)
 8002f7e:	f004 f88a 	bl	8007096 <HAL_UART_Transmit>
	while (write_index < AI_NETWORK_IN_1_SIZE){
 8002f82:	e78f      	b.n	8002ea4 <main+0x1e0>
 8002f84:	20003740 	.word	0x20003740
 8002f88:	0800db80 	.word	0x0800db80
 8002f8c:	200036a4 	.word	0x200036a4
 8002f90:	0800db90 	.word	0x0800db90
 8002f94:	200035e8 	.word	0x200035e8
 8002f98:	0800dba0 	.word	0x0800dba0
 8002f9c:	0800dbac 	.word	0x0800dbac
 8002fa0:	0800dbbc 	.word	0x0800dbbc
 8002fa4:	0800dbc8 	.word	0x0800dbc8
 8002fa8:	0800dbd0 	.word	0x0800dbd0
 8002fac:	20003f70 	.word	0x20003f70
 8002fb0:	20003f78 	.word	0x20003f78
 8002fb4:	20003734 	.word	0x20003734
 8002fb8:	20003778 	.word	0x20003778
 8002fbc:	20003738 	.word	0x20003738
 8002fc0:	2000373c 	.word	0x2000373c
 8002fc4:	0800dbe8 	.word	0x0800dbe8
 8002fc8:	200038b0 	.word	0x200038b0
 8002fcc:	0800dbfc 	.word	0x0800dbfc
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	0800dc04 	.word	0x0800dc04
 8002fd8:	20003f7c 	.word	0x20003f7c
 8002fdc:	20003f74 	.word	0x20003f74
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	0800dc10 	.word	0x0800dc10
 8002fe8:	0800dc20 	.word	0x0800dc20
 8002fec:	0800dc34 	.word	0x0800dc34
 8002ff0:	2000363c 	.word	0x2000363c
 8002ff4:	0800dc48 	.word	0x0800dc48

08002ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b094      	sub	sp, #80	; 0x50
 8002ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ffe:	f107 0320 	add.w	r3, r7, #32
 8003002:	2230      	movs	r2, #48	; 0x30
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f007 fc80 	bl	800a90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800300c:	f107 030c 	add.w	r3, r7, #12
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <SystemClock_Config+0xb8>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <SystemClock_Config+0xb8>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <SystemClock_Config+0xb8>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003038:	2300      	movs	r3, #0
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <SystemClock_Config+0xbc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <SystemClock_Config+0xbc>)
 8003042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <SystemClock_Config+0xbc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003054:	230a      	movs	r3, #10
 8003056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003058:	2301      	movs	r3, #1
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800305c:	2310      	movs	r3, #16
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003060:	2301      	movs	r3, #1
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003064:	2300      	movs	r3, #0
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003068:	f107 0320 	add.w	r3, r7, #32
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fa5f 	bl	8005530 <HAL_RCC_OscConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003078:	f000 fc00 	bl	800387c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800307c:	230f      	movs	r3, #15
 800307e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003090:	f107 030c 	add.w	r3, r7, #12
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f002 fcc2 	bl	8005a20 <HAL_RCC_ClockConfig>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80030a2:	f000 fbeb 	bl	800387c <Error_Handler>
  }
}
 80030a6:	bf00      	nop
 80030a8:	3750      	adds	r7, #80	; 0x50
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000

080030b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <MX_CRC_Init+0x20>)
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <MX_CRC_Init+0x24>)
 80030c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <MX_CRC_Init+0x20>)
 80030c4:	f001 f847 	bl	8004156 <HAL_CRC_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80030ce:	f000 fbd5 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000358c 	.word	0x2000358c
 80030dc:	40023000 	.word	0x40023000

080030e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <MX_I2C1_Init+0x50>)
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <MX_I2C1_Init+0x54>)
 80030e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <MX_I2C1_Init+0x50>)
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <MX_I2C1_Init+0x58>)
 80030ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <MX_I2C1_Init+0x50>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <MX_I2C1_Init+0x50>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <MX_I2C1_Init+0x50>)
 80030fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <MX_I2C1_Init+0x50>)
 8003106:	2200      	movs	r2, #0
 8003108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <MX_I2C1_Init+0x50>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <MX_I2C1_Init+0x50>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <MX_I2C1_Init+0x50>)
 8003118:	2200      	movs	r2, #0
 800311a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800311c:	4804      	ldr	r0, [pc, #16]	; (8003130 <MX_I2C1_Init+0x50>)
 800311e:	f001 fa03 	bl	8004528 <HAL_I2C_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003128:	f000 fba8 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20003594 	.word	0x20003594
 8003134:	40005400 	.word	0x40005400
 8003138:	000186a0 	.word	0x000186a0

0800313c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <MX_I2C2_Init+0x50>)
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <MX_I2C2_Init+0x54>)
 8003144:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <MX_I2C2_Init+0x50>)
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <MX_I2C2_Init+0x58>)
 800314a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_I2C2_Init+0x50>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <MX_I2C2_Init+0x50>)
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_I2C2_Init+0x50>)
 800315a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800315e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <MX_I2C2_Init+0x50>)
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_I2C2_Init+0x50>)
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <MX_I2C2_Init+0x50>)
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <MX_I2C2_Init+0x50>)
 8003174:	2200      	movs	r2, #0
 8003176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003178:	4804      	ldr	r0, [pc, #16]	; (800318c <MX_I2C2_Init+0x50>)
 800317a:	f001 f9d5 	bl	8004528 <HAL_I2C_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003184:	f000 fb7a 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003188:	bf00      	nop
 800318a:	bd80      	pop	{r7, pc}
 800318c:	200035e8 	.word	0x200035e8
 8003190:	40005800 	.word	0x40005800
 8003194:	000186a0 	.word	0x000186a0

08003198 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80031ac:	2300      	movs	r3, #0
 80031ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <MX_RTC_Init+0xc0>)
 80031b2:	4a2a      	ldr	r2, [pc, #168]	; (800325c <MX_RTC_Init+0xc4>)
 80031b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031b6:	4b28      	ldr	r3, [pc, #160]	; (8003258 <MX_RTC_Init+0xc0>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80031bc:	4b26      	ldr	r3, [pc, #152]	; (8003258 <MX_RTC_Init+0xc0>)
 80031be:	227f      	movs	r2, #127	; 0x7f
 80031c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <MX_RTC_Init+0xc0>)
 80031c4:	22ff      	movs	r2, #255	; 0xff
 80031c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <MX_RTC_Init+0xc0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <MX_RTC_Init+0xc0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <MX_RTC_Init+0xc0>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031da:	481f      	ldr	r0, [pc, #124]	; (8003258 <MX_RTC_Init+0xc0>)
 80031dc:	f002 fee2 	bl	8005fa4 <HAL_RTC_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80031e6:	f000 fb49 	bl	800387c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2201      	movs	r2, #1
 8003202:	4619      	mov	r1, r3
 8003204:	4814      	ldr	r0, [pc, #80]	; (8003258 <MX_RTC_Init+0xc0>)
 8003206:	f002 ff43 	bl	8006090 <HAL_RTC_SetTime>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003210:	f000 fb34 	bl	800387c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003214:	2301      	movs	r3, #1
 8003216:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003218:	2301      	movs	r3, #1
 800321a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800321c:	2301      	movs	r3, #1
 800321e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003220:	2300      	movs	r3, #0
 8003222:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003224:	463b      	mov	r3, r7
 8003226:	2201      	movs	r2, #1
 8003228:	4619      	mov	r1, r3
 800322a:	480b      	ldr	r0, [pc, #44]	; (8003258 <MX_RTC_Init+0xc0>)
 800322c:	f002 ffca 	bl	80061c4 <HAL_RTC_SetDate>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003236:	f000 fb21 	bl	800387c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800323a:	2200      	movs	r2, #0
 800323c:	f245 010b 	movw	r1, #20491	; 0x500b
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <MX_RTC_Init+0xc0>)
 8003242:	f003 f8e5 	bl	8006410 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800324c:	f000 fb16 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003250:	bf00      	nop
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000363c 	.word	0x2000363c
 800325c:	40002800 	.word	0x40002800

08003260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003266:	f107 0308 	add.w	r3, r7, #8
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003274:	463b      	mov	r3, r7
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <MX_TIM1_Init+0x98>)
 800327e:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <MX_TIM1_Init+0x9c>)
 8003280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <MX_TIM1_Init+0x98>)
 8003284:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <MX_TIM1_Init+0x98>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <MX_TIM1_Init+0x98>)
 8003292:	2232      	movs	r2, #50	; 0x32
 8003294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MX_TIM1_Init+0x98>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <MX_TIM1_Init+0x98>)
 800329e:	2200      	movs	r2, #0
 80032a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <MX_TIM1_Init+0x98>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032a8:	4813      	ldr	r0, [pc, #76]	; (80032f8 <MX_TIM1_Init+0x98>)
 80032aa:	f003 f9f7 	bl	800669c <HAL_TIM_Base_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80032b4:	f000 fae2 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	4619      	mov	r1, r3
 80032c4:	480c      	ldr	r0, [pc, #48]	; (80032f8 <MX_TIM1_Init+0x98>)
 80032c6:	f003 fbe0 	bl	8006a8a <HAL_TIM_ConfigClockSource>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80032d0:	f000 fad4 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032dc:	463b      	mov	r3, r7
 80032de:	4619      	mov	r1, r3
 80032e0:	4805      	ldr	r0, [pc, #20]	; (80032f8 <MX_TIM1_Init+0x98>)
 80032e2:	f003 fdfb 	bl	8006edc <HAL_TIMEx_MasterConfigSynchronization>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80032ec:	f000 fac6 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032f0:	bf00      	nop
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	2000365c 	.word	0x2000365c
 80032fc:	40010000 	.word	0x40010000

08003300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <MX_USART1_UART_Init+0x4c>)
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <MX_USART1_UART_Init+0x50>)
 8003308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <MX_USART1_UART_Init+0x4c>)
 800330c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <MX_USART1_UART_Init+0x4c>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <MX_USART1_UART_Init+0x4c>)
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <MX_USART1_UART_Init+0x4c>)
 8003320:	2200      	movs	r2, #0
 8003322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <MX_USART1_UART_Init+0x4c>)
 8003326:	220c      	movs	r2, #12
 8003328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <MX_USART1_UART_Init+0x4c>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <MX_USART1_UART_Init+0x4c>)
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003336:	4805      	ldr	r0, [pc, #20]	; (800334c <MX_USART1_UART_Init+0x4c>)
 8003338:	f003 fe60 	bl	8006ffc <HAL_UART_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003342:	f000 fa9b 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200036a4 	.word	0x200036a4
 8003350:	40011000 	.word	0x40011000

08003354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <MX_USART2_UART_Init+0x50>)
 800335c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 8003360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 800337a:	220c      	movs	r2, #12
 800337c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <MX_USART2_UART_Init+0x4c>)
 800338c:	f003 fe36 	bl	8006ffc <HAL_UART_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003396:	f000 fa71 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200036e8 	.word	0x200036e8
 80033a4:	40004400 	.word	0x40004400

080033a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <MX_GPIO_Init+0xbc>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a27      	ldr	r2, [pc, #156]	; (8003464 <MX_GPIO_Init+0xbc>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <MX_GPIO_Init+0xbc>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <MX_GPIO_Init+0xbc>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a20      	ldr	r2, [pc, #128]	; (8003464 <MX_GPIO_Init+0xbc>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <MX_GPIO_Init+0xbc>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <MX_GPIO_Init+0xbc>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a19      	ldr	r2, [pc, #100]	; (8003464 <MX_GPIO_Init+0xbc>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <MX_GPIO_Init+0xbc>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <MX_GPIO_Init+0xbc>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <MX_GPIO_Init+0xbc>)
 800341c:	f043 0308 	orr.w	r3, r3, #8
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <MX_GPIO_Init+0xbc>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800342e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003434:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800343a:	2302      	movs	r3, #2
 800343c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <MX_GPIO_Init+0xc0>)
 8003446:	f000 fea3 	bl	8004190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	2028      	movs	r0, #40	; 0x28
 8003450:	f000 fe4b 	bl	80040ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003454:	2028      	movs	r0, #40	; 0x28
 8003456:	f000 fe64 	bl	8004122 <HAL_NVIC_EnableIRQ>

}
 800345a:	bf00      	nop
 800345c:	3728      	adds	r7, #40	; 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	40020800 	.word	0x40020800

0800346c <MPU6050_Init>:

/* USER CODE BEGIN 4 */

//MPU6050 Init Function
void MPU6050_Init (void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8003472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003476:	9302      	str	r3, [sp, #8]
 8003478:	2301      	movs	r3, #1
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	1dfb      	adds	r3, r7, #7
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2301      	movs	r3, #1
 8003482:	2275      	movs	r2, #117	; 0x75
 8003484:	21d0      	movs	r1, #208	; 0xd0
 8003486:	4823      	ldr	r0, [pc, #140]	; (8003514 <MPU6050_Init+0xa8>)
 8003488:	f001 fa8c 	bl	80049a4 <HAL_I2C_Mem_Read>
	//checkGlobal = check;

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b68      	cmp	r3, #104	; 0x68
 8003490:	d13b      	bne.n	800350a <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	2301      	movs	r3, #1
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	1dbb      	adds	r3, r7, #6
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2301      	movs	r3, #1
 80034a6:	226b      	movs	r2, #107	; 0x6b
 80034a8:	21d0      	movs	r1, #208	; 0xd0
 80034aa:	481a      	ldr	r0, [pc, #104]	; (8003514 <MPU6050_Init+0xa8>)
 80034ac:	f001 f980 	bl	80047b0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80034b0:	2307      	movs	r3, #7
 80034b2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80034b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034b8:	9302      	str	r3, [sp, #8]
 80034ba:	2301      	movs	r3, #1
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	1dbb      	adds	r3, r7, #6
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2301      	movs	r3, #1
 80034c4:	2219      	movs	r2, #25
 80034c6:	21d0      	movs	r1, #208	; 0xd0
 80034c8:	4812      	ldr	r0, [pc, #72]	; (8003514 <MPU6050_Init+0xa8>)
 80034ca:	f001 f971 	bl	80047b0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		//Data = 0x00;
		Data = 0x18; //FS_SEL=3 -> ± 16g
 80034ce:	2318      	movs	r3, #24
 80034d0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80034d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	2301      	movs	r3, #1
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	1dbb      	adds	r3, r7, #6
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2301      	movs	r3, #1
 80034e2:	221c      	movs	r2, #28
 80034e4:	21d0      	movs	r1, #208	; 0xd0
 80034e6:	480b      	ldr	r0, [pc, #44]	; (8003514 <MPU6050_Init+0xa8>)
 80034e8:	f001 f962 	bl	80047b0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 80034ec:	2300      	movs	r3, #0
 80034ee:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80034f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	2301      	movs	r3, #1
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	2301      	movs	r3, #1
 8003500:	221b      	movs	r2, #27
 8003502:	21d0      	movs	r1, #208	; 0xd0
 8003504:	4803      	ldr	r0, [pc, #12]	; (8003514 <MPU6050_Init+0xa8>)
 8003506:	f001 f953 	bl	80047b0 <HAL_I2C_Mem_Write>
	}
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20003594 	.word	0x20003594

08003518 <MPU6050_Read_Accel>:
//MPU6050 Read Acceleration Data Function
void MPU6050_Read_Accel (void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800351e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003522:	9302      	str	r3, [sp, #8]
 8003524:	2306      	movs	r3, #6
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	463b      	mov	r3, r7
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2301      	movs	r3, #1
 800352e:	223b      	movs	r2, #59	; 0x3b
 8003530:	21d0      	movs	r1, #208	; 0xd0
 8003532:	4838      	ldr	r0, [pc, #224]	; (8003614 <MPU6050_Read_Accel+0xfc>)
 8003534:	f001 fa36 	bl	80049a4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003538:	783b      	ldrb	r3, [r7, #0]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	b21a      	sxth	r2, r3
 800353e:	787b      	ldrb	r3, [r7, #1]
 8003540:	b21b      	sxth	r3, r3
 8003542:	4313      	orrs	r3, r2
 8003544:	b21a      	sxth	r2, r3
 8003546:	4b34      	ldr	r3, [pc, #208]	; (8003618 <MPU6050_Read_Accel+0x100>)
 8003548:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800354a:	78bb      	ldrb	r3, [r7, #2]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	b21a      	sxth	r2, r3
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	b21b      	sxth	r3, r3
 8003554:	4313      	orrs	r3, r2
 8003556:	b21a      	sxth	r2, r3
 8003558:	4b30      	ldr	r3, [pc, #192]	; (800361c <MPU6050_Read_Accel+0x104>)
 800355a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800355c:	793b      	ldrb	r3, [r7, #4]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	b21a      	sxth	r2, r3
 8003562:	797b      	ldrb	r3, [r7, #5]
 8003564:	b21b      	sxth	r3, r3
 8003566:	4313      	orrs	r3, r2
 8003568:	b21a      	sxth	r2, r3
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <MPU6050_Read_Accel+0x108>)
 800356c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     configured FS_SEL = 0. So dividing by 16384.0
	     for more details check ACCEL_CONFIG Register ****/

	Ax = Accel_X_RAW;
 800356e:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <MPU6050_Read_Accel+0x100>)
 8003570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <MPU6050_Read_Accel+0x10c>)
 800357e:	edc3 7a00 	vstr	s15, [r3]
	Ay = Accel_Y_RAW;
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <MPU6050_Read_Accel+0x104>)
 8003584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <MPU6050_Read_Accel+0x110>)
 8003592:	edc3 7a00 	vstr	s15, [r3]
	Az = Accel_Z_RAW;
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <MPU6050_Read_Accel+0x108>)
 8003598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <MPU6050_Read_Accel+0x114>)
 80035a6:	edc3 7a00 	vstr	s15, [r3]
	//Ax = Accel_X_RAW/117;
	//Ay = Accel_Y_RAW/10;
	//Az = Accel_Z_RAW/15;
	Ax = Accel_X_RAW/2048;
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <MPU6050_Read_Accel+0x100>)
 80035ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da01      	bge.n	80035b8 <MPU6050_Read_Accel+0xa0>
 80035b4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80035b8:	12db      	asrs	r3, r3, #11
 80035ba:	b21b      	sxth	r3, r3
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <MPU6050_Read_Accel+0x10c>)
 80035c6:	edc3 7a00 	vstr	s15, [r3]
    Ay = Accel_Y_RAW/2048;
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <MPU6050_Read_Accel+0x104>)
 80035cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da01      	bge.n	80035d8 <MPU6050_Read_Accel+0xc0>
 80035d4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80035d8:	12db      	asrs	r3, r3, #11
 80035da:	b21b      	sxth	r3, r3
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <MPU6050_Read_Accel+0x110>)
 80035e6:	edc3 7a00 	vstr	s15, [r3]
    Az = Accel_Z_RAW/2048;
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <MPU6050_Read_Accel+0x108>)
 80035ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da01      	bge.n	80035f8 <MPU6050_Read_Accel+0xe0>
 80035f4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80035f8:	12db      	asrs	r3, r3, #11
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <MPU6050_Read_Accel+0x114>)
 8003606:	edc3 7a00 	vstr	s15, [r3]
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20003594 	.word	0x20003594
 8003618:	2000372c 	.word	0x2000372c
 800361c:	2000372e 	.word	0x2000372e
 8003620:	20003730 	.word	0x20003730
 8003624:	20003734 	.word	0x20003734
 8003628:	20003738 	.word	0x20003738
 800362c:	2000373c 	.word	0x2000373c

08003630 <MAX30102_PollingRoutine>:

//MPU6050 Read Acceleration Data Function
void MAX30102_PollingRoutine (void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
		Max30102_Callback();
 8003634:	f7fe f890 	bl	8001758 <Max30102_Callback>
		Max30102_Task();
 8003638:	f7fe fb46 	bl	8001cc8 <Max30102_Task>

	if (Max30102_IsFingerOnSensor() == MAX30102_OK){
 800363c:	f7fe fb08 	bl	8001c50 <Max30102_IsFingerOnSensor>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d134      	bne.n	80036b0 <MAX30102_PollingRoutine+0x80>
	  if (Max30102_GetHeartRateValid() == 1){
 8003646:	f7fe fb1b 	bl	8001c80 <Max30102_GetHeartRateValid>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <MAX30102_PollingRoutine+0x2c>
		  HRData = Max30102_GetHeartRate();
 8003650:	f7fe fb0a 	bl	8001c68 <Max30102_GetHeartRate>
 8003654:	4603      	mov	r3, r0
 8003656:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <MAX30102_PollingRoutine+0x84>)
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e002      	b.n	8003662 <MAX30102_PollingRoutine+0x32>
	  }
	  else{
		  HRData = 0;
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <MAX30102_PollingRoutine+0x84>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
	  }

	  if (Max30102_GetSpO2Valid() == 1){
 8003662:	f7fe fb25 	bl	8001cb0 <Max30102_GetSpO2Valid>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <MAX30102_PollingRoutine+0x48>
		  SPO2Data = Max30102_GetSpO2Value();
 800366c:	f7fe fb14 	bl	8001c98 <Max30102_GetSpO2Value>
 8003670:	4603      	mov	r3, r0
 8003672:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <MAX30102_PollingRoutine+0x88>)
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e002      	b.n	800367e <MAX30102_PollingRoutine+0x4e>
	  }
	  else{
		  SPO2Data = 0;
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <MAX30102_PollingRoutine+0x88>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
	  }

	  if (HRData > 0 || SPO2Data > 0){
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <MAX30102_PollingRoutine+0x84>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	dc03      	bgt.n	800368e <MAX30102_PollingRoutine+0x5e>
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <MAX30102_PollingRoutine+0x88>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dd10      	ble.n	80036b0 <MAX30102_PollingRoutine+0x80>
		  bufclr((char*)dataBuf);
 800368e:	480b      	ldr	r0, [pc, #44]	; (80036bc <MAX30102_PollingRoutine+0x8c>)
 8003690:	f7fd fc0c 	bl	8000eac <bufclr>
		  sprintf((char*)dataBuf, "HR: %lu SpO2: %lu\n\r", HRData, SPO2Data);
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <MAX30102_PollingRoutine+0x84>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <MAX30102_PollingRoutine+0x88>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4908      	ldr	r1, [pc, #32]	; (80036c0 <MAX30102_PollingRoutine+0x90>)
 800369e:	4807      	ldr	r0, [pc, #28]	; (80036bc <MAX30102_PollingRoutine+0x8c>)
 80036a0:	f007 feae 	bl	800b400 <siprintf>
		  HAL_UART_Transmit (&huart1 , dataBuf , sizeof ( dataBuf ) , 50) ; // transmit the data
 80036a4:	2332      	movs	r3, #50	; 0x32
 80036a6:	2232      	movs	r2, #50	; 0x32
 80036a8:	4904      	ldr	r1, [pc, #16]	; (80036bc <MAX30102_PollingRoutine+0x8c>)
 80036aa:	4806      	ldr	r0, [pc, #24]	; (80036c4 <MAX30102_PollingRoutine+0x94>)
 80036ac:	f003 fcf3 	bl	8007096 <HAL_UART_Transmit>
	  }
	}
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20003f70 	.word	0x20003f70
 80036b8:	20003f74 	.word	0x20003f74
 80036bc:	20003740 	.word	0x20003740
 80036c0:	0800dc5c 	.word	0x0800dc5c
 80036c4:	200036a4 	.word	0x200036a4

080036c8 <AI_Init>:

static void AI_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <AI_Init+0x64>)
 80036d0:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80036d2:	463b      	mov	r3, r7
 80036d4:	2200      	movs	r2, #0
 80036d6:	4619      	mov	r1, r3
 80036d8:	4815      	ldr	r0, [pc, #84]	; (8003730 <AI_Init+0x68>)
 80036da:	f004 f99d 	bl	8007a18 <ai_network_create_and_init>
 80036de:	4603      	mov	r3, r0
 80036e0:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 80036e2:	793b      	ldrb	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80036e8:	793b      	ldrb	r3, [r7, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80036f2:	461a      	mov	r2, r3
 80036f4:	480f      	ldr	r0, [pc, #60]	; (8003734 <AI_Init+0x6c>)
 80036f6:	f007 fe5b 	bl	800b3b0 <iprintf>
    Error_Handler();
 80036fa:	f000 f8bf 	bl	800387c <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <AI_Init+0x68>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f004 f9fb 	bl	8007b00 <ai_network_inputs_get>
 800370a:	4603      	mov	r3, r0
 800370c:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <AI_Init+0x70>)
 800370e:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <AI_Init+0x68>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f004 fa0c 	bl	8007b34 <ai_network_outputs_get>
 800371c:	4603      	mov	r3, r0
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <AI_Init+0x74>)
 8003720:	6013      	str	r3, [r2, #0]
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200038bc 	.word	0x200038bc
 8003730:	20003774 	.word	0x20003774
 8003734:	0800dc70 	.word	0x0800dc70
 8003738:	20003f68 	.word	0x20003f68
 800373c:	20003f6c 	.word	0x20003f6c

08003740 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <AI_Run+0x60>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <AI_Run+0x64>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <AI_Run+0x68>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <AI_Run+0x60>)
 8003760:	6811      	ldr	r1, [r2, #0]
 8003762:	4a10      	ldr	r2, [pc, #64]	; (80037a4 <AI_Run+0x64>)
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f004 fa3a 	bl	8007be0 <ai_network_run>
 800376c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d011      	beq.n	8003798 <AI_Run+0x58>
    err = ai_network_get_error(network);
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <AI_Run+0x68>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f004 f92b 	bl	80079d4 <ai_network_get_error>
 800377e:	4603      	mov	r3, r0
 8003780:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8003782:	7a3b      	ldrb	r3, [r7, #8]
 8003784:	4619      	mov	r1, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800378c:	461a      	mov	r2, r3
 800378e:	4807      	ldr	r0, [pc, #28]	; (80037ac <AI_Run+0x6c>)
 8003790:	f007 fe0e 	bl	800b3b0 <iprintf>
    Error_Handler();
 8003794:	f000 f872 	bl	800387c <Error_Handler>
  }
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20003f68 	.word	0x20003f68
 80037a4:	20003f6c 	.word	0x20003f6c
 80037a8:	20003774 	.word	0x20003774
 80037ac:	0800dc9c 	.word	0x0800dc9c

080037b0 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80037c4:	2301      	movs	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e017      	b.n	80037fa <argmax+0x4a>
    if (values[i] > max_value) {
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80037da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	d507      	bpl.n	80037f4 <argmax+0x44>
      max_value = values[i];
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]
      max_index = i;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d3e3      	bcc.n	80037ca <argmax+0x1a>
    }
  }
  return max_index;
 8003802:	693b      	ldr	r3, [r7, #16]
}
 8003804:	4618      	mov	r0, r3
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13 && buttonstate == true){
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003820:	d10a      	bne.n	8003838 <HAL_GPIO_EXTI_Callback+0x28>
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_GPIO_EXTI_Callback+0x34>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_TIM_Base_Start_IT(&htim1);
 800382a:	4807      	ldr	r0, [pc, #28]	; (8003848 <HAL_GPIO_EXTI_Callback+0x38>)
 800382c:	f002 ff86 	bl	800673c <HAL_TIM_Base_Start_IT>
		buttonstate = false;
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <HAL_GPIO_EXTI_Callback+0x34>)
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e001      	b.n	800383c <HAL_GPIO_EXTI_Callback+0x2c>
	}
	else{
		__NOP();
 8003838:	bf00      	nop
	}
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000004 	.word	0x20000004
 8003848:	2000365c 	.word	0x2000365c

0800384c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8003854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003858:	4806      	ldr	r0, [pc, #24]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800385a:	f000 fe35 	bl	80044c8 <HAL_GPIO_ReadPin>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <HAL_TIM_PeriodElapsedCallback+0x1e>
		//bufclr((char*)dataBuf);
		//sprintf((char*)dataBuf, "Button Pressed\r\n");
	    //HAL_UART_Transmit (& huart1 , dataBuf , sizeof ( dataBuf ), 50) ;
		//buttonstate = true;
		HAL_TIM_Base_Stop_IT(&htim1);
 8003864:	4804      	ldr	r0, [pc, #16]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003866:	f002 ffd9 	bl	800681c <HAL_TIM_Base_Stop_IT>
	}
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40020800 	.word	0x40020800
 8003878:	2000365c 	.word	0x2000365c

0800387c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003880:	b672      	cpsid	i
}
 8003882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003884:	e7fe      	b.n	8003884 <Error_Handler+0x8>
	...

08003888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_MspInit+0x4c>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	4a0f      	ldr	r2, [pc, #60]	; (80038d4 <HAL_MspInit+0x4c>)
 8003898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800389c:	6453      	str	r3, [r2, #68]	; 0x44
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_MspInit+0x4c>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_MspInit+0x4c>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <HAL_MspInit+0x4c>)
 80038b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_MspInit+0x4c>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <HAL_CRC_MspInit+0x3c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_CRC_MspInit+0x40>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <HAL_CRC_MspInit+0x40>)
 80038f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_CRC_MspInit+0x40>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40023000 	.word	0x40023000
 8003918:	40023800 	.word	0x40023800

0800391c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a33      	ldr	r2, [pc, #204]	; (8003a08 <HAL_I2C_MspInit+0xec>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d12d      	bne.n	800399a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800395a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003960:	2312      	movs	r3, #18
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003968:	2303      	movs	r3, #3
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800396c:	2304      	movs	r3, #4
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003970:	f107 031c 	add.w	r3, r7, #28
 8003974:	4619      	mov	r1, r3
 8003976:	4826      	ldr	r0, [pc, #152]	; (8003a10 <HAL_I2C_MspInit+0xf4>)
 8003978:	f000 fc0a 	bl	8004190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 8003986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
 800398c:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003998:	e031      	b.n	80039fe <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <HAL_I2C_MspInit+0xf8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d12c      	bne.n	80039fe <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 80039ae:	f043 0302 	orr.w	r3, r3, #2
 80039b2:	6313      	str	r3, [r2, #48]	; 0x30
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c6:	2312      	movs	r3, #18
 80039c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2303      	movs	r3, #3
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039d2:	2304      	movs	r3, #4
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d6:	f107 031c 	add.w	r3, r7, #28
 80039da:	4619      	mov	r1, r3
 80039dc:	480c      	ldr	r0, [pc, #48]	; (8003a10 <HAL_I2C_MspInit+0xf4>)
 80039de:	f000 fbd7 	bl	8004190 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 80039ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_I2C_MspInit+0xf0>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
}
 80039fe:	bf00      	nop
 8003a00:	3730      	adds	r7, #48	; 0x30
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40005400 	.word	0x40005400
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40005800 	.word	0x40005800

08003a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <HAL_RTC_MspInit+0x5c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d119      	bne.n	8003a6c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a40:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 f9ca 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003a52:	f7ff ff13 	bl	800387c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_RTC_MspInit+0x60>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2003      	movs	r0, #3
 8003a62:	f000 fb42 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003a66:	2003      	movs	r0, #3
 8003a68:	f000 fb5b 	bl	8004122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a6c:	bf00      	nop
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40002800 	.word	0x40002800
 8003a78:	42470e3c 	.word	0x42470e3c

08003a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_TIM_Base_MspInit+0x78>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12d      	bne.n	8003aea <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_TIM_Base_MspInit+0x7c>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_TIM_Base_MspInit+0x7c>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_TIM_Base_MspInit+0x7c>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2018      	movs	r0, #24
 8003ab0:	f000 fb1b 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003ab4:	2018      	movs	r0, #24
 8003ab6:	f000 fb34 	bl	8004122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	2019      	movs	r0, #25
 8003ac0:	f000 fb13 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ac4:	2019      	movs	r0, #25
 8003ac6:	f000 fb2c 	bl	8004122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2100      	movs	r1, #0
 8003ace:	201a      	movs	r0, #26
 8003ad0:	f000 fb0b 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003ad4:	201a      	movs	r0, #26
 8003ad6:	f000 fb24 	bl	8004122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2100      	movs	r1, #0
 8003ade:	201b      	movs	r0, #27
 8003ae0:	f000 fb03 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003ae4:	201b      	movs	r0, #27
 8003ae6:	f000 fb1c 	bl	8004122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40023800 	.word	0x40023800

08003afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	f107 031c 	add.w	r3, r7, #28
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a36      	ldr	r2, [pc, #216]	; (8003bf4 <HAL_UART_MspInit+0xf8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d12d      	bne.n	8003b7a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	4b35      	ldr	r3, [pc, #212]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b28:	f043 0310 	orr.w	r3, r3, #16
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2e:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b68:	2307      	movs	r3, #7
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	4822      	ldr	r0, [pc, #136]	; (8003bfc <HAL_UART_MspInit+0x100>)
 8003b74:	f000 fb0c 	bl	8004190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b78:	e038      	b.n	8003bec <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <HAL_UART_MspInit+0x104>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d133      	bne.n	8003bec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b92:	6413      	str	r3, [r2, #64]	; 0x40
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003baa:	f043 0308 	orr.w	r3, r3, #8
 8003bae:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_UART_MspInit+0xfc>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003bbc:	2360      	movs	r3, #96	; 0x60
 8003bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	480b      	ldr	r0, [pc, #44]	; (8003c04 <HAL_UART_MspInit+0x108>)
 8003bd8:	f000 fada 	bl	8004190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2100      	movs	r1, #0
 8003be0:	2026      	movs	r0, #38	; 0x26
 8003be2:	f000 fa82 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003be6:	2026      	movs	r0, #38	; 0x26
 8003be8:	f000 fa9b 	bl	8004122 <HAL_NVIC_EnableIRQ>
}
 8003bec:	bf00      	nop
 8003bee:	3730      	adds	r7, #48	; 0x30
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40004400 	.word	0x40004400
 8003c04:	40020c00 	.word	0x40020c00

08003c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <NMI_Handler+0x4>

08003c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c12:	e7fe      	b.n	8003c12 <HardFault_Handler+0x4>

08003c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <MemManage_Handler+0x4>

08003c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <BusFault_Handler+0x4>

08003c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <UsageFault_Handler+0x4>

08003c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c54:	f000 f90a 	bl	8003e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <RTC_WKUP_IRQHandler+0x10>)
 8003c62:	f002 fced 	bl	8006640 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000363c 	.word	0x2000363c

08003c70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003c76:	f002 fe00 	bl	800687a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000365c 	.word	0x2000365c

08003c84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c8a:	f002 fdf6 	bl	800687a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000365c 	.word	0x2000365c

08003c98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003c9e:	f002 fdec 	bl	800687a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000365c 	.word	0x2000365c

08003cac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <TIM1_CC_IRQHandler+0x10>)
 8003cb2:	f002 fde2 	bl	800687a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000365c 	.word	0x2000365c

08003cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <USART2_IRQHandler+0x10>)
 8003cc6:	f7fd fbb9 	bl	800143c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200036e8 	.word	0x200036e8

08003cd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003cd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cdc:	f000 fc0c 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <_sbrk+0x5c>)
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <_sbrk+0x60>)
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <_sbrk+0x64>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d00:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <_sbrk+0x64>)
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <_sbrk+0x68>)
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <_sbrk+0x64>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d207      	bcs.n	8003d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d14:	f006 fdba 	bl	800a88c <__errno>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	e009      	b.n	8003d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <_sbrk+0x64>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <_sbrk+0x64>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <_sbrk+0x64>)
 8003d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	2001c000 	.word	0x2001c000
 8003d44:	00000800 	.word	0x00000800
 8003d48:	20003f8c 	.word	0x20003f8c
 8003d4c:	20004058 	.word	0x20004058

08003d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <SystemInit+0x20>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	4a05      	ldr	r2, [pc, #20]	; (8003d70 <SystemInit+0x20>)
 8003d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d78:	480d      	ldr	r0, [pc, #52]	; (8003db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d7a:	490e      	ldr	r1, [pc, #56]	; (8003db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d7c:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d80:	e002      	b.n	8003d88 <LoopCopyDataInit>

08003d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d86:	3304      	adds	r3, #4

08003d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d8c:	d3f9      	bcc.n	8003d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d8e:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d90:	4c0b      	ldr	r4, [pc, #44]	; (8003dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d94:	e001      	b.n	8003d9a <LoopFillZerobss>

08003d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d98:	3204      	adds	r2, #4

08003d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d9c:	d3fb      	bcc.n	8003d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d9e:	f7ff ffd7 	bl	8003d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003da2:	f006 fd79 	bl	800a898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003da6:	f7fe ff8d 	bl	8002cc4 <main>
  bx  lr    
 8003daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003dac:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003db4:	20000a44 	.word	0x20000a44
  ldr r2, =_sidata
 8003db8:	08019ef4 	.word	0x08019ef4
  ldr r2, =_sbss
 8003dbc:	20000a44 	.word	0x20000a44
  ldr r4, =_ebss
 8003dc0:	20004054 	.word	0x20004054

08003dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dc4:	e7fe      	b.n	8003dc4 <ADC_IRQHandler>
	...

08003dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_Init+0x40>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <HAL_Init+0x40>)
 8003dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_Init+0x40>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <HAL_Init+0x40>)
 8003dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <HAL_Init+0x40>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <HAL_Init+0x40>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003df0:	2003      	movs	r0, #3
 8003df2:	f000 f96f 	bl	80040d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003df6:	200f      	movs	r0, #15
 8003df8:	f000 f808 	bl	8003e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dfc:	f7ff fd44 	bl	8003888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023c00 	.word	0x40023c00

08003e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_InitTick+0x54>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_InitTick+0x58>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f987 	bl	800413e <HAL_SYSTICK_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00e      	b.n	8003e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d80a      	bhi.n	8003e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e40:	2200      	movs	r2, #0
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	f000 f94f 	bl	80040ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e4c:	4a06      	ldr	r2, [pc, #24]	; (8003e68 <HAL_InitTick+0x5c>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000014 	.word	0x20000014
 8003e64:	2000001c 	.word	0x2000001c
 8003e68:	20000018 	.word	0x20000018

08003e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_IncTick+0x20>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_IncTick+0x24>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <HAL_IncTick+0x24>)
 8003e7e:	6013      	str	r3, [r2, #0]
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	2000001c 	.word	0x2000001c
 8003e90:	20003f90 	.word	0x20003f90

08003e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return uwTick;
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_GetTick+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20003f90 	.word	0x20003f90

08003eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003eb4:	f7ff ffee 	bl	8003e94 <HAL_GetTick>
 8003eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d005      	beq.n	8003ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <HAL_Delay+0x44>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ed2:	bf00      	nop
 8003ed4:	f7ff ffde 	bl	8003e94 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d8f7      	bhi.n	8003ed4 <HAL_Delay+0x28>
  {
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	2000001c 	.word	0x2000001c

08003ef4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_SuspendTick+0x1c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <HAL_SuspendTick+0x1c>)
 8003efe:	f023 0302 	bic.w	r3, r3, #2
 8003f02:	6013      	str	r3, [r2, #0]
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e010 	.word	0xe000e010

08003f14 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_ResumeTick+0x1c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <HAL_ResumeTick+0x1c>)
 8003f1e:	f043 0302 	orr.w	r3, r3, #2
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010

08003f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f66:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	60d3      	str	r3, [r2, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <__NVIC_GetPriorityGrouping+0x18>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0307 	and.w	r3, r3, #7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0b      	blt.n	8003fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	4907      	ldr	r1, [pc, #28]	; (8003fd0 <__NVIC_EnableIRQ+0x38>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2001      	movs	r0, #1
 8003fba:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100

08003fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db0a      	blt.n	8003ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	490c      	ldr	r1, [pc, #48]	; (8004020 <__NVIC_SetPriority+0x4c>)
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ffc:	e00a      	b.n	8004014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4908      	ldr	r1, [pc, #32]	; (8004024 <__NVIC_SetPriority+0x50>)
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	3b04      	subs	r3, #4
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	440b      	add	r3, r1
 8004012:	761a      	strb	r2, [r3, #24]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000e100 	.word	0xe000e100
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f1c3 0307 	rsb	r3, r3, #7
 8004042:	2b04      	cmp	r3, #4
 8004044:	bf28      	it	cs
 8004046:	2304      	movcs	r3, #4
 8004048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3304      	adds	r3, #4
 800404e:	2b06      	cmp	r3, #6
 8004050:	d902      	bls.n	8004058 <NVIC_EncodePriority+0x30>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3b03      	subs	r3, #3
 8004056:	e000      	b.n	800405a <NVIC_EncodePriority+0x32>
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	401a      	ands	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004070:	f04f 31ff 	mov.w	r1, #4294967295
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43d9      	mvns	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	4313      	orrs	r3, r2
         );
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	; 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a0:	d301      	bcc.n	80040a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00f      	b.n	80040c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <SysTick_Config+0x40>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ae:	210f      	movs	r1, #15
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	f7ff ff8e 	bl	8003fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <SysTick_Config+0x40>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <SysTick_Config+0x40>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	e000e010 	.word	0xe000e010

080040d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ff29 	bl	8003f34 <__NVIC_SetPriorityGrouping>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040fc:	f7ff ff3e 	bl	8003f7c <__NVIC_GetPriorityGrouping>
 8004100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f7ff ff8e 	bl	8004028 <NVIC_EncodePriority>
 800410c:	4602      	mov	r2, r0
 800410e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff5d 	bl	8003fd4 <__NVIC_SetPriority>
}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	4603      	mov	r3, r0
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff31 	bl	8003f98 <__NVIC_EnableIRQ>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ffa2 	bl	8004090 <SysTick_Config>
 800414c:	4603      	mov	r3, r0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e00e      	b.n	8004186 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	795b      	ldrb	r3, [r3, #5]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fbad 	bl	80038d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e16b      	b.n	8004484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041ac:	2201      	movs	r2, #1
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	f040 815a 	bne.w	800447e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d005      	beq.n	80041e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d130      	bne.n	8004244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004218:	2201      	movs	r2, #1
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 0201 	and.w	r2, r3, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b03      	cmp	r3, #3
 800424e:	d017      	beq.n	8004280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d123      	bne.n	80042d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	08da      	lsrs	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3208      	adds	r2, #8
 8004294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	220f      	movs	r2, #15
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	08da      	lsrs	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3208      	adds	r2, #8
 80042ce:	69b9      	ldr	r1, [r7, #24]
 80042d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0203 	and.w	r2, r3, #3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80b4 	beq.w	800447e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	4b60      	ldr	r3, [pc, #384]	; (800449c <HAL_GPIO_Init+0x30c>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	4a5f      	ldr	r2, [pc, #380]	; (800449c <HAL_GPIO_Init+0x30c>)
 8004320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004324:	6453      	str	r3, [r2, #68]	; 0x44
 8004326:	4b5d      	ldr	r3, [pc, #372]	; (800449c <HAL_GPIO_Init+0x30c>)
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004332:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <HAL_GPIO_Init+0x310>)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	3302      	adds	r3, #2
 800433a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	220f      	movs	r2, #15
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a52      	ldr	r2, [pc, #328]	; (80044a4 <HAL_GPIO_Init+0x314>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02b      	beq.n	80043b6 <HAL_GPIO_Init+0x226>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a51      	ldr	r2, [pc, #324]	; (80044a8 <HAL_GPIO_Init+0x318>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d025      	beq.n	80043b2 <HAL_GPIO_Init+0x222>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a50      	ldr	r2, [pc, #320]	; (80044ac <HAL_GPIO_Init+0x31c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01f      	beq.n	80043ae <HAL_GPIO_Init+0x21e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a4f      	ldr	r2, [pc, #316]	; (80044b0 <HAL_GPIO_Init+0x320>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d019      	beq.n	80043aa <HAL_GPIO_Init+0x21a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a4e      	ldr	r2, [pc, #312]	; (80044b4 <HAL_GPIO_Init+0x324>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_GPIO_Init+0x216>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a4d      	ldr	r2, [pc, #308]	; (80044b8 <HAL_GPIO_Init+0x328>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00d      	beq.n	80043a2 <HAL_GPIO_Init+0x212>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a4c      	ldr	r2, [pc, #304]	; (80044bc <HAL_GPIO_Init+0x32c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <HAL_GPIO_Init+0x20e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a4b      	ldr	r2, [pc, #300]	; (80044c0 <HAL_GPIO_Init+0x330>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_GPIO_Init+0x20a>
 8004396:	2307      	movs	r3, #7
 8004398:	e00e      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 800439a:	2308      	movs	r3, #8
 800439c:	e00c      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 800439e:	2306      	movs	r3, #6
 80043a0:	e00a      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 80043a2:	2305      	movs	r3, #5
 80043a4:	e008      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 80043a6:	2304      	movs	r3, #4
 80043a8:	e006      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 80043aa:	2303      	movs	r3, #3
 80043ac:	e004      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e002      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_GPIO_Init+0x228>
 80043b6:	2300      	movs	r3, #0
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	f002 0203 	and.w	r2, r2, #3
 80043be:	0092      	lsls	r2, r2, #2
 80043c0:	4093      	lsls	r3, r2
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043c8:	4935      	ldr	r1, [pc, #212]	; (80044a0 <HAL_GPIO_Init+0x310>)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	3302      	adds	r3, #2
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043d6:	4b3b      	ldr	r3, [pc, #236]	; (80044c4 <HAL_GPIO_Init+0x334>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043fa:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <HAL_GPIO_Init+0x334>)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_GPIO_Init+0x334>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004424:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <HAL_GPIO_Init+0x334>)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800442a:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <HAL_GPIO_Init+0x334>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_GPIO_Init+0x334>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_GPIO_Init+0x334>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004478:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <HAL_GPIO_Init+0x334>)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3301      	adds	r3, #1
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	f67f ae90 	bls.w	80041ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3724      	adds	r7, #36	; 0x24
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	40013800 	.word	0x40013800
 80044a4:	40020000 	.word	0x40020000
 80044a8:	40020400 	.word	0x40020400
 80044ac:	40020800 	.word	0x40020800
 80044b0:	40020c00 	.word	0x40020c00
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40021400 	.word	0x40021400
 80044bc:	40021800 	.word	0x40021800
 80044c0:	40021c00 	.word	0x40021c00
 80044c4:	40013c00 	.word	0x40013c00

080044c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e001      	b.n	80044ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d006      	beq.n	800451c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f97a 	bl	8003810 <HAL_GPIO_EXTI_Callback>
  }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40013c00 	.word	0x40013c00

08004528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e12b      	b.n	8004792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff f9e4 	bl	800391c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800458c:	f001 fc00 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8004590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a81      	ldr	r2, [pc, #516]	; (800479c <HAL_I2C_Init+0x274>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d807      	bhi.n	80045ac <HAL_I2C_Init+0x84>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a80      	ldr	r2, [pc, #512]	; (80047a0 <HAL_I2C_Init+0x278>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf94      	ite	ls
 80045a4:	2301      	movls	r3, #1
 80045a6:	2300      	movhi	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e006      	b.n	80045ba <HAL_I2C_Init+0x92>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a7d      	ldr	r2, [pc, #500]	; (80047a4 <HAL_I2C_Init+0x27c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bf94      	ite	ls
 80045b4:	2301      	movls	r3, #1
 80045b6:	2300      	movhi	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0e7      	b.n	8004792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a78      	ldr	r2, [pc, #480]	; (80047a8 <HAL_I2C_Init+0x280>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	0c9b      	lsrs	r3, r3, #18
 80045cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_I2C_Init+0x274>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d802      	bhi.n	80045fc <HAL_I2C_Init+0xd4>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3301      	adds	r3, #1
 80045fa:	e009      	b.n	8004610 <HAL_I2C_Init+0xe8>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	4a69      	ldr	r2, [pc, #420]	; (80047ac <HAL_I2C_Init+0x284>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	3301      	adds	r3, #1
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	495c      	ldr	r1, [pc, #368]	; (800479c <HAL_I2C_Init+0x274>)
 800462c:	428b      	cmp	r3, r1
 800462e:	d819      	bhi.n	8004664 <HAL_I2C_Init+0x13c>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1e59      	subs	r1, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fbb1 f3f3 	udiv	r3, r1, r3
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004644:	400b      	ands	r3, r1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_I2C_Init+0x138>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e59      	subs	r1, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fbb1 f3f3 	udiv	r3, r1, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	e051      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004660:	2304      	movs	r3, #4
 8004662:	e04f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <HAL_I2C_Init+0x168>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e012      	b.n	80046b6 <HAL_I2C_Init+0x18e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e58      	subs	r0, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	0099      	lsls	r1, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Init+0x196>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e022      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10e      	bne.n	80046e4 <HAL_I2C_Init+0x1bc>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e58      	subs	r0, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e2:	e00f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e58      	subs	r0, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	0099      	lsls	r1, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	6809      	ldr	r1, [r1, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6911      	ldr	r1, [r2, #16]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	000186a0 	.word	0x000186a0
 80047a0:	001e847f 	.word	0x001e847f
 80047a4:	003d08ff 	.word	0x003d08ff
 80047a8:	431bde83 	.word	0x431bde83
 80047ac:	10624dd3 	.word	0x10624dd3

080047b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	460b      	mov	r3, r1
 80047c4:	813b      	strh	r3, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ca:	f7ff fb63 	bl	8003e94 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b20      	cmp	r3, #32
 80047da:	f040 80d9 	bne.w	8004990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2319      	movs	r3, #25
 80047e4:	2201      	movs	r2, #1
 80047e6:	496d      	ldr	r1, [pc, #436]	; (800499c <HAL_I2C_Mem_Write+0x1ec>)
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fc7f 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	e0cc      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Mem_Write+0x56>
 8004802:	2302      	movs	r3, #2
 8004804:	e0c5      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d007      	beq.n	800482c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2221      	movs	r2, #33	; 0x21
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2240      	movs	r2, #64	; 0x40
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a4d      	ldr	r2, [pc, #308]	; (80049a0 <HAL_I2C_Mem_Write+0x1f0>)
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800486e:	88f8      	ldrh	r0, [r7, #6]
 8004870:	893a      	ldrh	r2, [r7, #8]
 8004872:	8979      	ldrh	r1, [r7, #10]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4603      	mov	r3, r0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fab6 	bl	8004df0 <I2C_RequestMemoryWrite>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d052      	beq.n	8004930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e081      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fd00 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d107      	bne.n	80048b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e06b      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11b      	bne.n	8004930 <HAL_I2C_Mem_Write+0x180>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1aa      	bne.n	800488e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fcec 	bl	800531a <I2C_WaitOnBTFFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b04      	cmp	r3, #4
 800494e:	d107      	bne.n	8004960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e016      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	00100002 	.word	0x00100002
 80049a0:	ffff0000 	.word	0xffff0000

080049a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	817b      	strh	r3, [r7, #10]
 80049b6:	460b      	mov	r3, r1
 80049b8:	813b      	strh	r3, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049be:	f7ff fa69 	bl	8003e94 <HAL_GetTick>
 80049c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	f040 8208 	bne.w	8004de2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2319      	movs	r3, #25
 80049d8:	2201      	movs	r2, #1
 80049da:	497b      	ldr	r1, [pc, #492]	; (8004bc8 <HAL_I2C_Mem_Read+0x224>)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fb85 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
 80049ea:	e1fb      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_I2C_Mem_Read+0x56>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e1f4      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d007      	beq.n	8004a20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2222      	movs	r2, #34	; 0x22
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a5b      	ldr	r2, [pc, #364]	; (8004bcc <HAL_I2C_Mem_Read+0x228>)
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a62:	88f8      	ldrh	r0, [r7, #6]
 8004a64:	893a      	ldrh	r2, [r7, #8]
 8004a66:	8979      	ldrh	r1, [r7, #10]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4603      	mov	r3, r0
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fa52 	bl	8004f1c <I2C_RequestMemoryRead>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e1b0      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d113      	bne.n	8004ab2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e184      	b.n	8004dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d11b      	bne.n	8004af2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e164      	b.n	8004dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d11b      	bne.n	8004b32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	e144      	b.n	8004dbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b48:	e138      	b.n	8004dbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	f200 80f1 	bhi.w	8004d36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d123      	bne.n	8004ba4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fc1b 	bl	800539c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e139      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba2:	e10b      	b.n	8004dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d14e      	bne.n	8004c4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4906      	ldr	r1, [pc, #24]	; (8004bd0 <HAL_I2C_Mem_Read+0x22c>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fa98 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e10e      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
 8004bc6:	bf00      	nop
 8004bc8:	00100002 	.word	0x00100002
 8004bcc:	ffff0000 	.word	0xffff0000
 8004bd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c48:	e0b8      	b.n	8004dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	2200      	movs	r2, #0
 8004c52:	4966      	ldr	r1, [pc, #408]	; (8004dec <HAL_I2C_Mem_Read+0x448>)
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fa49 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0bf      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2200      	movs	r2, #0
 8004cae:	494f      	ldr	r1, [pc, #316]	; (8004dec <HAL_I2C_Mem_Read+0x448>)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fa1b 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e091      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d34:	e042      	b.n	8004dbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fb2e 	bl	800539c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e04c      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d118      	bne.n	8004dbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f47f aec2 	bne.w	8004b4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e000      	b.n	8004de4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
  }
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3728      	adds	r7, #40	; 0x28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00010004 	.word	0x00010004

08004df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	4608      	mov	r0, r1
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	817b      	strh	r3, [r7, #10]
 8004e02:	460b      	mov	r3, r1
 8004e04:	813b      	strh	r3, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f960 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00d      	beq.n	8004e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e40:	d103      	bne.n	8004e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e05f      	b.n	8004f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	492d      	ldr	r1, [pc, #180]	; (8004f18 <I2C_RequestMemoryWrite+0x128>)
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f998 	bl	800519a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e04c      	b.n	8004f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	6a39      	ldr	r1, [r7, #32]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fa02 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d107      	bne.n	8004eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e02b      	b.n	8004f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d105      	bne.n	8004ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ebc:	893b      	ldrh	r3, [r7, #8]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	611a      	str	r2, [r3, #16]
 8004ec6:	e021      	b.n	8004f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ec8:	893b      	ldrh	r3, [r7, #8]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed8:	6a39      	ldr	r1, [r7, #32]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f9dc 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d107      	bne.n	8004efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e005      	b.n	8004f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f02:	893b      	ldrh	r3, [r7, #8]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	00010002 	.word	0x00010002

08004f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	4608      	mov	r0, r1
 8004f26:	4611      	mov	r1, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	817b      	strh	r3, [r7, #10]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	813b      	strh	r3, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f8c2 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7c:	d103      	bne.n	8004f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e0aa      	b.n	80050e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f8a:	897b      	ldrh	r3, [r7, #10]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	4952      	ldr	r1, [pc, #328]	; (80050e8 <I2C_RequestMemoryRead+0x1cc>)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f8fa 	bl	800519a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e097      	b.n	80050e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	6a39      	ldr	r1, [r7, #32]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f964 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00d      	beq.n	8004ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d107      	bne.n	8004fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e076      	b.n	80050e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d105      	bne.n	8005004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff8:	893b      	ldrh	r3, [r7, #8]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	e021      	b.n	8005048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005004:	893b      	ldrh	r3, [r7, #8]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	b29b      	uxth	r3, r3
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	6a39      	ldr	r1, [r7, #32]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f93e 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b04      	cmp	r3, #4
 8005028:	d107      	bne.n	800503a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e050      	b.n	80050e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800503e:	893b      	ldrh	r3, [r7, #8]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	6a39      	ldr	r1, [r7, #32]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f923 	bl	8005298 <I2C_WaitOnTXEFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00d      	beq.n	8005074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	2b04      	cmp	r3, #4
 800505e:	d107      	bne.n	8005070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e035      	b.n	80050e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	2200      	movs	r2, #0
 800508c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f82b 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050aa:	d103      	bne.n	80050b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e013      	b.n	80050e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050b8:	897b      	ldrh	r3, [r7, #10]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	4906      	ldr	r1, [pc, #24]	; (80050e8 <I2C_RequestMemoryRead+0x1cc>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f863 	bl	800519a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	00010002 	.word	0x00010002

080050ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fc:	e025      	b.n	800514a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d021      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fe fec5 	bl	8003e94 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e023      	b.n	8005192 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10d      	bne.n	8005170 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	43da      	mvns	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	e00c      	b.n	800518a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	43da      	mvns	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d0b6      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051a8:	e051      	b.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d123      	bne.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0204 	orr.w	r2, r3, #4
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e046      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d021      	beq.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fe fe43 	bl	8003e94 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d116      	bne.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e020      	b.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10c      	bne.n	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4013      	ands	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e00b      	b.n	800528a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	43da      	mvns	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4013      	ands	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d18d      	bne.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a4:	e02d      	b.n	8005302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f8ce 	bl	8005448 <I2C_IsAcknowledgeFailed>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e02d      	b.n	8005312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d021      	beq.n	8005302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fe fde9 	bl	8003e94 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d116      	bne.n	8005302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e007      	b.n	8005312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d1ca      	bne.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005326:	e02d      	b.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f88d 	bl	8005448 <I2C_IsAcknowledgeFailed>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e02d      	b.n	8005394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d021      	beq.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005340:	f7fe fda8 	bl	8003e94 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d302      	bcc.n	8005356 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d116      	bne.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e007      	b.n	8005394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b04      	cmp	r3, #4
 8005390:	d1ca      	bne.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053a8:	e042      	b.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d119      	bne.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0210 	mvn.w	r2, #16
 80053c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e029      	b.n	8005440 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ec:	f7fe fd52 	bl	8003e94 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d302      	bcc.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e007      	b.n	8005440 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d1b5      	bne.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d11b      	bne.n	8005498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	f043 0204 	orr.w	r2, r3, #4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80054b4:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <HAL_PWR_EnterSTOPMode+0x50>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f023 0203 	bic.w	r2, r3, #3
 80054bc:	490e      	ldr	r1, [pc, #56]	; (80054f8 <HAL_PWR_EnterSTOPMode+0x50>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054c4:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <HAL_PWR_EnterSTOPMode+0x54>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	4a0c      	ldr	r2, [pc, #48]	; (80054fc <HAL_PWR_EnterSTOPMode+0x54>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80054d6:	bf30      	wfi
 80054d8:	e002      	b.n	80054e0 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80054da:	bf40      	sev
    __WFE();
 80054dc:	bf20      	wfe
    __WFE();
 80054de:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_PWR_EnterSTOPMode+0x54>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	4a05      	ldr	r2, [pc, #20]	; (80054fc <HAL_PWR_EnterSTOPMode+0x54>)
 80054e6:	f023 0304 	bic.w	r3, r3, #4
 80054ea:	6113      	str	r3, [r2, #16]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40007000 	.word	0x40007000
 80054fc:	e000ed00 	.word	0xe000ed00

08005500 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]
}
 800550a:	bf00      	nop
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	420e0024 	.word	0x420e0024

08005518 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <HAL_PWREx_DisableFlashPowerDown+0x14>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	420e0024 	.word	0x420e0024

08005530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e267      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d075      	beq.n	800563a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800554e:	4b88      	ldr	r3, [pc, #544]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b04      	cmp	r3, #4
 8005558:	d00c      	beq.n	8005574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555a:	4b85      	ldr	r3, [pc, #532]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005562:	2b08      	cmp	r3, #8
 8005564:	d112      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005566:	4b82      	ldr	r3, [pc, #520]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005572:	d10b      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	4b7e      	ldr	r3, [pc, #504]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05b      	beq.n	8005638 <HAL_RCC_OscConfig+0x108>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d157      	bne.n	8005638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e242      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d106      	bne.n	80055a4 <HAL_RCC_OscConfig+0x74>
 8005596:	4b76      	ldr	r3, [pc, #472]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a75      	ldr	r2, [pc, #468]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x98>
 80055ae:	4b70      	ldr	r3, [pc, #448]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a6f      	ldr	r2, [pc, #444]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b6d      	ldr	r3, [pc, #436]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a6c      	ldr	r2, [pc, #432]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055c8:	4b69      	ldr	r3, [pc, #420]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a68      	ldr	r2, [pc, #416]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b66      	ldr	r3, [pc, #408]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a65      	ldr	r2, [pc, #404]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7fe fc54 	bl	8003e94 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fe fc50 	bl	8003e94 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e207      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	4b5b      	ldr	r3, [pc, #364]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc0>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fe fc40 	bl	8003e94 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005618:	f7fe fc3c 	bl	8003e94 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e1f3      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	4b51      	ldr	r3, [pc, #324]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0xe8>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d063      	beq.n	800570e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005646:	4b4a      	ldr	r3, [pc, #296]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005652:	4b47      	ldr	r3, [pc, #284]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800565a:	2b08      	cmp	r3, #8
 800565c:	d11c      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565e:	4b44      	ldr	r3, [pc, #272]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	4b41      	ldr	r3, [pc, #260]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e1c7      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4937      	ldr	r1, [pc, #220]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	e03a      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a0:	4b34      	ldr	r3, [pc, #208]	; (8005774 <HAL_RCC_OscConfig+0x244>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fe fbf5 	bl	8003e94 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ae:	f7fe fbf1 	bl	8003e94 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e1a8      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056cc:	4b28      	ldr	r3, [pc, #160]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4925      	ldr	r1, [pc, #148]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]
 80056e0:	e015      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e2:	4b24      	ldr	r3, [pc, #144]	; (8005774 <HAL_RCC_OscConfig+0x244>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fe fbd4 	bl	8003e94 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f0:	f7fe fbd0 	bl	8003e94 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e187      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d036      	beq.n	8005788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <HAL_RCC_OscConfig+0x248>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fe fbb4 	bl	8003e94 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005730:	f7fe fbb0 	bl	8003e94 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e167      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_OscConfig+0x240>)
 8005744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x200>
 800574e:	e01b      	b.n	8005788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005750:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_RCC_OscConfig+0x248>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005756:	f7fe fb9d 	bl	8003e94 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800575c:	e00e      	b.n	800577c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800575e:	f7fe fb99 	bl	8003e94 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d907      	bls.n	800577c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e150      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
 8005770:	40023800 	.word	0x40023800
 8005774:	42470000 	.word	0x42470000
 8005778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800577c:	4b88      	ldr	r3, [pc, #544]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ea      	bne.n	800575e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8097 	beq.w	80058c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579a:	4b81      	ldr	r3, [pc, #516]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	4b7d      	ldr	r3, [pc, #500]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	4a7c      	ldr	r2, [pc, #496]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 80057b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b4:	6413      	str	r3, [r2, #64]	; 0x40
 80057b6:	4b7a      	ldr	r3, [pc, #488]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c6:	4b77      	ldr	r3, [pc, #476]	; (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d118      	bne.n	8005804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d2:	4b74      	ldr	r3, [pc, #464]	; (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a73      	ldr	r2, [pc, #460]	; (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057de:	f7fe fb59 	bl	8003e94 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e6:	f7fe fb55 	bl	8003e94 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e10c      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f8:	4b6a      	ldr	r3, [pc, #424]	; (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x2ea>
 800580c:	4b64      	ldr	r3, [pc, #400]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
 8005818:	e01c      	b.n	8005854 <HAL_RCC_OscConfig+0x324>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b05      	cmp	r3, #5
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x30c>
 8005822:	4b5f      	ldr	r3, [pc, #380]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a5e      	ldr	r2, [pc, #376]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005828:	f043 0304 	orr.w	r3, r3, #4
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	4b5c      	ldr	r3, [pc, #368]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a5b      	ldr	r2, [pc, #364]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
 800583a:	e00b      	b.n	8005854 <HAL_RCC_OscConfig+0x324>
 800583c:	4b58      	ldr	r3, [pc, #352]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	4a57      	ldr	r2, [pc, #348]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	6713      	str	r3, [r2, #112]	; 0x70
 8005848:	4b55      	ldr	r3, [pc, #340]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	4a54      	ldr	r2, [pc, #336]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800584e:	f023 0304 	bic.w	r3, r3, #4
 8005852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d015      	beq.n	8005888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585c:	f7fe fb1a 	bl	8003e94 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005862:	e00a      	b.n	800587a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005864:	f7fe fb16 	bl	8003e94 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e0cb      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	4b49      	ldr	r3, [pc, #292]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ee      	beq.n	8005864 <HAL_RCC_OscConfig+0x334>
 8005886:	e014      	b.n	80058b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005888:	f7fe fb04 	bl	8003e94 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588e:	e00a      	b.n	80058a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fe fb00 	bl	8003e94 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	; 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e0b5      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a6:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1ee      	bne.n	8005890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b8:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	4a38      	ldr	r2, [pc, #224]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80a1 	beq.w	8005a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ce:	4b34      	ldr	r3, [pc, #208]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d05c      	beq.n	8005994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d141      	bne.n	8005966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCC_OscConfig+0x478>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fe fad4 	bl	8003e94 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fe fad0 	bl	8003e94 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e087      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	3b01      	subs	r3, #1
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	061b      	lsls	r3, r3, #24
 8005932:	491b      	ldr	r1, [pc, #108]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005934:	4313      	orrs	r3, r2
 8005936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005938:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <HAL_RCC_OscConfig+0x478>)
 800593a:	2201      	movs	r2, #1
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fe faa9 	bl	8003e94 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005946:	f7fe faa5 	bl	8003e94 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e05c      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0x416>
 8005964:	e054      	b.n	8005a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <HAL_RCC_OscConfig+0x478>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596c:	f7fe fa92 	bl	8003e94 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005974:	f7fe fa8e 	bl	8003e94 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e045      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <HAL_RCC_OscConfig+0x444>
 8005992:	e03d      	b.n	8005a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d107      	bne.n	80059ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e038      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40007000 	.word	0x40007000
 80059a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d028      	beq.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d121      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d11a      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059dc:	4013      	ands	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d111      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	3b01      	subs	r3, #1
 80059f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023800 	.word	0x40023800

08005a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0cc      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a34:	4b68      	ldr	r3, [pc, #416]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d90c      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a42:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b63      	ldr	r3, [pc, #396]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0b8      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d020      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a74:	4b59      	ldr	r3, [pc, #356]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a58      	ldr	r2, [pc, #352]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a8c:	4b53      	ldr	r3, [pc, #332]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a52      	ldr	r2, [pc, #328]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a98:	4b50      	ldr	r3, [pc, #320]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	494d      	ldr	r1, [pc, #308]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d044      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d119      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ade:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e06f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aee:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e067      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f023 0203 	bic.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4934      	ldr	r1, [pc, #208]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b10:	f7fe f9c0 	bl	8003e94 <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b18:	f7fe f9bc 	bl	8003e94 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e04f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 020c 	and.w	r2, r3, #12
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1eb      	bne.n	8005b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d20c      	bcs.n	8005b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e032      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b74:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4916      	ldr	r1, [pc, #88]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	490e      	ldr	r1, [pc, #56]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ba6:	f000 f821 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005baa:	4602      	mov	r2, r0
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	490a      	ldr	r1, [pc, #40]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb8:	5ccb      	ldrb	r3, [r1, r3]
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe f920 	bl	8003e0c <HAL_InitTick>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40023c00 	.word	0x40023c00
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	0800ddf0 	.word	0x0800ddf0
 8005be4:	20000014 	.word	0x20000014
 8005be8:	20000018 	.word	0x20000018

08005bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf0:	b090      	sub	sp, #64	; 0x40
 8005bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c04:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 030c 	and.w	r3, r3, #12
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d00d      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x40>
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	f200 80a1 	bhi.w	8005d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c1e:	e09b      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c24:	e09b      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c26:	4b53      	ldr	r3, [pc, #332]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c2a:	e098      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c2c:	4b4f      	ldr	r3, [pc, #316]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c36:	4b4d      	ldr	r3, [pc, #308]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d028      	beq.n	8005c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c42:	4b4a      	ldr	r3, [pc, #296]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	2200      	movs	r2, #0
 8005c4a:	623b      	str	r3, [r7, #32]
 8005c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c54:	2100      	movs	r1, #0
 8005c56:	4b47      	ldr	r3, [pc, #284]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c58:	fb03 f201 	mul.w	r2, r3, r1
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	fb00 f303 	mul.w	r3, r0, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	4a43      	ldr	r2, [pc, #268]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c66:	fba0 1202 	umull	r1, r2, r0, r2
 8005c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c6c:	460a      	mov	r2, r1
 8005c6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c72:	4413      	add	r3, r2
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	2200      	movs	r2, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
 8005c7c:	61fa      	str	r2, [r7, #28]
 8005c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c86:	f7fa ff8f 	bl	8000ba8 <__aeabi_uldivmod>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4613      	mov	r3, r2
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c92:	e053      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c94:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	099b      	lsrs	r3, r3, #6
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	617a      	str	r2, [r7, #20]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ca6:	f04f 0b00 	mov.w	fp, #0
 8005caa:	4652      	mov	r2, sl
 8005cac:	465b      	mov	r3, fp
 8005cae:	f04f 0000 	mov.w	r0, #0
 8005cb2:	f04f 0100 	mov.w	r1, #0
 8005cb6:	0159      	lsls	r1, r3, #5
 8005cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cbc:	0150      	lsls	r0, r2, #5
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8005cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cde:	ebb2 0408 	subs.w	r4, r2, r8
 8005ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	00eb      	lsls	r3, r5, #3
 8005cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf4:	00e2      	lsls	r2, r4, #3
 8005cf6:	4614      	mov	r4, r2
 8005cf8:	461d      	mov	r5, r3
 8005cfa:	eb14 030a 	adds.w	r3, r4, sl
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	eb45 030b 	adc.w	r3, r5, fp
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d12:	4629      	mov	r1, r5
 8005d14:	028b      	lsls	r3, r1, #10
 8005d16:	4621      	mov	r1, r4
 8005d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	028a      	lsls	r2, r1, #10
 8005d20:	4610      	mov	r0, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	2200      	movs	r2, #0
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	60fa      	str	r2, [r7, #12]
 8005d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d30:	f7fa ff3a 	bl	8000ba8 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	3301      	adds	r3, #1
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d56:	e002      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3740      	adds	r7, #64	; 0x40
 8005d64:	46bd      	mov	sp, r7
 8005d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	00f42400 	.word	0x00f42400
 8005d74:	017d7840 	.word	0x017d7840

08005d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000014 	.word	0x20000014

08005d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d94:	f7ff fff0 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	0a9b      	lsrs	r3, r3, #10
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	4903      	ldr	r1, [pc, #12]	; (8005db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da6:	5ccb      	ldrb	r3, [r1, r3]
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40023800 	.word	0x40023800
 8005db4:	0800de00 	.word	0x0800de00

08005db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dbc:	f7ff ffdc 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	0b5b      	lsrs	r3, r3, #13
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	4903      	ldr	r1, [pc, #12]	; (8005ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	0800de00 	.word	0x0800de00

08005de0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d035      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e08:	4b62      	ldr	r3, [pc, #392]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e0e:	f7fe f841 	bl	8003e94 <HAL_GetTick>
 8005e12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e16:	f7fe f83d 	bl	8003e94 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e0b0      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e28:	4b5b      	ldr	r3, [pc, #364]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f0      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	019a      	lsls	r2, r3, #6
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	071b      	lsls	r3, r3, #28
 8005e40:	4955      	ldr	r1, [pc, #340]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e48:	4b52      	ldr	r3, [pc, #328]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e4e:	f7fe f821 	bl	8003e94 <HAL_GetTick>
 8005e52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e56:	f7fe f81d 	bl	8003e94 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e090      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e68:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8083 	beq.w	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	4b44      	ldr	r3, [pc, #272]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	4a43      	ldr	r2, [pc, #268]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e90:	6413      	str	r3, [r2, #64]	; 0x40
 8005e92:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e9e:	4b3f      	ldr	r3, [pc, #252]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a3e      	ldr	r2, [pc, #248]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eaa:	f7fd fff3 	bl	8003e94 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005eb2:	f7fd ffef 	bl	8003e94 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e062      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ec4:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ed0:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d02f      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d028      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eee:	4b2a      	ldr	r3, [pc, #168]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ef8:	4b29      	ldr	r3, [pc, #164]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005efe:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f04:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f0a:	4b23      	ldr	r3, [pc, #140]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d114      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f16:	f7fd ffbd 	bl	8003e94 <HAL_GetTick>
 8005f1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f1c:	e00a      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f1e:	f7fd ffb9 	bl	8003e94 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e02a      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f34:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ee      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f4c:	d10d      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f62:	490d      	ldr	r1, [pc, #52]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	608b      	str	r3, [r1, #8]
 8005f68:	e005      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f74:	6093      	str	r3, [r2, #8]
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f82:	4905      	ldr	r1, [pc, #20]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	42470068 	.word	0x42470068
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	40007000 	.word	0x40007000
 8005fa0:	42470e40 	.word	0x42470e40

08005fa4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e066      	b.n	8006088 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7f5b      	ldrb	r3, [r3, #29]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fd fd24 	bl	8003a18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	22ca      	movs	r2, #202	; 0xca
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2253      	movs	r2, #83	; 0x53
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f998 	bl	800631c <RTC_EnterInitMode>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d12c      	bne.n	8006050 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006008:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6899      	ldr	r1, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68d2      	ldr	r2, [r2, #12]
 8006030:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6919      	ldr	r1, [r3, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	041a      	lsls	r2, r3, #16
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f99f 	bl	800638a <RTC_ExitInitMode>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	7f1b      	ldrb	r3, [r3, #28]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_RTC_SetTime+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e087      	b.n	80061bc <HAL_RTC_SetTime+0x12c>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2202      	movs	r2, #2
 80060b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d126      	bne.n	800610c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2200      	movs	r2, #0
 80060d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f97c 	bl	80063d4 <RTC_ByteToBcd2>
 80060dc:	4603      	mov	r3, r0
 80060de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 f975 	bl	80063d4 <RTC_ByteToBcd2>
 80060ea:	4603      	mov	r3, r0
 80060ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	789b      	ldrb	r3, [r3, #2]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 f96d 	bl	80063d4 <RTC_ByteToBcd2>
 80060fa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	78db      	ldrb	r3, [r3, #3]
 8006104:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e018      	b.n	800613e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800612c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006132:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	78db      	ldrb	r3, [r3, #3]
 8006138:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	22ca      	movs	r2, #202	; 0xca
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2253      	movs	r2, #83	; 0x53
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f8e4 	bl	800631c <RTC_EnterInitMode>
 8006154:	4603      	mov	r3, r0
 8006156:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d120      	bne.n	80061a0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006168:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800616c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800617c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6899      	ldr	r1, [r3, #8]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	431a      	orrs	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f8f7 	bl	800638a <RTC_ExitInitMode>
 800619c:	4603      	mov	r3, r0
 800619e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	22ff      	movs	r2, #255	; 0xff
 80061b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	771a      	strb	r2, [r3, #28]

  return status;
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	7f1b      	ldrb	r3, [r3, #28]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_RTC_SetDate+0x1c>
 80061dc:	2302      	movs	r3, #2
 80061de:	e071      	b.n	80062c4 <HAL_RTC_SetDate+0x100>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10e      	bne.n	8006210 <HAL_RTC_SetDate+0x4c>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	f023 0310 	bic.w	r3, r3, #16
 8006206:	b2db      	uxtb	r3, r3
 8006208:	330a      	adds	r3, #10
 800620a:	b2da      	uxtb	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11c      	bne.n	8006250 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	78db      	ldrb	r3, [r3, #3]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 f8da 	bl	80063d4 <RTC_ByteToBcd2>
 8006220:	4603      	mov	r3, r0
 8006222:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 f8d3 	bl	80063d4 <RTC_ByteToBcd2>
 800622e:	4603      	mov	r3, r0
 8006230:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006232:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	789b      	ldrb	r3, [r3, #2]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 f8cb 	bl	80063d4 <RTC_ByteToBcd2>
 800623e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006240:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e00e      	b.n	800626e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	78db      	ldrb	r3, [r3, #3]
 8006254:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800625c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006262:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	22ca      	movs	r2, #202	; 0xca
 8006274:	625a      	str	r2, [r3, #36]	; 0x24
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2253      	movs	r2, #83	; 0x53
 800627c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f84c 	bl	800631c <RTC_EnterInitMode>
 8006284:	4603      	mov	r3, r0
 8006286:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006288:	7cfb      	ldrb	r3, [r7, #19]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800629c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f873 	bl	800638a <RTC_ExitInitMode>
 80062a4:	4603      	mov	r3, r0
 80062a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80062a8:	7cfb      	ldrb	r3, [r7, #19]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	22ff      	movs	r2, #255	; 0xff
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	771a      	strb	r2, [r3, #28]

  return status;
 80062c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd90      	pop	{r4, r7, pc}

080062cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e8:	f7fd fdd4 	bl	8003e94 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062ee:	e009      	b.n	8006304 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062f0:	f7fd fdd0 	bl	8003e94 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062fe:	d901      	bls.n	8006304 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e007      	b.n	8006314 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0ee      	beq.n	80062f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d122      	bne.n	8006380 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006348:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800634a:	f7fd fda3 	bl	8003e94 <HAL_GetTick>
 800634e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006350:	e00c      	b.n	800636c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006352:	f7fd fd9f 	bl	8003e94 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006360:	d904      	bls.n	800636c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2204      	movs	r2, #4
 8006366:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <RTC_EnterInitMode+0x64>
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d1e8      	bne.n	8006352 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff ff89 	bl	80062cc <HAL_RTC_WaitForSynchro>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2204      	movs	r2, #4
 80063c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80063e2:	e005      	b.n	80063f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	3301      	adds	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	3b0a      	subs	r3, #10
 80063ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	d8f6      	bhi.n	80063e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	4313      	orrs	r3, r2
 8006400:	b2db      	uxtb	r3, r3
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800641c:	4b59      	ldr	r3, [pc, #356]	; (8006584 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a59      	ldr	r2, [pc, #356]	; (8006588 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	0adb      	lsrs	r3, r3, #11
 8006428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800642c:	fb02 f303 	mul.w	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	7f1b      	ldrb	r3, [r3, #28]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800643a:	2302      	movs	r3, #2
 800643c:	e09b      	b.n	8006576 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2202      	movs	r2, #2
 8006448:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	22ca      	movs	r2, #202	; 0xca
 8006450:	625a      	str	r2, [r3, #36]	; 0x24
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2253      	movs	r2, #83	; 0x53
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006464:	2b00      	cmp	r3, #0
 8006466:	d017      	beq.n	8006498 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	617a      	str	r2, [r7, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	22ff      	movs	r2, #255	; 0xff
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2203      	movs	r2, #3
 800647e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e075      	b.n	8006576 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e7      	bne.n	8006468 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80064b8:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80064ba:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a32      	ldr	r2, [pc, #200]	; (8006588 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	0adb      	lsrs	r3, r3, #11
 80064c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1e5a      	subs	r2, r3, #1
 80064d4:	617a      	str	r2, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	22ff      	movs	r2, #255	; 0xff
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2203      	movs	r2, #3
 80064e6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e041      	b.n	8006576 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0e7      	beq.n	80064d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0207 	bic.w	r2, r2, #7
 800650e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	430a      	orrs	r2, r1
 800651e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006528:	4b18      	ldr	r3, [pc, #96]	; (800658c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a17      	ldr	r2, [pc, #92]	; (800658c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800652e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006532:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a14      	ldr	r2, [pc, #80]	; (800658c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800653a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800653e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800654e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800655e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	22ff      	movs	r2, #255	; 0xff
 8006566:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000014 	.word	0x20000014
 8006588:	10624dd3 	.word	0x10624dd3
 800658c:	40013c00 	.word	0x40013c00

08006590 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7f1b      	ldrb	r3, [r3, #28]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e047      	b.n	8006638 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	22ca      	movs	r2, #202	; 0xca
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2253      	movs	r2, #83	; 0x53
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065e2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065e4:	f7fd fc56 	bl	8003e94 <HAL_GetTick>
 80065e8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80065ea:	e013      	b.n	8006614 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065ec:	f7fd fc52 	bl	8003e94 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065fa:	d90b      	bls.n	8006614 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	22ff      	movs	r2, #255	; 0xff
 8006602:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2203      	movs	r2, #3
 8006608:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e011      	b.n	8006638 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0e4      	beq.n	80065ec <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f816 	bl	8006688 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800666c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8006670:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006674:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	775a      	strb	r2, [r3, #29]
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40013c00 	.word	0x40013c00

08006688 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e041      	b.n	8006732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fd f9da 	bl	8003a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f000 fac4 	bl	8006c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d001      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e04e      	b.n	80067f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a23      	ldr	r2, [pc, #140]	; (8006800 <HAL_TIM_Base_Start_IT+0xc4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d022      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x80>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677e:	d01d      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x80>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <HAL_TIM_Base_Start_IT+0xc8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d018      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x80>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1e      	ldr	r2, [pc, #120]	; (8006808 <HAL_TIM_Base_Start_IT+0xcc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x80>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1c      	ldr	r2, [pc, #112]	; (800680c <HAL_TIM_Base_Start_IT+0xd0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00e      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x80>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <HAL_TIM_Base_Start_IT+0xd4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d009      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a19      	ldr	r2, [pc, #100]	; (8006814 <HAL_TIM_Base_Start_IT+0xd8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x80>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <HAL_TIM_Base_Start_IT+0xdc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d111      	bne.n	80067e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b06      	cmp	r3, #6
 80067cc:	d010      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067de:	e007      	b.n	80067f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40000400 	.word	0x40000400
 8006808:	40000800 	.word	0x40000800
 800680c:	40000c00 	.word	0x40000c00
 8006810:	40010400 	.word	0x40010400
 8006814:	40014000 	.word	0x40014000
 8006818:	40001800 	.word	0x40001800

0800681c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1a      	ldr	r2, [r3, #32]
 800683a:	f241 1311 	movw	r3, #4369	; 0x1111
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10f      	bne.n	8006864 <HAL_TIM_Base_Stop_IT+0x48>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a1a      	ldr	r2, [r3, #32]
 800684a:	f240 4344 	movw	r3, #1092	; 0x444
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d107      	bne.n	8006864 <HAL_TIM_Base_Stop_IT+0x48>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d122      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d11b      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0202 	mvn.w	r2, #2
 80068a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f9b5 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 80068c2:	e005      	b.n	80068d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f9a7 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9b8 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d122      	bne.n	800692a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d11b      	bne.n	800692a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f06f 0204 	mvn.w	r2, #4
 80068fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f98b 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 8006916:	e005      	b.n	8006924 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f97d 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f98e 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b08      	cmp	r3, #8
 8006936:	d122      	bne.n	800697e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b08      	cmp	r3, #8
 8006944:	d11b      	bne.n	800697e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f06f 0208 	mvn.w	r2, #8
 800694e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2204      	movs	r2, #4
 8006954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f961 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 800696a:	e005      	b.n	8006978 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f953 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f964 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b10      	cmp	r3, #16
 800698a:	d122      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b10      	cmp	r3, #16
 8006998:	d11b      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f06f 0210 	mvn.w	r2, #16
 80069a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2208      	movs	r2, #8
 80069a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f937 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 80069be:	e005      	b.n	80069cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f929 	bl	8006c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f93a 	bl	8006c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10e      	bne.n	80069fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d107      	bne.n	80069fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f06f 0201 	mvn.w	r2, #1
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fc ff27 	bl	800384c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	2b80      	cmp	r3, #128	; 0x80
 8006a0a:	d10e      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b80      	cmp	r3, #128	; 0x80
 8006a18:	d107      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fadf 	bl	8006fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	d10e      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8ff 	bl	8006c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d10e      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f06f 0220 	mvn.w	r2, #32
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 faa9 	bl	8006fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e0b4      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x186>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006acc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ade:	d03e      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0xd4>
 8006ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae4:	f200 8087 	bhi.w	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	f000 8086 	beq.w	8006bfc <HAL_TIM_ConfigClockSource+0x172>
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d87f      	bhi.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006af6:	2b70      	cmp	r3, #112	; 0x70
 8006af8:	d01a      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0xa6>
 8006afa:	2b70      	cmp	r3, #112	; 0x70
 8006afc:	d87b      	bhi.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006afe:	2b60      	cmp	r3, #96	; 0x60
 8006b00:	d050      	beq.n	8006ba4 <HAL_TIM_ConfigClockSource+0x11a>
 8006b02:	2b60      	cmp	r3, #96	; 0x60
 8006b04:	d877      	bhi.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006b06:	2b50      	cmp	r3, #80	; 0x50
 8006b08:	d03c      	beq.n	8006b84 <HAL_TIM_ConfigClockSource+0xfa>
 8006b0a:	2b50      	cmp	r3, #80	; 0x50
 8006b0c:	d873      	bhi.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d058      	beq.n	8006bc4 <HAL_TIM_ConfigClockSource+0x13a>
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d86f      	bhi.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006b16:	2b30      	cmp	r3, #48	; 0x30
 8006b18:	d064      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b1a:	2b30      	cmp	r3, #48	; 0x30
 8006b1c:	d86b      	bhi.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d060      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d867      	bhi.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d05c      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2a:	2b10      	cmp	r3, #16
 8006b2c:	d05a      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2e:	e062      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6899      	ldr	r1, [r3, #8]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f000 f9ac 	bl	8006e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	609a      	str	r2, [r3, #8]
      break;
 8006b5c:	e04f      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6899      	ldr	r1, [r3, #8]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f000 f995 	bl	8006e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b80:	609a      	str	r2, [r3, #8]
      break;
 8006b82:	e03c      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6859      	ldr	r1, [r3, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	461a      	mov	r2, r3
 8006b92:	f000 f909 	bl	8006da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2150      	movs	r1, #80	; 0x50
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f962 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006ba2:	e02c      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6859      	ldr	r1, [r3, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f000 f928 	bl	8006e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2160      	movs	r1, #96	; 0x60
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 f952 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006bc2:	e01c      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	6859      	ldr	r1, [r3, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f000 f8e9 	bl	8006da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2140      	movs	r1, #64	; 0x40
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 f942 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006be2:	e00c      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 f939 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006bf4:	e003      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bfa:	e000      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a40      	ldr	r2, [pc, #256]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d013      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c86:	d00f      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3d      	ldr	r2, [pc, #244]	; (8006d80 <TIM_Base_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00b      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3c      	ldr	r2, [pc, #240]	; (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d007      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3b      	ldr	r2, [pc, #236]	; (8006d88 <TIM_Base_SetConfig+0x120>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3a      	ldr	r2, [pc, #232]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d108      	bne.n	8006cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2f      	ldr	r2, [pc, #188]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d02b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d027      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	; (8006d80 <TIM_Base_SetConfig+0x118>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d023      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2b      	ldr	r2, [pc, #172]	; (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01f      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <TIM_Base_SetConfig+0x120>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d017      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a28      	ldr	r2, [pc, #160]	; (8006d90 <TIM_Base_SetConfig+0x128>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a27      	ldr	r2, [pc, #156]	; (8006d94 <TIM_Base_SetConfig+0x12c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00f      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <TIM_Base_SetConfig+0x130>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <TIM_Base_SetConfig+0x134>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a24      	ldr	r2, [pc, #144]	; (8006da0 <TIM_Base_SetConfig+0x138>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a23      	ldr	r2, [pc, #140]	; (8006da4 <TIM_Base_SetConfig+0x13c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d108      	bne.n	8006d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0xf8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a0c      	ldr	r2, [pc, #48]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d103      	bne.n	8006d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	615a      	str	r2, [r3, #20]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40000400 	.word	0x40000400
 8006d84:	40000800 	.word	0x40000800
 8006d88:	40000c00 	.word	0x40000c00
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800
 8006d9c:	40001800 	.word	0x40001800
 8006da0:	40001c00 	.word	0x40001c00
 8006da4:	40002000 	.word	0x40002000

08006da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0201 	bic.w	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f023 030a 	bic.w	r3, r3, #10
 8006de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b087      	sub	sp, #28
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f023 0210 	bic.w	r2, r3, #16
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	031b      	lsls	r3, r3, #12
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f043 0307 	orr.w	r3, r3, #7
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	609a      	str	r2, [r3, #8]
}
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e05a      	b.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d022      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d01d      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d018      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a18      	ldr	r2, [pc, #96]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d10c      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	40000800 	.word	0x40000800
 8006fc4:	40000c00 	.word	0x40000c00
 8006fc8:	40010400 	.word	0x40010400
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	40001800 	.word	0x40001800

08006fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e03f      	b.n	800708e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fc fd6a 	bl	8003afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2224      	movs	r2, #36	; 0x24
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800703e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f929 	bl	8007298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b08a      	sub	sp, #40	; 0x28
 800709a:	af02      	add	r7, sp, #8
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d17c      	bne.n	80071b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_Transmit+0x2c>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e075      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_UART_Transmit+0x3e>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e06e      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2221      	movs	r2, #33	; 0x21
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ea:	f7fc fed3 	bl	8003e94 <HAL_GetTick>
 80070ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007104:	d108      	bne.n	8007118 <HAL_UART_Transmit+0x82>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e003      	b.n	8007120 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007128:	e02a      	b.n	8007180 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f840 	bl	80071ba <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e036      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	3302      	adds	r3, #2
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	e007      	b.n	8007172 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1cf      	bne.n	800712a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	2140      	movs	r1, #64	; 0x40
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f810 	bl	80071ba <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e006      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b090      	sub	sp, #64	; 0x40
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	603b      	str	r3, [r7, #0]
 80071c6:	4613      	mov	r3, r2
 80071c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ca:	e050      	b.n	800726e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d04c      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0x30>
 80071da:	f7fc fe5b 	bl	8003e94 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d241      	bcs.n	800726e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	330c      	adds	r3, #12
 8007208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800720a:	637a      	str	r2, [r7, #52]	; 0x34
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3314      	adds	r3, #20
 8007224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	613b      	str	r3, [r7, #16]
   return(result);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	63bb      	str	r3, [r7, #56]	; 0x38
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3314      	adds	r3, #20
 800723c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800723e:	623a      	str	r2, [r7, #32]
 8007240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	69f9      	ldr	r1, [r7, #28]
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	61bb      	str	r3, [r7, #24]
   return(result);
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e5      	bne.n	800721e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e00f      	b.n	800728e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	bf0c      	ite	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	2300      	movne	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	429a      	cmp	r2, r3
 800728a:	d09f      	beq.n	80071cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3740      	adds	r7, #64	; 0x40
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800729c:	b0c0      	sub	sp, #256	; 0x100
 800729e:	af00      	add	r7, sp, #0
 80072a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	68d9      	ldr	r1, [r3, #12]
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	ea40 0301 	orr.w	r3, r0, r1
 80072c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072f0:	f021 010c 	bic.w	r1, r1, #12
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072fe:	430b      	orrs	r3, r1
 8007300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800730e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007312:	6999      	ldr	r1, [r3, #24]
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	ea40 0301 	orr.w	r3, r0, r1
 800731e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4b8f      	ldr	r3, [pc, #572]	; (8007564 <UART_SetConfig+0x2cc>)
 8007328:	429a      	cmp	r2, r3
 800732a:	d005      	beq.n	8007338 <UART_SetConfig+0xa0>
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	4b8d      	ldr	r3, [pc, #564]	; (8007568 <UART_SetConfig+0x2d0>)
 8007334:	429a      	cmp	r2, r3
 8007336:	d104      	bne.n	8007342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7fe fd3e 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 800733c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007340:	e003      	b.n	800734a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007342:	f7fe fd25 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8007346:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007354:	f040 810c 	bne.w	8007570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735c:	2200      	movs	r2, #0
 800735e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007362:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800736a:	4622      	mov	r2, r4
 800736c:	462b      	mov	r3, r5
 800736e:	1891      	adds	r1, r2, r2
 8007370:	65b9      	str	r1, [r7, #88]	; 0x58
 8007372:	415b      	adcs	r3, r3
 8007374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800737a:	4621      	mov	r1, r4
 800737c:	eb12 0801 	adds.w	r8, r2, r1
 8007380:	4629      	mov	r1, r5
 8007382:	eb43 0901 	adc.w	r9, r3, r1
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800739a:	4690      	mov	r8, r2
 800739c:	4699      	mov	r9, r3
 800739e:	4623      	mov	r3, r4
 80073a0:	eb18 0303 	adds.w	r3, r8, r3
 80073a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073a8:	462b      	mov	r3, r5
 80073aa:	eb49 0303 	adc.w	r3, r9, r3
 80073ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073c6:	460b      	mov	r3, r1
 80073c8:	18db      	adds	r3, r3, r3
 80073ca:	653b      	str	r3, [r7, #80]	; 0x50
 80073cc:	4613      	mov	r3, r2
 80073ce:	eb42 0303 	adc.w	r3, r2, r3
 80073d2:	657b      	str	r3, [r7, #84]	; 0x54
 80073d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073dc:	f7f9 fbe4 	bl	8000ba8 <__aeabi_uldivmod>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4b61      	ldr	r3, [pc, #388]	; (800756c <UART_SetConfig+0x2d4>)
 80073e6:	fba3 2302 	umull	r2, r3, r3, r2
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	011c      	lsls	r4, r3, #4
 80073ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007400:	4642      	mov	r2, r8
 8007402:	464b      	mov	r3, r9
 8007404:	1891      	adds	r1, r2, r2
 8007406:	64b9      	str	r1, [r7, #72]	; 0x48
 8007408:	415b      	adcs	r3, r3
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007410:	4641      	mov	r1, r8
 8007412:	eb12 0a01 	adds.w	sl, r2, r1
 8007416:	4649      	mov	r1, r9
 8007418:	eb43 0b01 	adc.w	fp, r3, r1
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	f04f 0300 	mov.w	r3, #0
 8007424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800742c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007430:	4692      	mov	sl, r2
 8007432:	469b      	mov	fp, r3
 8007434:	4643      	mov	r3, r8
 8007436:	eb1a 0303 	adds.w	r3, sl, r3
 800743a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800743e:	464b      	mov	r3, r9
 8007440:	eb4b 0303 	adc.w	r3, fp, r3
 8007444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007454:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800745c:	460b      	mov	r3, r1
 800745e:	18db      	adds	r3, r3, r3
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
 8007462:	4613      	mov	r3, r2
 8007464:	eb42 0303 	adc.w	r3, r2, r3
 8007468:	647b      	str	r3, [r7, #68]	; 0x44
 800746a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800746e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007472:	f7f9 fb99 	bl	8000ba8 <__aeabi_uldivmod>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4611      	mov	r1, r2
 800747c:	4b3b      	ldr	r3, [pc, #236]	; (800756c <UART_SetConfig+0x2d4>)
 800747e:	fba3 2301 	umull	r2, r3, r3, r1
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	2264      	movs	r2, #100	; 0x64
 8007486:	fb02 f303 	mul.w	r3, r2, r3
 800748a:	1acb      	subs	r3, r1, r3
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007492:	4b36      	ldr	r3, [pc, #216]	; (800756c <UART_SetConfig+0x2d4>)
 8007494:	fba3 2302 	umull	r2, r3, r3, r2
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074a0:	441c      	add	r4, r3
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074b4:	4642      	mov	r2, r8
 80074b6:	464b      	mov	r3, r9
 80074b8:	1891      	adds	r1, r2, r2
 80074ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80074bc:	415b      	adcs	r3, r3
 80074be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074c4:	4641      	mov	r1, r8
 80074c6:	1851      	adds	r1, r2, r1
 80074c8:	6339      	str	r1, [r7, #48]	; 0x30
 80074ca:	4649      	mov	r1, r9
 80074cc:	414b      	adcs	r3, r1
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074dc:	4659      	mov	r1, fp
 80074de:	00cb      	lsls	r3, r1, #3
 80074e0:	4651      	mov	r1, sl
 80074e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e6:	4651      	mov	r1, sl
 80074e8:	00ca      	lsls	r2, r1, #3
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	4642      	mov	r2, r8
 80074f2:	189b      	adds	r3, r3, r2
 80074f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074f8:	464b      	mov	r3, r9
 80074fa:	460a      	mov	r2, r1
 80074fc:	eb42 0303 	adc.w	r3, r2, r3
 8007500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007510:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007518:	460b      	mov	r3, r1
 800751a:	18db      	adds	r3, r3, r3
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
 800751e:	4613      	mov	r3, r2
 8007520:	eb42 0303 	adc.w	r3, r2, r3
 8007524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800752a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800752e:	f7f9 fb3b 	bl	8000ba8 <__aeabi_uldivmod>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4b0d      	ldr	r3, [pc, #52]	; (800756c <UART_SetConfig+0x2d4>)
 8007538:	fba3 1302 	umull	r1, r3, r3, r2
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	2164      	movs	r1, #100	; 0x64
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	3332      	adds	r3, #50	; 0x32
 800754a:	4a08      	ldr	r2, [pc, #32]	; (800756c <UART_SetConfig+0x2d4>)
 800754c:	fba2 2303 	umull	r2, r3, r2, r3
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	f003 0207 	and.w	r2, r3, #7
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4422      	add	r2, r4
 800755e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007560:	e105      	b.n	800776e <UART_SetConfig+0x4d6>
 8007562:	bf00      	nop
 8007564:	40011000 	.word	0x40011000
 8007568:	40011400 	.word	0x40011400
 800756c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007574:	2200      	movs	r2, #0
 8007576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800757a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800757e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007582:	4642      	mov	r2, r8
 8007584:	464b      	mov	r3, r9
 8007586:	1891      	adds	r1, r2, r2
 8007588:	6239      	str	r1, [r7, #32]
 800758a:	415b      	adcs	r3, r3
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
 800758e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007592:	4641      	mov	r1, r8
 8007594:	1854      	adds	r4, r2, r1
 8007596:	4649      	mov	r1, r9
 8007598:	eb43 0501 	adc.w	r5, r3, r1
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	00eb      	lsls	r3, r5, #3
 80075a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075aa:	00e2      	lsls	r2, r4, #3
 80075ac:	4614      	mov	r4, r2
 80075ae:	461d      	mov	r5, r3
 80075b0:	4643      	mov	r3, r8
 80075b2:	18e3      	adds	r3, r4, r3
 80075b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075b8:	464b      	mov	r3, r9
 80075ba:	eb45 0303 	adc.w	r3, r5, r3
 80075be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075de:	4629      	mov	r1, r5
 80075e0:	008b      	lsls	r3, r1, #2
 80075e2:	4621      	mov	r1, r4
 80075e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e8:	4621      	mov	r1, r4
 80075ea:	008a      	lsls	r2, r1, #2
 80075ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075f0:	f7f9 fada 	bl	8000ba8 <__aeabi_uldivmod>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4b60      	ldr	r3, [pc, #384]	; (800777c <UART_SetConfig+0x4e4>)
 80075fa:	fba3 2302 	umull	r2, r3, r3, r2
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	011c      	lsls	r4, r3, #4
 8007602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007606:	2200      	movs	r2, #0
 8007608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800760c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007614:	4642      	mov	r2, r8
 8007616:	464b      	mov	r3, r9
 8007618:	1891      	adds	r1, r2, r2
 800761a:	61b9      	str	r1, [r7, #24]
 800761c:	415b      	adcs	r3, r3
 800761e:	61fb      	str	r3, [r7, #28]
 8007620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007624:	4641      	mov	r1, r8
 8007626:	1851      	adds	r1, r2, r1
 8007628:	6139      	str	r1, [r7, #16]
 800762a:	4649      	mov	r1, r9
 800762c:	414b      	adcs	r3, r1
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800763c:	4659      	mov	r1, fp
 800763e:	00cb      	lsls	r3, r1, #3
 8007640:	4651      	mov	r1, sl
 8007642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007646:	4651      	mov	r1, sl
 8007648:	00ca      	lsls	r2, r1, #3
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	4603      	mov	r3, r0
 8007650:	4642      	mov	r2, r8
 8007652:	189b      	adds	r3, r3, r2
 8007654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007658:	464b      	mov	r3, r9
 800765a:	460a      	mov	r2, r1
 800765c:	eb42 0303 	adc.w	r3, r2, r3
 8007660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	67bb      	str	r3, [r7, #120]	; 0x78
 800766e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800767c:	4649      	mov	r1, r9
 800767e:	008b      	lsls	r3, r1, #2
 8007680:	4641      	mov	r1, r8
 8007682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007686:	4641      	mov	r1, r8
 8007688:	008a      	lsls	r2, r1, #2
 800768a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800768e:	f7f9 fa8b 	bl	8000ba8 <__aeabi_uldivmod>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4b39      	ldr	r3, [pc, #228]	; (800777c <UART_SetConfig+0x4e4>)
 8007698:	fba3 1302 	umull	r1, r3, r3, r2
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	2164      	movs	r1, #100	; 0x64
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	3332      	adds	r3, #50	; 0x32
 80076aa:	4a34      	ldr	r2, [pc, #208]	; (800777c <UART_SetConfig+0x4e4>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076b6:	441c      	add	r4, r3
 80076b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076bc:	2200      	movs	r2, #0
 80076be:	673b      	str	r3, [r7, #112]	; 0x70
 80076c0:	677a      	str	r2, [r7, #116]	; 0x74
 80076c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076c6:	4642      	mov	r2, r8
 80076c8:	464b      	mov	r3, r9
 80076ca:	1891      	adds	r1, r2, r2
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	415b      	adcs	r3, r3
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076d6:	4641      	mov	r1, r8
 80076d8:	1851      	adds	r1, r2, r1
 80076da:	6039      	str	r1, [r7, #0]
 80076dc:	4649      	mov	r1, r9
 80076de:	414b      	adcs	r3, r1
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076ee:	4659      	mov	r1, fp
 80076f0:	00cb      	lsls	r3, r1, #3
 80076f2:	4651      	mov	r1, sl
 80076f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076f8:	4651      	mov	r1, sl
 80076fa:	00ca      	lsls	r2, r1, #3
 80076fc:	4610      	mov	r0, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	4603      	mov	r3, r0
 8007702:	4642      	mov	r2, r8
 8007704:	189b      	adds	r3, r3, r2
 8007706:	66bb      	str	r3, [r7, #104]	; 0x68
 8007708:	464b      	mov	r3, r9
 800770a:	460a      	mov	r2, r1
 800770c:	eb42 0303 	adc.w	r3, r2, r3
 8007710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	663b      	str	r3, [r7, #96]	; 0x60
 800771c:	667a      	str	r2, [r7, #100]	; 0x64
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800772a:	4649      	mov	r1, r9
 800772c:	008b      	lsls	r3, r1, #2
 800772e:	4641      	mov	r1, r8
 8007730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007734:	4641      	mov	r1, r8
 8007736:	008a      	lsls	r2, r1, #2
 8007738:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800773c:	f7f9 fa34 	bl	8000ba8 <__aeabi_uldivmod>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4b0d      	ldr	r3, [pc, #52]	; (800777c <UART_SetConfig+0x4e4>)
 8007746:	fba3 1302 	umull	r1, r3, r3, r2
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	2164      	movs	r1, #100	; 0x64
 800774e:	fb01 f303 	mul.w	r3, r1, r3
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	3332      	adds	r3, #50	; 0x32
 8007758:	4a08      	ldr	r2, [pc, #32]	; (800777c <UART_SetConfig+0x4e4>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	f003 020f 	and.w	r2, r3, #15
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4422      	add	r2, r4
 800776c:	609a      	str	r2, [r3, #8]
}
 800776e:	bf00      	nop
 8007770:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007774:	46bd      	mov	sp, r7
 8007776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800777a:	bf00      	nop
 800777c:	51eb851f 	.word	0x51eb851f

08007780 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	2101      	movs	r1, #1
 800778e:	482c      	ldr	r0, [pc, #176]	; (8007840 <network_configure_activations+0xc0>)
 8007790:	f000 fb04 	bl	8007d9c <ai_platform_get_activations_map>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d047      	beq.n	800782a <network_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1396);
 800779a:	4b29      	ldr	r3, [pc, #164]	; (8007840 <network_configure_activations+0xc0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f203 5374 	addw	r3, r3, #1396	; 0x574
 80077a2:	4a28      	ldr	r2, [pc, #160]	; (8007844 <network_configure_activations+0xc4>)
 80077a4:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1396);
 80077a6:	4b26      	ldr	r3, [pc, #152]	; (8007840 <network_configure_activations+0xc0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f203 5374 	addw	r3, r3, #1396	; 0x574
 80077ae:	4a25      	ldr	r2, [pc, #148]	; (8007844 <network_configure_activations+0xc4>)
 80077b0:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 80077b2:	4b23      	ldr	r3, [pc, #140]	; (8007840 <network_configure_activations+0xc0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3320      	adds	r3, #32
 80077b8:	4a23      	ldr	r2, [pc, #140]	; (8007848 <network_configure_activations+0xc8>)
 80077ba:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 80077bc:	4b20      	ldr	r3, [pc, #128]	; (8007840 <network_configure_activations+0xc0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3320      	adds	r3, #32
 80077c2:	4a21      	ldr	r2, [pc, #132]	; (8007848 <network_configure_activations+0xc8>)
 80077c4:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80077c6:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <network_configure_activations+0xc0>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a20      	ldr	r2, [pc, #128]	; (800784c <network_configure_activations+0xcc>)
 80077cc:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80077ce:	4b1c      	ldr	r3, [pc, #112]	; (8007840 <network_configure_activations+0xc0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1e      	ldr	r2, [pc, #120]	; (800784c <network_configure_activations+0xcc>)
 80077d4:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 704);
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <network_configure_activations+0xc0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80077de:	4a1c      	ldr	r2, [pc, #112]	; (8007850 <network_configure_activations+0xd0>)
 80077e0:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 704);
 80077e2:	4b17      	ldr	r3, [pc, #92]	; (8007840 <network_configure_activations+0xc0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80077ea:	4a19      	ldr	r2, [pc, #100]	; (8007850 <network_configure_activations+0xd0>)
 80077ec:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <network_configure_activations+0xc0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <network_configure_activations+0xd4>)
 80077f4:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <network_configure_activations+0xc0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a16      	ldr	r2, [pc, #88]	; (8007854 <network_configure_activations+0xd4>)
 80077fc:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 80077fe:	4b10      	ldr	r3, [pc, #64]	; (8007840 <network_configure_activations+0xc0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007806:	4a14      	ldr	r2, [pc, #80]	; (8007858 <network_configure_activations+0xd8>)
 8007808:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <network_configure_activations+0xc0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007812:	4a11      	ldr	r2, [pc, #68]	; (8007858 <network_configure_activations+0xd8>)
 8007814:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <network_configure_activations+0xc0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a10      	ldr	r2, [pc, #64]	; (800785c <network_configure_activations+0xdc>)
 800781c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800781e:	4b08      	ldr	r3, [pc, #32]	; (8007840 <network_configure_activations+0xc0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a0e      	ldr	r2, [pc, #56]	; (800785c <network_configure_activations+0xdc>)
 8007824:	60d3      	str	r3, [r2, #12]
    
    return true;
 8007826:	2301      	movs	r3, #1
 8007828:	e005      	b.n	8007836 <network_configure_activations+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800782a:	2213      	movs	r2, #19
 800782c:	2130      	movs	r1, #48	; 0x30
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fb98 	bl	8007f64 <ai_platform_network_set_error>
  return false;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20003f94 	.word	0x20003f94
 8007844:	20000060 	.word	0x20000060
 8007848:	20000070 	.word	0x20000070
 800784c:	20000090 	.word	0x20000090
 8007850:	200000a0 	.word	0x200000a0
 8007854:	200000c0 	.word	0x200000c0
 8007858:	200000d0 	.word	0x200000d0
 800785c:	200000f0 	.word	0x200000f0

08007860 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	2101      	movs	r1, #1
 800786e:	4850      	ldr	r0, [pc, #320]	; (80079b0 <network_configure_weights+0x150>)
 8007870:	f000 fa40 	bl	8007cf4 <ai_platform_get_weights_map>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8090 	beq.w	800799c <network_configure_weights+0x13c>
    /* Updating weights (byte) offsets */
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800787c:	4b4d      	ldr	r3, [pc, #308]	; (80079b4 <network_configure_weights+0x154>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007884:	4a4b      	ldr	r2, [pc, #300]	; (80079b4 <network_configure_weights+0x154>)
 8007886:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8007888:	4b49      	ldr	r3, [pc, #292]	; (80079b0 <network_configure_weights+0x150>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a49      	ldr	r2, [pc, #292]	; (80079b4 <network_configure_weights+0x154>)
 800788e:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8007890:	4b47      	ldr	r3, [pc, #284]	; (80079b0 <network_configure_weights+0x150>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a47      	ldr	r2, [pc, #284]	; (80079b4 <network_configure_weights+0x154>)
 8007896:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8007898:	4b47      	ldr	r3, [pc, #284]	; (80079b8 <network_configure_weights+0x158>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078a0:	4a45      	ldr	r2, [pc, #276]	; (80079b8 <network_configure_weights+0x158>)
 80078a2:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 12);
 80078a4:	4b42      	ldr	r3, [pc, #264]	; (80079b0 <network_configure_weights+0x150>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	4a43      	ldr	r2, [pc, #268]	; (80079b8 <network_configure_weights+0x158>)
 80078ac:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 12);
 80078ae:	4b40      	ldr	r3, [pc, #256]	; (80079b0 <network_configure_weights+0x150>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	4a40      	ldr	r2, [pc, #256]	; (80079b8 <network_configure_weights+0x158>)
 80078b6:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80078b8:	4b40      	ldr	r3, [pc, #256]	; (80079bc <network_configure_weights+0x15c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078c0:	4a3e      	ldr	r2, [pc, #248]	; (80079bc <network_configure_weights+0x15c>)
 80078c2:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 588);
 80078c4:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <network_configure_weights+0x150>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80078cc:	4a3b      	ldr	r2, [pc, #236]	; (80079bc <network_configure_weights+0x15c>)
 80078ce:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 588);
 80078d0:	4b37      	ldr	r3, [pc, #220]	; (80079b0 <network_configure_weights+0x150>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80078d8:	4a38      	ldr	r2, [pc, #224]	; (80079bc <network_configure_weights+0x15c>)
 80078da:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80078dc:	4b38      	ldr	r3, [pc, #224]	; (80079c0 <network_configure_weights+0x160>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078e4:	4a36      	ldr	r2, [pc, #216]	; (80079c0 <network_configure_weights+0x160>)
 80078e6:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 652);
 80078e8:	4b31      	ldr	r3, [pc, #196]	; (80079b0 <network_configure_weights+0x150>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078f0:	4a33      	ldr	r2, [pc, #204]	; (80079c0 <network_configure_weights+0x160>)
 80078f2:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 652);
 80078f4:	4b2e      	ldr	r3, [pc, #184]	; (80079b0 <network_configure_weights+0x150>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078fc:	4a30      	ldr	r2, [pc, #192]	; (80079c0 <network_configure_weights+0x160>)
 80078fe:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8007900:	4b30      	ldr	r3, [pc, #192]	; (80079c4 <network_configure_weights+0x164>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007908:	4a2e      	ldr	r2, [pc, #184]	; (80079c4 <network_configure_weights+0x164>)
 800790a:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 2188);
 800790c:	4b28      	ldr	r3, [pc, #160]	; (80079b0 <network_configure_weights+0x150>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007914:	4a2b      	ldr	r2, [pc, #172]	; (80079c4 <network_configure_weights+0x164>)
 8007916:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2188);
 8007918:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <network_configure_weights+0x150>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8007920:	4a28      	ldr	r2, [pc, #160]	; (80079c4 <network_configure_weights+0x164>)
 8007922:	60d3      	str	r3, [r2, #12]
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007924:	4b28      	ldr	r3, [pc, #160]	; (80079c8 <network_configure_weights+0x168>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800792c:	4a26      	ldr	r2, [pc, #152]	; (80079c8 <network_configure_weights+0x168>)
 800792e:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 2220);
 8007930:	4b1f      	ldr	r3, [pc, #124]	; (80079b0 <network_configure_weights+0x150>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f603 03ac 	addw	r3, r3, #2220	; 0x8ac
 8007938:	4a23      	ldr	r2, [pc, #140]	; (80079c8 <network_configure_weights+0x168>)
 800793a:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2220);
 800793c:	4b1c      	ldr	r3, [pc, #112]	; (80079b0 <network_configure_weights+0x150>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f603 03ac 	addw	r3, r3, #2220	; 0x8ac
 8007944:	4a20      	ldr	r2, [pc, #128]	; (80079c8 <network_configure_weights+0x168>)
 8007946:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007948:	4b20      	ldr	r3, [pc, #128]	; (80079cc <network_configure_weights+0x16c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007950:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <network_configure_weights+0x16c>)
 8007952:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 47276);
 8007954:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <network_configure_weights+0x150>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 800795c:	33ac      	adds	r3, #172	; 0xac
 800795e:	4a1b      	ldr	r2, [pc, #108]	; (80079cc <network_configure_weights+0x16c>)
 8007960:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 47276);
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <network_configure_weights+0x150>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 800796a:	33ac      	adds	r3, #172	; 0xac
 800796c:	4a17      	ldr	r2, [pc, #92]	; (80079cc <network_configure_weights+0x16c>)
 800796e:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007970:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <network_configure_weights+0x170>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007978:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <network_configure_weights+0x170>)
 800797a:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 47532);
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <network_configure_weights+0x150>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8007984:	33ac      	adds	r3, #172	; 0xac
 8007986:	4a12      	ldr	r2, [pc, #72]	; (80079d0 <network_configure_weights+0x170>)
 8007988:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 47532);
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <network_configure_weights+0x150>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8007992:	33ac      	adds	r3, #172	; 0xac
 8007994:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <network_configure_weights+0x170>)
 8007996:	60d3      	str	r3, [r2, #12]
    
    return true;
 8007998:	2301      	movs	r3, #1
 800799a:	e005      	b.n	80079a8 <network_configure_weights+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800799c:	2212      	movs	r2, #18
 800799e:	2130      	movs	r1, #48	; 0x30
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fadf 	bl	8007f64 <ai_platform_network_set_error>
  return false;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20003f98 	.word	0x20003f98
 80079b4:	20000020 	.word	0x20000020
 80079b8:	20000030 	.word	0x20000030
 80079bc:	20000040 	.word	0x20000040
 80079c0:	20000050 	.word	0x20000050
 80079c4:	20000080 	.word	0x20000080
 80079c8:	200000b0 	.word	0x200000b0
 80079cc:	200000e0 	.word	0x200000e0
 80079d0:	20000100 	.word	0x20000100

080079d4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fa53 	bl	8007e88 <ai_platform_network_get_error>
 80079e2:	4603      	mov	r3, r0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80079f6:	2300      	movs	r3, #0
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	2305      	movs	r3, #5
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2301      	movs	r3, #1
 8007a00:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <ai_network_create+0x28>)
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fc59 	bl	80082bc <ai_platform_network_create>
 8007a0a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	200007d0 	.word	0x200007d0

08007a18 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b096      	sub	sp, #88	; 0x58
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8007a24:	2100      	movs	r1, #0
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff ffe0 	bl	80079ec <ai_network_create>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8007a30:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <ai_network_create_and_init+0x24>
        return err;
 8007a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3a:	e05d      	b.n	8007af8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8007a3c:	f107 0314 	add.w	r3, r7, #20
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 f8dd 	bl	8007c00 <ai_network_data_params_get>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f083 0301 	eor.w	r3, r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff ffbc 	bl	80079d4 <ai_network_get_error>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8007a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a62:	e049      	b.n	8007af8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	657b      	str	r3, [r7, #84]	; 0x54
 8007a6e:	e00e      	b.n	8007a8e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8007a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4413      	add	r3, r2
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	330c      	adds	r3, #12
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f922 	bl	8007ccc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8007a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a90:	461a      	mov	r2, r3
 8007a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a94:	4293      	cmp	r3, r2
 8007a96:	dbeb      	blt.n	8007a70 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8007aa2:	e00e      	b.n	8007ac2 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8007aa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f908 	bl	8007ccc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007abe:	3301      	adds	r3, #1
 8007ac0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ac2:	8b7b      	ldrh	r3, [r7, #26]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	dbeb      	blt.n	8007aa4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f107 0214 	add.w	r2, r7, #20
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f846 	bl	8007b68 <ai_network_init>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f083 0301 	eor.w	r3, r3, #1
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff ff71 	bl	80079d4 <ai_network_get_error>
 8007af2:	4603      	mov	r3, r0
 8007af4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8007af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3758      	adds	r7, #88	; 0x58
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <ai_network_inputs_get+0x2c>)
 8007b12:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a06      	ldr	r2, [pc, #24]	; (8007b30 <ai_network_inputs_get+0x30>)
 8007b18:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa27 	bl	8007f70 <ai_platform_inputs_get>
 8007b22:	4603      	mov	r3, r0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	200007d0 	.word	0x200007d0
 8007b30:	a1c00100 	.word	0xa1c00100

08007b34 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007b44:	4b06      	ldr	r3, [pc, #24]	; (8007b60 <ai_network_outputs_get+0x2c>)
 8007b46:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a06      	ldr	r2, [pc, #24]	; (8007b64 <ai_network_outputs_get+0x30>)
 8007b4c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fae3 	bl	800811c <ai_platform_outputs_get>
 8007b56:	4603      	mov	r3, r0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	200007d0 	.word	0x200007d0
 8007b64:	a1c00100 	.word	0xa1c00100

08007b68 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc77 	bl	8008468 <ai_platform_network_init>
 8007b7a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <ai_network_init+0x1e>
 8007b82:	2300      	movs	r3, #0
 8007b84:	e028      	b.n	8007bd8 <ai_network_init+0x70>

  ai_bool ok = true;
 8007b86:	2301      	movs	r3, #1
 8007b88:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff fe67 	bl	8007860 <network_configure_weights>
 8007b92:	4603      	mov	r3, r0
 8007b94:	461a      	mov	r2, r3
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bf14      	ite	ne
 8007b9e:	2301      	movne	r3, #1
 8007ba0:	2300      	moveq	r3, #0
 8007ba2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff fdea 	bl	8007780 <network_configure_activations>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	7afb      	ldrb	r3, [r7, #11]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bf14      	ite	ne
 8007bb8:	2301      	movne	r3, #1
 8007bba:	2300      	moveq	r3, #0
 8007bbc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd40 	bl	8008644 <ai_platform_network_post_init>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	72fb      	strb	r3, [r7, #11]

  return ok;
 8007bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fdaf 	bl	8008754 <ai_platform_network_process>
 8007bf6:	4603      	mov	r3, r0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <ai_network_data_params_get+0x12>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e016      	b.n	8007c40 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8007c12:	4a0d      	ldr	r2, [pc, #52]	; (8007c48 <ai_network_data_params_get+0x48>)
 8007c14:	f107 0310 	add.w	r3, r7, #16
 8007c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c1c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007c20:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <ai_network_data_params_get+0x4c>)
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c2a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8007c2e:	f107 0210 	add.w	r2, r7, #16
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f903 	bl	8007e44 <ai_platform_bind_network_params>
 8007c3e:	4603      	mov	r3, r0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	0800dce8 	.word	0x0800dce8
 8007c4c:	0800dcf0 	.word	0x0800dcf0

08007c50 <ai_buffer_get_size>:
 8007c50:	b378      	cbz	r0, 8007cb2 <ai_buffer_get_size+0x62>
 8007c52:	b410      	push	{r4}
 8007c54:	6803      	ldr	r3, [r0, #0]
 8007c56:	4a17      	ldr	r2, [pc, #92]	; (8007cb4 <ai_buffer_get_size+0x64>)
 8007c58:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007c5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d01e      	beq.n	8007ca2 <ai_buffer_get_size+0x52>
 8007c64:	6984      	ldr	r4, [r0, #24]
 8007c66:	6862      	ldr	r2, [r4, #4]
 8007c68:	7d03      	ldrb	r3, [r0, #20]
 8007c6a:	6941      	ldr	r1, [r0, #20]
 8007c6c:	f1a3 0301 	sub.w	r3, r3, #1
 8007c70:	fab3 f383 	clz	r3, r3
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8007c7a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8007c7e:	da0b      	bge.n	8007c98 <ai_buffer_get_size+0x48>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d102      	bne.n	8007c8a <ai_buffer_get_size+0x3a>
 8007c84:	2802      	cmp	r0, #2
 8007c86:	d007      	beq.n	8007c98 <ai_buffer_get_size+0x48>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	4298      	cmp	r0, r3
 8007c92:	fb01 f202 	mul.w	r2, r1, r2
 8007c96:	d1f3      	bne.n	8007c80 <ai_buffer_get_size+0x30>
 8007c98:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	2900      	cmp	r1, #0
 8007ca4:	d0de      	beq.n	8007c64 <ai_buffer_get_size+0x14>
 8007ca6:	6984      	ldr	r4, [r0, #24]
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	331f      	adds	r3, #31
 8007cac:	f023 021f 	bic.w	r2, r3, #31
 8007cb0:	e7da      	b.n	8007c68 <ai_buffer_get_size+0x18>
 8007cb2:	4770      	bx	lr
 8007cb4:	000400c0 	.word	0x000400c0

08007cb8 <ai_buffer_array_sane>:
 8007cb8:	b138      	cbz	r0, 8007cca <ai_buffer_array_sane+0x12>
 8007cba:	6843      	ldr	r3, [r0, #4]
 8007cbc:	b123      	cbz	r3, 8007cc8 <ai_buffer_array_sane+0x10>
 8007cbe:	8840      	ldrh	r0, [r0, #2]
 8007cc0:	3800      	subs	r0, #0
 8007cc2:	bf18      	it	ne
 8007cc4:	2001      	movne	r0, #1
 8007cc6:	4770      	bx	lr
 8007cc8:	4618      	mov	r0, r3
 8007cca:	4770      	bx	lr

08007ccc <ai_buffer_array_item_set_address>:
 8007ccc:	b150      	cbz	r0, 8007ce4 <ai_buffer_array_item_set_address+0x18>
 8007cce:	6843      	ldr	r3, [r0, #4]
 8007cd0:	b14b      	cbz	r3, 8007ce6 <ai_buffer_array_item_set_address+0x1a>
 8007cd2:	8840      	ldrh	r0, [r0, #2]
 8007cd4:	b900      	cbnz	r0, 8007cd8 <ai_buffer_array_item_set_address+0xc>
 8007cd6:	4770      	bx	lr
 8007cd8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007cdc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	604a      	str	r2, [r1, #4]
 8007ce4:	4770      	bx	lr
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop

08007cec <_ai_platform_acquire_crc>:
 8007cec:	2001      	movs	r0, #1
 8007cee:	4770      	bx	lr

08007cf0 <_ai_platform_release_crc>:
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop

08007cf4 <ai_platform_get_weights_map>:
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d037      	beq.n	8007d68 <ai_platform_get_weights_map+0x74>
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	b1a0      	cbz	r0, 8007d28 <ai_platform_get_weights_map+0x34>
 8007cfe:	460f      	mov	r7, r1
 8007d00:	b191      	cbz	r1, 8007d28 <ai_platform_get_weights_map+0x34>
 8007d02:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <ai_platform_get_weights_map+0xa4>)
 8007d04:	6810      	ldr	r0, [r2, #0]
 8007d06:	4298      	cmp	r0, r3
 8007d08:	4615      	mov	r5, r2
 8007d0a:	d00f      	beq.n	8007d2c <ai_platform_get_weights_map+0x38>
 8007d0c:	6855      	ldr	r5, [r2, #4]
 8007d0e:	b15d      	cbz	r5, 8007d28 <ai_platform_get_weights_map+0x34>
 8007d10:	682e      	ldr	r6, [r5, #0]
 8007d12:	429e      	cmp	r6, r3
 8007d14:	d02a      	beq.n	8007d6c <ai_platform_get_weights_map+0x78>
 8007d16:	f1a1 0001 	sub.w	r0, r1, #1
 8007d1a:	6025      	str	r5, [r4, #0]
 8007d1c:	fab0 f080 	clz	r0, r0
 8007d20:	0940      	lsrs	r0, r0, #5
 8007d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d24:	42a7      	cmp	r7, r4
 8007d26:	d034      	beq.n	8007d92 <ai_platform_get_weights_map+0x9e>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2c:	1d10      	adds	r0, r2, #4
 8007d2e:	f7ff ffc3 	bl	8007cb8 <ai_buffer_array_sane>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d0f8      	beq.n	8007d28 <ai_platform_get_weights_map+0x34>
 8007d36:	88eb      	ldrh	r3, [r5, #6]
 8007d38:	429f      	cmp	r7, r3
 8007d3a:	d1f5      	bne.n	8007d28 <ai_platform_get_weights_map+0x34>
 8007d3c:	f04f 0e00 	mov.w	lr, #0
 8007d40:	1f23      	subs	r3, r4, #4
 8007d42:	4670      	mov	r0, lr
 8007d44:	68aa      	ldr	r2, [r5, #8]
 8007d46:	eb02 0c0e 	add.w	ip, r2, lr
 8007d4a:	f10e 0e1c 	add.w	lr, lr, #28
 8007d4e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8007d52:	b124      	cbz	r4, 8007d5e <ai_platform_get_weights_map+0x6a>
 8007d54:	3001      	adds	r0, #1
 8007d56:	4287      	cmp	r7, r0
 8007d58:	f843 4f04 	str.w	r4, [r3, #4]!
 8007d5c:	d1f2      	bne.n	8007d44 <ai_platform_get_weights_map+0x50>
 8007d5e:	1a38      	subs	r0, r7, r0
 8007d60:	fab0 f080 	clz	r0, r0
 8007d64:	0940      	lsrs	r0, r0, #5
 8007d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d68:	2000      	movs	r0, #0
 8007d6a:	4770      	bx	lr
 8007d6c:	1f23      	subs	r3, r4, #4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	2400      	movs	r4, #0
 8007d72:	e000      	b.n	8007d76 <ai_platform_get_weights_map+0x82>
 8007d74:	4614      	mov	r4, r2
 8007d76:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007d7a:	42b2      	cmp	r2, r6
 8007d7c:	d0d2      	beq.n	8007d24 <ai_platform_get_weights_map+0x30>
 8007d7e:	f843 2f04 	str.w	r2, [r3, #4]!
 8007d82:	1c62      	adds	r2, r4, #1
 8007d84:	4297      	cmp	r7, r2
 8007d86:	d1f5      	bne.n	8007d74 <ai_platform_get_weights_map+0x80>
 8007d88:	3402      	adds	r4, #2
 8007d8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007d8e:	42b3      	cmp	r3, r6
 8007d90:	d1ca      	bne.n	8007d28 <ai_platform_get_weights_map+0x34>
 8007d92:	2001      	movs	r0, #1
 8007d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d96:	bf00      	nop
 8007d98:	a1facade 	.word	0xa1facade

08007d9c <ai_platform_get_activations_map>:
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d038      	beq.n	8007e12 <ai_platform_get_activations_map+0x76>
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	4604      	mov	r4, r0
 8007da4:	b1a0      	cbz	r0, 8007dd0 <ai_platform_get_activations_map+0x34>
 8007da6:	460f      	mov	r7, r1
 8007da8:	b191      	cbz	r1, 8007dd0 <ai_platform_get_activations_map+0x34>
 8007daa:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <ai_platform_get_activations_map+0xa4>)
 8007dac:	6810      	ldr	r0, [r2, #0]
 8007dae:	4298      	cmp	r0, r3
 8007db0:	4615      	mov	r5, r2
 8007db2:	d00f      	beq.n	8007dd4 <ai_platform_get_activations_map+0x38>
 8007db4:	6a15      	ldr	r5, [r2, #32]
 8007db6:	b15d      	cbz	r5, 8007dd0 <ai_platform_get_activations_map+0x34>
 8007db8:	682e      	ldr	r6, [r5, #0]
 8007dba:	429e      	cmp	r6, r3
 8007dbc:	d02b      	beq.n	8007e16 <ai_platform_get_activations_map+0x7a>
 8007dbe:	f1a1 0001 	sub.w	r0, r1, #1
 8007dc2:	6025      	str	r5, [r4, #0]
 8007dc4:	fab0 f080 	clz	r0, r0
 8007dc8:	0940      	lsrs	r0, r0, #5
 8007dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dcc:	42a7      	cmp	r7, r4
 8007dce:	d035      	beq.n	8007e3c <ai_platform_get_activations_map+0xa0>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd4:	f102 000c 	add.w	r0, r2, #12
 8007dd8:	f7ff ff6e 	bl	8007cb8 <ai_buffer_array_sane>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d0f7      	beq.n	8007dd0 <ai_platform_get_activations_map+0x34>
 8007de0:	89eb      	ldrh	r3, [r5, #14]
 8007de2:	429f      	cmp	r7, r3
 8007de4:	d1f4      	bne.n	8007dd0 <ai_platform_get_activations_map+0x34>
 8007de6:	f04f 0e00 	mov.w	lr, #0
 8007dea:	1f23      	subs	r3, r4, #4
 8007dec:	4670      	mov	r0, lr
 8007dee:	692a      	ldr	r2, [r5, #16]
 8007df0:	eb02 0c0e 	add.w	ip, r2, lr
 8007df4:	f10e 0e1c 	add.w	lr, lr, #28
 8007df8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8007dfc:	b124      	cbz	r4, 8007e08 <ai_platform_get_activations_map+0x6c>
 8007dfe:	3001      	adds	r0, #1
 8007e00:	4287      	cmp	r7, r0
 8007e02:	f843 4f04 	str.w	r4, [r3, #4]!
 8007e06:	d1f2      	bne.n	8007dee <ai_platform_get_activations_map+0x52>
 8007e08:	1a38      	subs	r0, r7, r0
 8007e0a:	fab0 f080 	clz	r0, r0
 8007e0e:	0940      	lsrs	r0, r0, #5
 8007e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e12:	2000      	movs	r0, #0
 8007e14:	4770      	bx	lr
 8007e16:	1f23      	subs	r3, r4, #4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	e000      	b.n	8007e20 <ai_platform_get_activations_map+0x84>
 8007e1e:	4614      	mov	r4, r2
 8007e20:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007e24:	42b2      	cmp	r2, r6
 8007e26:	d0d1      	beq.n	8007dcc <ai_platform_get_activations_map+0x30>
 8007e28:	f843 2f04 	str.w	r2, [r3, #4]!
 8007e2c:	1c62      	adds	r2, r4, #1
 8007e2e:	4297      	cmp	r7, r2
 8007e30:	d1f5      	bne.n	8007e1e <ai_platform_get_activations_map+0x82>
 8007e32:	3402      	adds	r4, #2
 8007e34:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	d1c9      	bne.n	8007dd0 <ai_platform_get_activations_map+0x34>
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e40:	a1facade 	.word	0xa1facade

08007e44 <ai_platform_bind_network_params>:
 8007e44:	b1a0      	cbz	r0, 8007e70 <ai_platform_bind_network_params+0x2c>
 8007e46:	b1b1      	cbz	r1, 8007e76 <ai_platform_bind_network_params+0x32>
 8007e48:	b1c2      	cbz	r2, 8007e7c <ai_platform_bind_network_params+0x38>
 8007e4a:	b410      	push	{r4}
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4c0d      	ldr	r4, [pc, #52]	; (8007e84 <ai_platform_bind_network_params+0x40>)
 8007e50:	f843 4b04 	str.w	r4, [r3], #4
 8007e54:	f100 0c0c 	add.w	ip, r0, #12
 8007e58:	c903      	ldmia	r1, {r0, r1}
 8007e5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e62:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007e66:	2301      	movs	r3, #1
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	4603      	mov	r3, r0
 8007e72:	4618      	mov	r0, r3
 8007e74:	4770      	bx	lr
 8007e76:	460b      	mov	r3, r1
 8007e78:	4618      	mov	r0, r3
 8007e7a:	4770      	bx	lr
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	a1facade 	.word	0xa1facade

08007e88 <ai_platform_network_get_error>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	b1f0      	cbz	r0, 8007eca <ai_platform_network_get_error+0x42>
 8007e8c:	4b2f      	ldr	r3, [pc, #188]	; (8007f4c <ai_platform_network_get_error+0xc4>)
 8007e8e:	6802      	ldr	r2, [r0, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	4604      	mov	r4, r0
 8007e94:	d119      	bne.n	8007eca <ai_platform_network_get_error+0x42>
 8007e96:	f7ff ff29 	bl	8007cec <_ai_platform_acquire_crc>
 8007e9a:	4b2d      	ldr	r3, [pc, #180]	; (8007f50 <ai_platform_network_get_error+0xc8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea6:	d03c      	beq.n	8007f22 <ai_platform_network_get_error+0x9a>
 8007ea8:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <ai_platform_network_get_error+0xcc>)
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007eb0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1fb      	bne.n	8007eb0 <ai_platform_network_get_error+0x28>
 8007eb8:	4b27      	ldr	r3, [pc, #156]	; (8007f58 <ai_platform_network_get_error+0xd0>)
 8007eba:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007ebe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007ec2:	4b26      	ldr	r3, [pc, #152]	; (8007f5c <ai_platform_network_get_error+0xd4>)
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d038      	beq.n	8007f3a <ai_platform_network_get_error+0xb2>
 8007ec8:	e7fe      	b.n	8007ec8 <ai_platform_network_get_error+0x40>
 8007eca:	f7ff ff0f 	bl	8007cec <_ai_platform_acquire_crc>
 8007ece:	4b20      	ldr	r3, [pc, #128]	; (8007f50 <ai_platform_network_get_error+0xc8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eda:	d010      	beq.n	8007efe <ai_platform_network_get_error+0x76>
 8007edc:	4a1d      	ldr	r2, [pc, #116]	; (8007f54 <ai_platform_network_get_error+0xcc>)
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007ee4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1fb      	bne.n	8007ee4 <ai_platform_network_get_error+0x5c>
 8007eec:	4b1a      	ldr	r3, [pc, #104]	; (8007f58 <ai_platform_network_get_error+0xd0>)
 8007eee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007ef2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007ef6:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <ai_platform_network_get_error+0xd4>)
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d00d      	beq.n	8007f18 <ai_platform_network_get_error+0x90>
 8007efc:	e7fe      	b.n	8007efc <ai_platform_network_get_error+0x74>
 8007efe:	4a18      	ldr	r2, [pc, #96]	; (8007f60 <ai_platform_network_get_error+0xd8>)
 8007f00:	2301      	movs	r3, #1
 8007f02:	6093      	str	r3, [r2, #8]
 8007f04:	6893      	ldr	r3, [r2, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1fc      	bne.n	8007f04 <ai_platform_network_get_error+0x7c>
 8007f0a:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <ai_platform_network_get_error+0xd0>)
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	6812      	ldr	r2, [r2, #0]
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <ai_platform_network_get_error+0xd4>)
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d000      	beq.n	8007f18 <ai_platform_network_get_error+0x90>
 8007f16:	e7fe      	b.n	8007f16 <ai_platform_network_get_error+0x8e>
 8007f18:	f7ff feea 	bl	8007cf0 <_ai_platform_release_crc>
 8007f1c:	f241 0010 	movw	r0, #4112	; 0x1010
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	4a0f      	ldr	r2, [pc, #60]	; (8007f60 <ai_platform_network_get_error+0xd8>)
 8007f24:	2301      	movs	r3, #1
 8007f26:	6093      	str	r3, [r2, #8]
 8007f28:	6893      	ldr	r3, [r2, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1fc      	bne.n	8007f28 <ai_platform_network_get_error+0xa0>
 8007f2e:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <ai_platform_network_get_error+0xd0>)
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <ai_platform_network_get_error+0xd4>)
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d107      	bne.n	8007f4a <ai_platform_network_get_error+0xc2>
 8007f3a:	f7ff fed9 	bl	8007cf0 <_ai_platform_release_crc>
 8007f3e:	f104 0010 	add.w	r0, r4, #16
 8007f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f46:	f000 be8d 	b.w	8008c64 <core_get_error>
 8007f4a:	e7fe      	b.n	8007f4a <ai_platform_network_get_error+0xc2>
 8007f4c:	a1c00100 	.word	0xa1c00100
 8007f50:	e0042000 	.word	0xe0042000
 8007f54:	58024000 	.word	0x58024000
 8007f58:	f407a5c2 	.word	0xf407a5c2
 8007f5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007f60:	40023000 	.word	0x40023000

08007f64 <ai_platform_network_set_error>:
 8007f64:	b110      	cbz	r0, 8007f6c <ai_platform_network_set_error+0x8>
 8007f66:	3010      	adds	r0, #16
 8007f68:	f000 be82 	b.w	8008c70 <core_set_error>
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <ai_platform_inputs_get>:
 8007f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	b085      	sub	sp, #20
 8007f76:	9102      	str	r1, [sp, #8]
 8007f78:	b1f0      	cbz	r0, 8007fb8 <ai_platform_inputs_get+0x48>
 8007f7a:	4b62      	ldr	r3, [pc, #392]	; (8008104 <ai_platform_inputs_get+0x194>)
 8007f7c:	6802      	ldr	r2, [r0, #0]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	4607      	mov	r7, r0
 8007f82:	d119      	bne.n	8007fb8 <ai_platform_inputs_get+0x48>
 8007f84:	f7ff feb2 	bl	8007cec <_ai_platform_acquire_crc>
 8007f88:	4b5f      	ldr	r3, [pc, #380]	; (8008108 <ai_platform_inputs_get+0x198>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f94:	d03d      	beq.n	8008012 <ai_platform_inputs_get+0xa2>
 8007f96:	4a5d      	ldr	r2, [pc, #372]	; (800810c <ai_platform_inputs_get+0x19c>)
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1fb      	bne.n	8007f9e <ai_platform_inputs_get+0x2e>
 8007fa6:	4b5a      	ldr	r3, [pc, #360]	; (8008110 <ai_platform_inputs_get+0x1a0>)
 8007fa8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007fac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007fb0:	4b58      	ldr	r3, [pc, #352]	; (8008114 <ai_platform_inputs_get+0x1a4>)
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d039      	beq.n	800802a <ai_platform_inputs_get+0xba>
 8007fb6:	e7fe      	b.n	8007fb6 <ai_platform_inputs_get+0x46>
 8007fb8:	f7ff fe98 	bl	8007cec <_ai_platform_acquire_crc>
 8007fbc:	4b52      	ldr	r3, [pc, #328]	; (8008108 <ai_platform_inputs_get+0x198>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc8:	d010      	beq.n	8007fec <ai_platform_inputs_get+0x7c>
 8007fca:	4a50      	ldr	r2, [pc, #320]	; (800810c <ai_platform_inputs_get+0x19c>)
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007fd2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1fb      	bne.n	8007fd2 <ai_platform_inputs_get+0x62>
 8007fda:	4b4d      	ldr	r3, [pc, #308]	; (8008110 <ai_platform_inputs_get+0x1a0>)
 8007fdc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007fe0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007fe4:	4b4b      	ldr	r3, [pc, #300]	; (8008114 <ai_platform_inputs_get+0x1a4>)
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d00d      	beq.n	8008006 <ai_platform_inputs_get+0x96>
 8007fea:	e7fe      	b.n	8007fea <ai_platform_inputs_get+0x7a>
 8007fec:	4a4a      	ldr	r2, [pc, #296]	; (8008118 <ai_platform_inputs_get+0x1a8>)
 8007fee:	2301      	movs	r3, #1
 8007ff0:	6093      	str	r3, [r2, #8]
 8007ff2:	6893      	ldr	r3, [r2, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1fc      	bne.n	8007ff2 <ai_platform_inputs_get+0x82>
 8007ff8:	4b45      	ldr	r3, [pc, #276]	; (8008110 <ai_platform_inputs_get+0x1a0>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	6812      	ldr	r2, [r2, #0]
 8007ffe:	4b45      	ldr	r3, [pc, #276]	; (8008114 <ai_platform_inputs_get+0x1a4>)
 8008000:	429a      	cmp	r2, r3
 8008002:	d000      	beq.n	8008006 <ai_platform_inputs_get+0x96>
 8008004:	e7fe      	b.n	8008004 <ai_platform_inputs_get+0x94>
 8008006:	f7ff fe73 	bl	8007cf0 <_ai_platform_release_crc>
 800800a:	2000      	movs	r0, #0
 800800c:	b005      	add	sp, #20
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	4a41      	ldr	r2, [pc, #260]	; (8008118 <ai_platform_inputs_get+0x1a8>)
 8008014:	2301      	movs	r3, #1
 8008016:	6093      	str	r3, [r2, #8]
 8008018:	6893      	ldr	r3, [r2, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1fc      	bne.n	8008018 <ai_platform_inputs_get+0xa8>
 800801e:	4b3c      	ldr	r3, [pc, #240]	; (8008110 <ai_platform_inputs_get+0x1a0>)
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	4b3b      	ldr	r3, [pc, #236]	; (8008114 <ai_platform_inputs_get+0x1a4>)
 8008026:	429a      	cmp	r2, r3
 8008028:	d155      	bne.n	80080d6 <ai_platform_inputs_get+0x166>
 800802a:	f7ff fe61 	bl	8007cf0 <_ai_platform_release_crc>
 800802e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d051      	beq.n	80080d8 <ai_platform_inputs_get+0x168>
 8008034:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8008038:	f1ba 0f00 	cmp.w	sl, #0
 800803c:	d04c      	beq.n	80080d8 <ai_platform_inputs_get+0x168>
 800803e:	f04f 0b00 	mov.w	fp, #0
 8008042:	465d      	mov	r5, fp
 8008044:	9703      	str	r7, [sp, #12]
 8008046:	e016      	b.n	8008076 <ai_platform_inputs_get+0x106>
 8008048:	9901      	ldr	r1, [sp, #4]
 800804a:	2301      	movs	r3, #1
 800804c:	507b      	str	r3, [r7, r1]
 800804e:	69b1      	ldr	r1, [r6, #24]
 8008050:	6849      	ldr	r1, [r1, #4]
 8008052:	6121      	str	r1, [r4, #16]
 8008054:	f04f 0301 	mov.w	r3, #1
 8008058:	7523      	strb	r3, [r4, #20]
 800805a:	e9c4 c200 	strd	ip, r2, [r4]
 800805e:	6962      	ldr	r2, [r4, #20]
 8008060:	60a0      	str	r0, [r4, #8]
 8008062:	2300      	movs	r3, #0
 8008064:	f369 221f 	bfi	r2, r9, #8, #24
 8008068:	f8c4 8018 	str.w	r8, [r4, #24]
 800806c:	60e3      	str	r3, [r4, #12]
 800806e:	3501      	adds	r5, #1
 8008070:	f10b 0b1c 	add.w	fp, fp, #28
 8008074:	6162      	str	r2, [r4, #20]
 8008076:	f8ba 3000 	ldrh.w	r3, [sl]
 800807a:	42ab      	cmp	r3, r5
 800807c:	b2aa      	uxth	r2, r5
 800807e:	d93a      	bls.n	80080f6 <ai_platform_inputs_get+0x186>
 8008080:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008084:	00e9      	lsls	r1, r5, #3
 8008086:	9101      	str	r1, [sp, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d034      	beq.n	80080f6 <ai_platform_inputs_get+0x186>
 800808c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8008090:	2e00      	cmp	r6, #0
 8008092:	d030      	beq.n	80080f6 <ai_platform_inputs_get+0x186>
 8008094:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008098:	69b2      	ldr	r2, [r6, #24]
 800809a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800809e:	6810      	ldr	r0, [r2, #0]
 80080a0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80080a4:	68b3      	ldr	r3, [r6, #8]
 80080a6:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80080aa:	f002 fb49 	bl	800a740 <ai_array_to_buffer_fmt>
 80080ae:	69b1      	ldr	r1, [r6, #24]
 80080b0:	4684      	mov	ip, r0
 80080b2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80080b6:	688a      	ldr	r2, [r1, #8]
 80080b8:	445c      	add	r4, fp
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d0c8      	beq.n	8008050 <ai_platform_inputs_get+0xe0>
 80080be:	2100      	movs	r1, #0
 80080c0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80080c4:	6831      	ldr	r1, [r6, #0]
 80080c6:	6041      	str	r1, [r0, #4]
 80080c8:	b111      	cbz	r1, 80080d0 <ai_platform_inputs_get+0x160>
 80080ca:	8849      	ldrh	r1, [r1, #2]
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d1bb      	bne.n	8008048 <ai_platform_inputs_get+0xd8>
 80080d0:	69b1      	ldr	r1, [r6, #24]
 80080d2:	2000      	movs	r0, #0
 80080d4:	e7bc      	b.n	8008050 <ai_platform_inputs_get+0xe0>
 80080d6:	e7fe      	b.n	80080d6 <ai_platform_inputs_get+0x166>
 80080d8:	2218      	movs	r2, #24
 80080da:	2111      	movs	r1, #17
 80080dc:	f107 0010 	add.w	r0, r7, #16
 80080e0:	f000 fdc6 	bl	8008c70 <core_set_error>
 80080e4:	2200      	movs	r2, #0
 80080e6:	4610      	mov	r0, r2
 80080e8:	9b02      	ldr	r3, [sp, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d08e      	beq.n	800800c <ai_platform_inputs_get+0x9c>
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	b005      	add	sp, #20
 80080f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f6:	9f03      	ldr	r7, [sp, #12]
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	d0ed      	beq.n	80080d8 <ai_platform_inputs_get+0x168>
 80080fc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008100:	6858      	ldr	r0, [r3, #4]
 8008102:	e7f1      	b.n	80080e8 <ai_platform_inputs_get+0x178>
 8008104:	a1c00100 	.word	0xa1c00100
 8008108:	e0042000 	.word	0xe0042000
 800810c:	58024000 	.word	0x58024000
 8008110:	f407a5c2 	.word	0xf407a5c2
 8008114:	b5e8b5cd 	.word	0xb5e8b5cd
 8008118:	40023000 	.word	0x40023000

0800811c <ai_platform_outputs_get>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	b085      	sub	sp, #20
 8008122:	9102      	str	r1, [sp, #8]
 8008124:	b1f0      	cbz	r0, 8008164 <ai_platform_outputs_get+0x48>
 8008126:	4b5f      	ldr	r3, [pc, #380]	; (80082a4 <ai_platform_outputs_get+0x188>)
 8008128:	6802      	ldr	r2, [r0, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	4607      	mov	r7, r0
 800812e:	d119      	bne.n	8008164 <ai_platform_outputs_get+0x48>
 8008130:	f7ff fddc 	bl	8007cec <_ai_platform_acquire_crc>
 8008134:	4b5c      	ldr	r3, [pc, #368]	; (80082a8 <ai_platform_outputs_get+0x18c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800813c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008140:	d03d      	beq.n	80081be <ai_platform_outputs_get+0xa2>
 8008142:	4a5a      	ldr	r2, [pc, #360]	; (80082ac <ai_platform_outputs_get+0x190>)
 8008144:	2301      	movs	r3, #1
 8008146:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800814a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1fb      	bne.n	800814a <ai_platform_outputs_get+0x2e>
 8008152:	4b57      	ldr	r3, [pc, #348]	; (80082b0 <ai_platform_outputs_get+0x194>)
 8008154:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008158:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800815c:	4b55      	ldr	r3, [pc, #340]	; (80082b4 <ai_platform_outputs_get+0x198>)
 800815e:	429a      	cmp	r2, r3
 8008160:	d039      	beq.n	80081d6 <ai_platform_outputs_get+0xba>
 8008162:	e7fe      	b.n	8008162 <ai_platform_outputs_get+0x46>
 8008164:	f7ff fdc2 	bl	8007cec <_ai_platform_acquire_crc>
 8008168:	4b4f      	ldr	r3, [pc, #316]	; (80082a8 <ai_platform_outputs_get+0x18c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008174:	d010      	beq.n	8008198 <ai_platform_outputs_get+0x7c>
 8008176:	4a4d      	ldr	r2, [pc, #308]	; (80082ac <ai_platform_outputs_get+0x190>)
 8008178:	2301      	movs	r3, #1
 800817a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800817e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1fb      	bne.n	800817e <ai_platform_outputs_get+0x62>
 8008186:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <ai_platform_outputs_get+0x194>)
 8008188:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800818c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008190:	4b48      	ldr	r3, [pc, #288]	; (80082b4 <ai_platform_outputs_get+0x198>)
 8008192:	429a      	cmp	r2, r3
 8008194:	d00d      	beq.n	80081b2 <ai_platform_outputs_get+0x96>
 8008196:	e7fe      	b.n	8008196 <ai_platform_outputs_get+0x7a>
 8008198:	4a47      	ldr	r2, [pc, #284]	; (80082b8 <ai_platform_outputs_get+0x19c>)
 800819a:	2301      	movs	r3, #1
 800819c:	6093      	str	r3, [r2, #8]
 800819e:	6893      	ldr	r3, [r2, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1fc      	bne.n	800819e <ai_platform_outputs_get+0x82>
 80081a4:	4b42      	ldr	r3, [pc, #264]	; (80082b0 <ai_platform_outputs_get+0x194>)
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	4b42      	ldr	r3, [pc, #264]	; (80082b4 <ai_platform_outputs_get+0x198>)
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d000      	beq.n	80081b2 <ai_platform_outputs_get+0x96>
 80081b0:	e7fe      	b.n	80081b0 <ai_platform_outputs_get+0x94>
 80081b2:	f7ff fd9d 	bl	8007cf0 <_ai_platform_release_crc>
 80081b6:	2000      	movs	r0, #0
 80081b8:	b005      	add	sp, #20
 80081ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081be:	4a3e      	ldr	r2, [pc, #248]	; (80082b8 <ai_platform_outputs_get+0x19c>)
 80081c0:	2301      	movs	r3, #1
 80081c2:	6093      	str	r3, [r2, #8]
 80081c4:	6893      	ldr	r3, [r2, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1fc      	bne.n	80081c4 <ai_platform_outputs_get+0xa8>
 80081ca:	4b39      	ldr	r3, [pc, #228]	; (80082b0 <ai_platform_outputs_get+0x194>)
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	4b38      	ldr	r3, [pc, #224]	; (80082b4 <ai_platform_outputs_get+0x198>)
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d150      	bne.n	8008278 <ai_platform_outputs_get+0x15c>
 80081d6:	f7ff fd8b 	bl	8007cf0 <_ai_platform_release_crc>
 80081da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d958      	bls.n	8008292 <ai_platform_outputs_get+0x176>
 80081e0:	f04f 0b00 	mov.w	fp, #0
 80081e4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80081e8:	9703      	str	r7, [sp, #12]
 80081ea:	465d      	mov	r5, fp
 80081ec:	e016      	b.n	800821c <ai_platform_outputs_get+0x100>
 80081ee:	9901      	ldr	r1, [sp, #4]
 80081f0:	2301      	movs	r3, #1
 80081f2:	507b      	str	r3, [r7, r1]
 80081f4:	69b1      	ldr	r1, [r6, #24]
 80081f6:	6849      	ldr	r1, [r1, #4]
 80081f8:	6121      	str	r1, [r4, #16]
 80081fa:	f04f 0301 	mov.w	r3, #1
 80081fe:	7523      	strb	r3, [r4, #20]
 8008200:	e9c4 c200 	strd	ip, r2, [r4]
 8008204:	6962      	ldr	r2, [r4, #20]
 8008206:	60a0      	str	r0, [r4, #8]
 8008208:	2300      	movs	r3, #0
 800820a:	f369 221f 	bfi	r2, r9, #8, #24
 800820e:	f8c4 8018 	str.w	r8, [r4, #24]
 8008212:	60e3      	str	r3, [r4, #12]
 8008214:	3501      	adds	r5, #1
 8008216:	f10b 0b1c 	add.w	fp, fp, #28
 800821a:	6162      	str	r2, [r4, #20]
 800821c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008220:	42ab      	cmp	r3, r5
 8008222:	b2aa      	uxth	r2, r5
 8008224:	d929      	bls.n	800827a <ai_platform_outputs_get+0x15e>
 8008226:	f8da 3010 	ldr.w	r3, [sl, #16]
 800822a:	00e9      	lsls	r1, r5, #3
 800822c:	9101      	str	r1, [sp, #4]
 800822e:	b323      	cbz	r3, 800827a <ai_platform_outputs_get+0x15e>
 8008230:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8008234:	b30e      	cbz	r6, 800827a <ai_platform_outputs_get+0x15e>
 8008236:	f8da 3014 	ldr.w	r3, [sl, #20]
 800823a:	69b2      	ldr	r2, [r6, #24]
 800823c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8008240:	6810      	ldr	r0, [r2, #0]
 8008242:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8008246:	68b3      	ldr	r3, [r6, #8]
 8008248:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800824c:	f002 fa78 	bl	800a740 <ai_array_to_buffer_fmt>
 8008250:	69b1      	ldr	r1, [r6, #24]
 8008252:	4684      	mov	ip, r0
 8008254:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8008258:	688a      	ldr	r2, [r1, #8]
 800825a:	445c      	add	r4, fp
 800825c:	2800      	cmp	r0, #0
 800825e:	d0ca      	beq.n	80081f6 <ai_platform_outputs_get+0xda>
 8008260:	2100      	movs	r1, #0
 8008262:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8008266:	6831      	ldr	r1, [r6, #0]
 8008268:	6041      	str	r1, [r0, #4]
 800826a:	b111      	cbz	r1, 8008272 <ai_platform_outputs_get+0x156>
 800826c:	8849      	ldrh	r1, [r1, #2]
 800826e:	2900      	cmp	r1, #0
 8008270:	d1bd      	bne.n	80081ee <ai_platform_outputs_get+0xd2>
 8008272:	69b1      	ldr	r1, [r6, #24]
 8008274:	2000      	movs	r0, #0
 8008276:	e7be      	b.n	80081f6 <ai_platform_outputs_get+0xda>
 8008278:	e7fe      	b.n	8008278 <ai_platform_outputs_get+0x15c>
 800827a:	9f03      	ldr	r7, [sp, #12]
 800827c:	b14a      	cbz	r2, 8008292 <ai_platform_outputs_get+0x176>
 800827e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008282:	6858      	ldr	r0, [r3, #4]
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d096      	beq.n	80081b8 <ai_platform_outputs_get+0x9c>
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	b005      	add	sp, #20
 800828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008292:	2218      	movs	r2, #24
 8008294:	2111      	movs	r1, #17
 8008296:	f107 0010 	add.w	r0, r7, #16
 800829a:	f000 fce9 	bl	8008c70 <core_set_error>
 800829e:	2200      	movs	r2, #0
 80082a0:	4610      	mov	r0, r2
 80082a2:	e7ef      	b.n	8008284 <ai_platform_outputs_get+0x168>
 80082a4:	a1c00100 	.word	0xa1c00100
 80082a8:	e0042000 	.word	0xe0042000
 80082ac:	58024000 	.word	0x58024000
 80082b0:	f407a5c2 	.word	0xf407a5c2
 80082b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80082b8:	40023000 	.word	0x40023000

080082bc <ai_platform_network_create>:
 80082bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082c0:	b083      	sub	sp, #12
 80082c2:	4606      	mov	r6, r0
 80082c4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80082c8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80082cc:	4615      	mov	r5, r2
 80082ce:	461f      	mov	r7, r3
 80082d0:	f7ff fd0c 	bl	8007cec <_ai_platform_acquire_crc>
 80082d4:	b188      	cbz	r0, 80082fa <ai_platform_network_create+0x3e>
 80082d6:	4a5d      	ldr	r2, [pc, #372]	; (800844c <ai_platform_network_create+0x190>)
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80082de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80082e2:	4603      	mov	r3, r0
 80082e4:	d00e      	beq.n	8008304 <ai_platform_network_create+0x48>
 80082e6:	4a5a      	ldr	r2, [pc, #360]	; (8008450 <ai_platform_network_create+0x194>)
 80082e8:	2118      	movs	r1, #24
 80082ea:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80082ee:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80082f2:	2918      	cmp	r1, #24
 80082f4:	d018      	beq.n	8008328 <ai_platform_network_create+0x6c>
 80082f6:	f7ff fcfb 	bl	8007cf0 <_ai_platform_release_crc>
 80082fa:	f244 1033 	movw	r0, #16691	; 0x4133
 80082fe:	b003      	add	sp, #12
 8008300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008304:	4a53      	ldr	r2, [pc, #332]	; (8008454 <ai_platform_network_create+0x198>)
 8008306:	2101      	movs	r1, #1
 8008308:	6091      	str	r1, [r2, #8]
 800830a:	2114      	movs	r1, #20
 800830c:	e001      	b.n	8008312 <ai_platform_network_create+0x56>
 800830e:	3901      	subs	r1, #1
 8008310:	d002      	beq.n	8008318 <ai_platform_network_create+0x5c>
 8008312:	6894      	ldr	r4, [r2, #8]
 8008314:	2c00      	cmp	r4, #0
 8008316:	d1fa      	bne.n	800830e <ai_platform_network_create+0x52>
 8008318:	4a4e      	ldr	r2, [pc, #312]	; (8008454 <ai_platform_network_create+0x198>)
 800831a:	6891      	ldr	r1, [r2, #8]
 800831c:	b911      	cbnz	r1, 8008324 <ai_platform_network_create+0x68>
 800831e:	6812      	ldr	r2, [r2, #0]
 8008320:	3201      	adds	r2, #1
 8008322:	d008      	beq.n	8008336 <ai_platform_network_create+0x7a>
 8008324:	4618      	mov	r0, r3
 8008326:	e7e6      	b.n	80082f6 <ai_platform_network_create+0x3a>
 8008328:	2101      	movs	r1, #1
 800832a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800832e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8008332:	2900      	cmp	r1, #0
 8008334:	d1fb      	bne.n	800832e <ai_platform_network_create+0x72>
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fcda 	bl	8007cf0 <_ai_platform_release_crc>
 800833c:	f7ff fcd6 	bl	8007cec <_ai_platform_acquire_crc>
 8008340:	4b42      	ldr	r3, [pc, #264]	; (800844c <ai_platform_network_create+0x190>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800834c:	d010      	beq.n	8008370 <ai_platform_network_create+0xb4>
 800834e:	4b40      	ldr	r3, [pc, #256]	; (8008450 <ai_platform_network_create+0x194>)
 8008350:	2201      	movs	r2, #1
 8008352:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008356:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800835a:	2900      	cmp	r1, #0
 800835c:	d1fb      	bne.n	8008356 <ai_platform_network_create+0x9a>
 800835e:	4a3e      	ldr	r2, [pc, #248]	; (8008458 <ai_platform_network_create+0x19c>)
 8008360:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008364:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008368:	4b3c      	ldr	r3, [pc, #240]	; (800845c <ai_platform_network_create+0x1a0>)
 800836a:	429a      	cmp	r2, r3
 800836c:	d00c      	beq.n	8008388 <ai_platform_network_create+0xcc>
 800836e:	e7fe      	b.n	800836e <ai_platform_network_create+0xb2>
 8008370:	4a38      	ldr	r2, [pc, #224]	; (8008454 <ai_platform_network_create+0x198>)
 8008372:	2301      	movs	r3, #1
 8008374:	6093      	str	r3, [r2, #8]
 8008376:	6893      	ldr	r3, [r2, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1fc      	bne.n	8008376 <ai_platform_network_create+0xba>
 800837c:	4b36      	ldr	r3, [pc, #216]	; (8008458 <ai_platform_network_create+0x19c>)
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	4b36      	ldr	r3, [pc, #216]	; (800845c <ai_platform_network_create+0x1a0>)
 8008384:	429a      	cmp	r2, r3
 8008386:	d122      	bne.n	80083ce <ai_platform_network_create+0x112>
 8008388:	f7ff fcb2 	bl	8007cf0 <_ai_platform_release_crc>
 800838c:	b38e      	cbz	r6, 80083f2 <ai_platform_network_create+0x136>
 800838e:	4b34      	ldr	r3, [pc, #208]	; (8008460 <ai_platform_network_create+0x1a4>)
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	6035      	str	r5, [r6, #0]
 8008394:	f000 fc64 	bl	8008c60 <core_init>
 8008398:	b1d0      	cbz	r0, 80083d0 <ai_platform_network_create+0x114>
 800839a:	f7ff fca7 	bl	8007cec <_ai_platform_acquire_crc>
 800839e:	4b2b      	ldr	r3, [pc, #172]	; (800844c <ai_platform_network_create+0x190>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083aa:	d025      	beq.n	80083f8 <ai_platform_network_create+0x13c>
 80083ac:	4a28      	ldr	r2, [pc, #160]	; (8008450 <ai_platform_network_create+0x194>)
 80083ae:	2301      	movs	r3, #1
 80083b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80083b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1fb      	bne.n	80083b4 <ai_platform_network_create+0xf8>
 80083bc:	4b26      	ldr	r3, [pc, #152]	; (8008458 <ai_platform_network_create+0x19c>)
 80083be:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80083c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80083c6:	4b25      	ldr	r3, [pc, #148]	; (800845c <ai_platform_network_create+0x1a0>)
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d022      	beq.n	8008412 <ai_platform_network_create+0x156>
 80083cc:	e7fe      	b.n	80083cc <ai_platform_network_create+0x110>
 80083ce:	e7fe      	b.n	80083ce <ai_platform_network_create+0x112>
 80083d0:	2430      	movs	r4, #48	; 0x30
 80083d2:	2300      	movs	r3, #0
 80083d4:	6033      	str	r3, [r6, #0]
 80083d6:	2610      	movs	r6, #16
 80083d8:	464a      	mov	r2, r9
 80083da:	4641      	mov	r1, r8
 80083dc:	4638      	mov	r0, r7
 80083de:	f002 f991 	bl	800a704 <ai_version_get>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2000      	movs	r0, #0
 80083e6:	f364 0007 	bfi	r0, r4, #0, #8
 80083ea:	64ab      	str	r3, [r5, #72]	; 0x48
 80083ec:	f366 201f 	bfi	r0, r6, #8, #24
 80083f0:	e785      	b.n	80082fe <ai_platform_network_create+0x42>
 80083f2:	f241 0010 	movw	r0, #4112	; 0x1010
 80083f6:	e782      	b.n	80082fe <ai_platform_network_create+0x42>
 80083f8:	4a16      	ldr	r2, [pc, #88]	; (8008454 <ai_platform_network_create+0x198>)
 80083fa:	2301      	movs	r3, #1
 80083fc:	6093      	str	r3, [r2, #8]
 80083fe:	6893      	ldr	r3, [r2, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1fc      	bne.n	80083fe <ai_platform_network_create+0x142>
 8008404:	4b14      	ldr	r3, [pc, #80]	; (8008458 <ai_platform_network_create+0x19c>)
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <ai_platform_network_create+0x1a0>)
 800840c:	429a      	cmp	r2, r3
 800840e:	d000      	beq.n	8008412 <ai_platform_network_create+0x156>
 8008410:	e7fe      	b.n	8008410 <ai_platform_network_create+0x154>
 8008412:	f7ff fc6d 	bl	8007cf0 <_ai_platform_release_crc>
 8008416:	2200      	movs	r2, #0
 8008418:	4641      	mov	r1, r8
 800841a:	4638      	mov	r0, r7
 800841c:	f002 f972 	bl	800a704 <ai_version_get>
 8008420:	2200      	movs	r2, #0
 8008422:	4604      	mov	r4, r0
 8008424:	2105      	movs	r1, #5
 8008426:	2001      	movs	r0, #1
 8008428:	f002 f96c 	bl	800a704 <ai_version_get>
 800842c:	4284      	cmp	r4, r0
 800842e:	d001      	beq.n	8008434 <ai_platform_network_create+0x178>
 8008430:	2401      	movs	r4, #1
 8008432:	e7ce      	b.n	80083d2 <ai_platform_network_create+0x116>
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <ai_platform_network_create+0x1a8>)
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	a801      	add	r0, sp, #4
 800843a:	f001 ffa9 	bl	800a390 <ai_check_custom_types>
 800843e:	b110      	cbz	r0, 8008446 <ai_platform_network_create+0x18a>
 8008440:	2600      	movs	r6, #0
 8008442:	4634      	mov	r4, r6
 8008444:	e7c8      	b.n	80083d8 <ai_platform_network_create+0x11c>
 8008446:	2402      	movs	r4, #2
 8008448:	e7c3      	b.n	80083d2 <ai_platform_network_create+0x116>
 800844a:	bf00      	nop
 800844c:	e0042000 	.word	0xe0042000
 8008450:	58024000 	.word	0x58024000
 8008454:	40023000 	.word	0x40023000
 8008458:	f407a5c2 	.word	0xf407a5c2
 800845c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008460:	a1c00100 	.word	0xa1c00100
 8008464:	84048403 	.word	0x84048403

08008468 <ai_platform_network_init>:
 8008468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800846c:	b1f8      	cbz	r0, 80084ae <ai_platform_network_init+0x46>
 800846e:	4b6e      	ldr	r3, [pc, #440]	; (8008628 <ai_platform_network_init+0x1c0>)
 8008470:	6802      	ldr	r2, [r0, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	4604      	mov	r4, r0
 8008476:	d11a      	bne.n	80084ae <ai_platform_network_init+0x46>
 8008478:	460e      	mov	r6, r1
 800847a:	f7ff fc37 	bl	8007cec <_ai_platform_acquire_crc>
 800847e:	4b6b      	ldr	r3, [pc, #428]	; (800862c <ai_platform_network_init+0x1c4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848a:	d03d      	beq.n	8008508 <ai_platform_network_init+0xa0>
 800848c:	4a68      	ldr	r2, [pc, #416]	; (8008630 <ai_platform_network_init+0x1c8>)
 800848e:	2301      	movs	r3, #1
 8008490:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008494:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1fb      	bne.n	8008494 <ai_platform_network_init+0x2c>
 800849c:	4b65      	ldr	r3, [pc, #404]	; (8008634 <ai_platform_network_init+0x1cc>)
 800849e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80084a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80084a6:	4b64      	ldr	r3, [pc, #400]	; (8008638 <ai_platform_network_init+0x1d0>)
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d039      	beq.n	8008520 <ai_platform_network_init+0xb8>
 80084ac:	e7fe      	b.n	80084ac <ai_platform_network_init+0x44>
 80084ae:	f7ff fc1d 	bl	8007cec <_ai_platform_acquire_crc>
 80084b2:	4b5e      	ldr	r3, [pc, #376]	; (800862c <ai_platform_network_init+0x1c4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084be:	d010      	beq.n	80084e2 <ai_platform_network_init+0x7a>
 80084c0:	4a5b      	ldr	r2, [pc, #364]	; (8008630 <ai_platform_network_init+0x1c8>)
 80084c2:	2301      	movs	r3, #1
 80084c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80084c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1fb      	bne.n	80084c8 <ai_platform_network_init+0x60>
 80084d0:	4b58      	ldr	r3, [pc, #352]	; (8008634 <ai_platform_network_init+0x1cc>)
 80084d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80084d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80084da:	4b57      	ldr	r3, [pc, #348]	; (8008638 <ai_platform_network_init+0x1d0>)
 80084dc:	429a      	cmp	r2, r3
 80084de:	d00d      	beq.n	80084fc <ai_platform_network_init+0x94>
 80084e0:	e7fe      	b.n	80084e0 <ai_platform_network_init+0x78>
 80084e2:	4a56      	ldr	r2, [pc, #344]	; (800863c <ai_platform_network_init+0x1d4>)
 80084e4:	2301      	movs	r3, #1
 80084e6:	6093      	str	r3, [r2, #8]
 80084e8:	6893      	ldr	r3, [r2, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1fc      	bne.n	80084e8 <ai_platform_network_init+0x80>
 80084ee:	4b51      	ldr	r3, [pc, #324]	; (8008634 <ai_platform_network_init+0x1cc>)
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	4b50      	ldr	r3, [pc, #320]	; (8008638 <ai_platform_network_init+0x1d0>)
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d000      	beq.n	80084fc <ai_platform_network_init+0x94>
 80084fa:	e7fe      	b.n	80084fa <ai_platform_network_init+0x92>
 80084fc:	f7ff fbf8 	bl	8007cf0 <_ai_platform_release_crc>
 8008500:	2600      	movs	r6, #0
 8008502:	4630      	mov	r0, r6
 8008504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008508:	4a4c      	ldr	r2, [pc, #304]	; (800863c <ai_platform_network_init+0x1d4>)
 800850a:	2301      	movs	r3, #1
 800850c:	6093      	str	r3, [r2, #8]
 800850e:	6893      	ldr	r3, [r2, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1fc      	bne.n	800850e <ai_platform_network_init+0xa6>
 8008514:	4b47      	ldr	r3, [pc, #284]	; (8008634 <ai_platform_network_init+0x1cc>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	4b47      	ldr	r3, [pc, #284]	; (8008638 <ai_platform_network_init+0x1d0>)
 800851c:	429a      	cmp	r2, r3
 800851e:	d11c      	bne.n	800855a <ai_platform_network_init+0xf2>
 8008520:	f7ff fbe6 	bl	8007cf0 <_ai_platform_release_crc>
 8008524:	2e00      	cmp	r6, #0
 8008526:	d06f      	beq.n	8008608 <ai_platform_network_init+0x1a0>
 8008528:	4b45      	ldr	r3, [pc, #276]	; (8008640 <ai_platform_network_init+0x1d8>)
 800852a:	6832      	ldr	r2, [r6, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d115      	bne.n	800855c <ai_platform_network_init+0xf4>
 8008530:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8008534:	6933      	ldr	r3, [r6, #16]
 8008536:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800853a:	89f7      	ldrh	r7, [r6, #14]
 800853c:	62a3      	str	r3, [r4, #40]	; 0x28
 800853e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8008542:	2303      	movs	r3, #3
 8008544:	84e7      	strh	r7, [r4, #38]	; 0x26
 8008546:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800854a:	60e3      	str	r3, [r4, #12]
 800854c:	4620      	mov	r0, r4
 800854e:	4626      	mov	r6, r4
 8008550:	f001 ff48 	bl	800a3e4 <ai_layers_init_all>
 8008554:	4630      	mov	r0, r6
 8008556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855a:	e7fe      	b.n	800855a <ai_platform_network_init+0xf2>
 800855c:	2101      	movs	r1, #1
 800855e:	4630      	mov	r0, r6
 8008560:	4635      	mov	r5, r6
 8008562:	6876      	ldr	r6, [r6, #4]
 8008564:	f7ff fb74 	bl	8007c50 <ai_buffer_get_size>
 8008568:	f105 081c 	add.w	r8, r5, #28
 800856c:	4681      	mov	r9, r0
 800856e:	2101      	movs	r1, #1
 8008570:	4640      	mov	r0, r8
 8008572:	6a2f      	ldr	r7, [r5, #32]
 8008574:	f7ff fb6c 	bl	8007c50 <ai_buffer_get_size>
 8008578:	f1b9 0f00 	cmp.w	r9, #0
 800857c:	d025      	beq.n	80085ca <ai_platform_network_init+0x162>
 800857e:	2201      	movs	r2, #1
 8008580:	4696      	mov	lr, r2
 8008582:	bb30      	cbnz	r0, 80085d2 <ai_platform_network_init+0x16a>
 8008584:	4680      	mov	r8, r0
 8008586:	4607      	mov	r7, r0
 8008588:	b376      	cbz	r6, 80085e8 <ai_platform_network_init+0x180>
 800858a:	8be3      	ldrh	r3, [r4, #30]
 800858c:	4573      	cmp	r3, lr
 800858e:	d323      	bcc.n	80085d8 <ai_platform_network_init+0x170>
 8008590:	b142      	cbz	r2, 80085a4 <ai_platform_network_init+0x13c>
 8008592:	46ac      	mov	ip, r5
 8008594:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008598:	6a25      	ldr	r5, [r4, #32]
 800859a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800859c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80085a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80085a4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80085a6:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80085aa:	2600      	movs	r6, #0
 80085ac:	42bb      	cmp	r3, r7
 80085ae:	83a6      	strh	r6, [r4, #28]
 80085b0:	d323      	bcc.n	80085fa <ai_platform_network_init+0x192>
 80085b2:	b37f      	cbz	r7, 8008614 <ai_platform_network_init+0x1ac>
 80085b4:	46c4      	mov	ip, r8
 80085b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80085ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80085bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085be:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80085c2:	46b6      	mov	lr, r6
 80085c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80085c8:	e7bb      	b.n	8008542 <ai_platform_network_init+0xda>
 80085ca:	464a      	mov	r2, r9
 80085cc:	46ce      	mov	lr, r9
 80085ce:	464d      	mov	r5, r9
 80085d0:	e7d7      	b.n	8008582 <ai_platform_network_init+0x11a>
 80085d2:	b30f      	cbz	r7, 8008618 <ai_platform_network_init+0x1b0>
 80085d4:	2701      	movs	r7, #1
 80085d6:	e7d7      	b.n	8008588 <ai_platform_network_init+0x120>
 80085d8:	2212      	movs	r2, #18
 80085da:	2116      	movs	r1, #22
 80085dc:	f104 0010 	add.w	r0, r4, #16
 80085e0:	f000 fb46 	bl	8008c70 <core_set_error>
 80085e4:	2600      	movs	r6, #0
 80085e6:	e78c      	b.n	8008502 <ai_platform_network_init+0x9a>
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	d0cd      	beq.n	800858a <ai_platform_network_init+0x122>
 80085ee:	2110      	movs	r1, #16
 80085f0:	2212      	movs	r2, #18
 80085f2:	1860      	adds	r0, r4, r1
 80085f4:	f000 fb3c 	bl	8008c70 <core_set_error>
 80085f8:	e783      	b.n	8008502 <ai_platform_network_init+0x9a>
 80085fa:	2213      	movs	r2, #19
 80085fc:	2116      	movs	r1, #22
 80085fe:	f104 0010 	add.w	r0, r4, #16
 8008602:	f000 fb35 	bl	8008c70 <core_set_error>
 8008606:	e77c      	b.n	8008502 <ai_platform_network_init+0x9a>
 8008608:	2110      	movs	r1, #16
 800860a:	2211      	movs	r2, #17
 800860c:	1860      	adds	r0, r4, r1
 800860e:	f000 fb2f 	bl	8008c70 <core_set_error>
 8008612:	e776      	b.n	8008502 <ai_platform_network_init+0x9a>
 8008614:	46be      	mov	lr, r7
 8008616:	e794      	b.n	8008542 <ai_platform_network_init+0xda>
 8008618:	2110      	movs	r1, #16
 800861a:	2213      	movs	r2, #19
 800861c:	1860      	adds	r0, r4, r1
 800861e:	f000 fb27 	bl	8008c70 <core_set_error>
 8008622:	463e      	mov	r6, r7
 8008624:	e76d      	b.n	8008502 <ai_platform_network_init+0x9a>
 8008626:	bf00      	nop
 8008628:	a1c00100 	.word	0xa1c00100
 800862c:	e0042000 	.word	0xe0042000
 8008630:	58024000 	.word	0x58024000
 8008634:	f407a5c2 	.word	0xf407a5c2
 8008638:	b5e8b5cd 	.word	0xb5e8b5cd
 800863c:	40023000 	.word	0x40023000
 8008640:	a1facade 	.word	0xa1facade

08008644 <ai_platform_network_post_init>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	b1f0      	cbz	r0, 8008686 <ai_platform_network_post_init+0x42>
 8008648:	4b3c      	ldr	r3, [pc, #240]	; (800873c <ai_platform_network_post_init+0xf8>)
 800864a:	6802      	ldr	r2, [r0, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	4604      	mov	r4, r0
 8008650:	d119      	bne.n	8008686 <ai_platform_network_post_init+0x42>
 8008652:	f7ff fb4b 	bl	8007cec <_ai_platform_acquire_crc>
 8008656:	4b3a      	ldr	r3, [pc, #232]	; (8008740 <ai_platform_network_post_init+0xfc>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800865e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008662:	d03b      	beq.n	80086dc <ai_platform_network_post_init+0x98>
 8008664:	4a37      	ldr	r2, [pc, #220]	; (8008744 <ai_platform_network_post_init+0x100>)
 8008666:	2301      	movs	r3, #1
 8008668:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800866c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1fb      	bne.n	800866c <ai_platform_network_post_init+0x28>
 8008674:	4b34      	ldr	r3, [pc, #208]	; (8008748 <ai_platform_network_post_init+0x104>)
 8008676:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800867a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800867e:	4b33      	ldr	r3, [pc, #204]	; (800874c <ai_platform_network_post_init+0x108>)
 8008680:	429a      	cmp	r2, r3
 8008682:	d037      	beq.n	80086f4 <ai_platform_network_post_init+0xb0>
 8008684:	e7fe      	b.n	8008684 <ai_platform_network_post_init+0x40>
 8008686:	f7ff fb31 	bl	8007cec <_ai_platform_acquire_crc>
 800868a:	4b2d      	ldr	r3, [pc, #180]	; (8008740 <ai_platform_network_post_init+0xfc>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008696:	d010      	beq.n	80086ba <ai_platform_network_post_init+0x76>
 8008698:	4a2a      	ldr	r2, [pc, #168]	; (8008744 <ai_platform_network_post_init+0x100>)
 800869a:	2301      	movs	r3, #1
 800869c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80086a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1fb      	bne.n	80086a0 <ai_platform_network_post_init+0x5c>
 80086a8:	4b27      	ldr	r3, [pc, #156]	; (8008748 <ai_platform_network_post_init+0x104>)
 80086aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80086ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80086b2:	4b26      	ldr	r3, [pc, #152]	; (800874c <ai_platform_network_post_init+0x108>)
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d00d      	beq.n	80086d4 <ai_platform_network_post_init+0x90>
 80086b8:	e7fe      	b.n	80086b8 <ai_platform_network_post_init+0x74>
 80086ba:	4a25      	ldr	r2, [pc, #148]	; (8008750 <ai_platform_network_post_init+0x10c>)
 80086bc:	2301      	movs	r3, #1
 80086be:	6093      	str	r3, [r2, #8]
 80086c0:	6893      	ldr	r3, [r2, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1fc      	bne.n	80086c0 <ai_platform_network_post_init+0x7c>
 80086c6:	4b20      	ldr	r3, [pc, #128]	; (8008748 <ai_platform_network_post_init+0x104>)
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	4b1f      	ldr	r3, [pc, #124]	; (800874c <ai_platform_network_post_init+0x108>)
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d000      	beq.n	80086d4 <ai_platform_network_post_init+0x90>
 80086d2:	e7fe      	b.n	80086d2 <ai_platform_network_post_init+0x8e>
 80086d4:	f7ff fb0c 	bl	8007cf0 <_ai_platform_release_crc>
 80086d8:	2000      	movs	r0, #0
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	4a1c      	ldr	r2, [pc, #112]	; (8008750 <ai_platform_network_post_init+0x10c>)
 80086de:	2301      	movs	r3, #1
 80086e0:	6093      	str	r3, [r2, #8]
 80086e2:	6893      	ldr	r3, [r2, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1fc      	bne.n	80086e2 <ai_platform_network_post_init+0x9e>
 80086e8:	4b17      	ldr	r3, [pc, #92]	; (8008748 <ai_platform_network_post_init+0x104>)
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	4b17      	ldr	r3, [pc, #92]	; (800874c <ai_platform_network_post_init+0x108>)
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d11a      	bne.n	800872a <ai_platform_network_post_init+0xe6>
 80086f4:	f7ff fafc 	bl	8007cf0 <_ai_platform_release_crc>
 80086f8:	68e3      	ldr	r3, [r4, #12]
 80086fa:	f013 0502 	ands.w	r5, r3, #2
 80086fe:	d015      	beq.n	800872c <ai_platform_network_post_init+0xe8>
 8008700:	4620      	mov	r0, r4
 8008702:	f001 fe7d 	bl	800a400 <ai_layers_post_init_all>
 8008706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008708:	b16b      	cbz	r3, 8008726 <ai_platform_network_post_init+0xe2>
 800870a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800870c:	e007      	b.n	800871e <ai_platform_network_post_init+0xda>
 800870e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8008712:	4798      	blx	r3
 8008714:	692b      	ldr	r3, [r5, #16]
 8008716:	42ab      	cmp	r3, r5
 8008718:	d005      	beq.n	8008726 <ai_platform_network_post_init+0xe2>
 800871a:	b123      	cbz	r3, 8008726 <ai_platform_network_post_init+0xe2>
 800871c:	461d      	mov	r5, r3
 800871e:	4629      	mov	r1, r5
 8008720:	2000      	movs	r0, #0
 8008722:	2d00      	cmp	r5, #0
 8008724:	d1f3      	bne.n	800870e <ai_platform_network_post_init+0xca>
 8008726:	2001      	movs	r0, #1
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	e7fe      	b.n	800872a <ai_platform_network_post_init+0xe6>
 800872c:	2210      	movs	r2, #16
 800872e:	2111      	movs	r1, #17
 8008730:	18a0      	adds	r0, r4, r2
 8008732:	f000 fa9d 	bl	8008c70 <core_set_error>
 8008736:	4628      	mov	r0, r5
 8008738:	bd38      	pop	{r3, r4, r5, pc}
 800873a:	bf00      	nop
 800873c:	a1c00100 	.word	0xa1c00100
 8008740:	e0042000 	.word	0xe0042000
 8008744:	58024000 	.word	0x58024000
 8008748:	f407a5c2 	.word	0xf407a5c2
 800874c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008750:	40023000 	.word	0x40023000

08008754 <ai_platform_network_process>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	460e      	mov	r6, r1
 800875a:	b085      	sub	sp, #20
 800875c:	4693      	mov	fp, r2
 800875e:	4605      	mov	r5, r0
 8008760:	b120      	cbz	r0, 800876c <ai_platform_network_process+0x18>
 8008762:	4bb8      	ldr	r3, [pc, #736]	; (8008a44 <ai_platform_network_process+0x2f0>)
 8008764:	6802      	ldr	r2, [r0, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	bf18      	it	ne
 800876a:	2500      	movne	r5, #0
 800876c:	f7ff fabe 	bl	8007cec <_ai_platform_acquire_crc>
 8008770:	4bb5      	ldr	r3, [pc, #724]	; (8008a48 <ai_platform_network_process+0x2f4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877c:	d010      	beq.n	80087a0 <ai_platform_network_process+0x4c>
 800877e:	4ab3      	ldr	r2, [pc, #716]	; (8008a4c <ai_platform_network_process+0x2f8>)
 8008780:	2301      	movs	r3, #1
 8008782:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008786:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1fb      	bne.n	8008786 <ai_platform_network_process+0x32>
 800878e:	4bb0      	ldr	r3, [pc, #704]	; (8008a50 <ai_platform_network_process+0x2fc>)
 8008790:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008794:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008798:	4bae      	ldr	r3, [pc, #696]	; (8008a54 <ai_platform_network_process+0x300>)
 800879a:	429a      	cmp	r2, r3
 800879c:	d00d      	beq.n	80087ba <ai_platform_network_process+0x66>
 800879e:	e7fe      	b.n	800879e <ai_platform_network_process+0x4a>
 80087a0:	4aad      	ldr	r2, [pc, #692]	; (8008a58 <ai_platform_network_process+0x304>)
 80087a2:	2301      	movs	r3, #1
 80087a4:	6093      	str	r3, [r2, #8]
 80087a6:	6893      	ldr	r3, [r2, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1fc      	bne.n	80087a6 <ai_platform_network_process+0x52>
 80087ac:	4ba8      	ldr	r3, [pc, #672]	; (8008a50 <ai_platform_network_process+0x2fc>)
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	6812      	ldr	r2, [r2, #0]
 80087b2:	4ba8      	ldr	r3, [pc, #672]	; (8008a54 <ai_platform_network_process+0x300>)
 80087b4:	429a      	cmp	r2, r3
 80087b6:	f040 812c 	bne.w	8008a12 <ai_platform_network_process+0x2be>
 80087ba:	f7ff fa99 	bl	8007cf0 <_ai_platform_release_crc>
 80087be:	2d00      	cmp	r5, #0
 80087c0:	f000 8154 	beq.w	8008a6c <ai_platform_network_process+0x318>
 80087c4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 8124 	beq.w	8008a14 <ai_platform_network_process+0x2c0>
 80087cc:	68eb      	ldr	r3, [r5, #12]
 80087ce:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	2700      	movs	r7, #0
 80087d8:	2b03      	cmp	r3, #3
 80087da:	616f      	str	r7, [r5, #20]
 80087dc:	f040 813e 	bne.w	8008a5c <ai_platform_network_process+0x308>
 80087e0:	2e00      	cmp	r6, #0
 80087e2:	f000 811d 	beq.w	8008a20 <ai_platform_network_process+0x2cc>
 80087e6:	f1ba 0f00 	cmp.w	sl, #0
 80087ea:	f000 8119 	beq.w	8008a20 <ai_platform_network_process+0x2cc>
 80087ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8114 	beq.w	8008a20 <ai_platform_network_process+0x2cc>
 80087f8:	69b3      	ldr	r3, [r6, #24]
 80087fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8008804:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d072      	beq.n	80088f2 <ai_platform_network_process+0x19e>
 800880c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8008810:	2c00      	cmp	r4, #0
 8008812:	d06e      	beq.n	80088f2 <ai_platform_network_process+0x19e>
 8008814:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008818:	f8d3 9000 	ldr.w	r9, [r3]
 800881c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8008820:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8008824:	f000 81e0 	beq.w	8008be8 <ai_platform_network_process+0x494>
 8008828:	69a3      	ldr	r3, [r4, #24]
 800882a:	2101      	movs	r1, #1
 800882c:	4630      	mov	r0, r6
 800882e:	685d      	ldr	r5, [r3, #4]
 8008830:	f7ff fa0e 	bl	8007c50 <ai_buffer_get_size>
 8008834:	4285      	cmp	r5, r0
 8008836:	f0c0 811b 	bcc.w	8008a70 <ai_platform_network_process+0x31c>
 800883a:	68e0      	ldr	r0, [r4, #12]
 800883c:	69b1      	ldr	r1, [r6, #24]
 800883e:	68c2      	ldr	r2, [r0, #12]
 8008840:	68cb      	ldr	r3, [r1, #12]
 8008842:	429a      	cmp	r2, r3
 8008844:	f040 8114 	bne.w	8008a70 <ai_platform_network_process+0x31c>
 8008848:	6882      	ldr	r2, [r0, #8]
 800884a:	688b      	ldr	r3, [r1, #8]
 800884c:	429a      	cmp	r2, r3
 800884e:	f040 810f 	bne.w	8008a70 <ai_platform_network_process+0x31c>
 8008852:	6842      	ldr	r2, [r0, #4]
 8008854:	684b      	ldr	r3, [r1, #4]
 8008856:	429a      	cmp	r2, r3
 8008858:	f040 810a 	bne.w	8008a70 <ai_platform_network_process+0x31c>
 800885c:	69a3      	ldr	r3, [r4, #24]
 800885e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008862:	f002 f801 	bl	800a868 <ai_array_get_data_byte_size>
 8008866:	4605      	mov	r5, r0
 8008868:	4620      	mov	r0, r4
 800886a:	f001 ff51 	bl	800a710 <get_tensor_byte_size>
 800886e:	4285      	cmp	r5, r0
 8008870:	f0c0 80fe 	bcc.w	8008a70 <ai_platform_network_process+0x31c>
 8008874:	69a3      	ldr	r3, [r4, #24]
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	f001 ff62 	bl	800a740 <ai_array_to_buffer_fmt>
 800887c:	6833      	ldr	r3, [r6, #0]
 800887e:	4058      	eors	r0, r3
 8008880:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8008884:	f040 81bb 	bne.w	8008bfe <ai_platform_network_process+0x4aa>
 8008888:	6873      	ldr	r3, [r6, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 81ae 	beq.w	8008bec <ai_platform_network_process+0x498>
 8008890:	69b3      	ldr	r3, [r6, #24]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 819e 	beq.w	8008bd6 <ai_platform_network_process+0x482>
 800889a:	9a01      	ldr	r2, [sp, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	bf38      	it	cc
 80088a0:	461a      	movcc	r2, r3
 80088a2:	4620      	mov	r0, r4
 80088a4:	9201      	str	r2, [sp, #4]
 80088a6:	f001 ff33 	bl	800a710 <get_tensor_byte_size>
 80088aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ae:	69b3      	ldr	r3, [r6, #24]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	fb00 f303 	mul.w	r3, r0, r3
 80088b6:	f8c8 300c 	str.w	r3, [r8, #12]
 80088ba:	6871      	ldr	r1, [r6, #4]
 80088bc:	f8c8 1004 	str.w	r1, [r8, #4]
 80088c0:	440b      	add	r3, r1
 80088c2:	f849 300b 	str.w	r3, [r9, fp]
 80088c6:	69a0      	ldr	r0, [r4, #24]
 80088c8:	6803      	ldr	r3, [r0, #0]
 80088ca:	009a      	lsls	r2, r3, #2
 80088cc:	f107 0701 	add.w	r7, r7, #1
 80088d0:	f106 061c 	add.w	r6, r6, #28
 80088d4:	f100 80af 	bmi.w	8008a36 <ai_platform_network_process+0x2e2>
 80088d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	4419      	add	r1, r3
 80088e0:	6081      	str	r1, [r0, #8]
 80088e2:	69a3      	ldr	r3, [r4, #24]
 80088e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	f8ba 3000 	ldrh.w	r3, [sl]
 80088ee:	42bb      	cmp	r3, r7
 80088f0:	d888      	bhi.n	8008804 <ai_platform_network_process+0xb0>
 80088f2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80088f6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80088f8:	f1bb 0f00 	cmp.w	fp, #0
 80088fc:	f000 8188 	beq.w	8008c10 <ai_platform_network_process+0x4bc>
 8008900:	2a01      	cmp	r2, #1
 8008902:	f240 8160 	bls.w	8008bc6 <ai_platform_network_process+0x472>
 8008906:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800890a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 8159 	beq.w	8008bc6 <ai_platform_network_process+0x472>
 8008914:	465e      	mov	r6, fp
 8008916:	2700      	movs	r7, #0
 8008918:	462c      	mov	r4, r5
 800891a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80b4 	beq.w	8008a8c <ai_platform_network_process+0x338>
 8008924:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8008928:	2d00      	cmp	r5, #0
 800892a:	f000 80af 	beq.w	8008a8c <ai_platform_network_process+0x338>
 800892e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008932:	f8d3 8000 	ldr.w	r8, [r3]
 8008936:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800893a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800893e:	f000 8173 	beq.w	8008c28 <ai_platform_network_process+0x4d4>
 8008942:	69ab      	ldr	r3, [r5, #24]
 8008944:	2101      	movs	r1, #1
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	9302      	str	r3, [sp, #8]
 800894a:	4630      	mov	r0, r6
 800894c:	f7ff f980 	bl	8007c50 <ai_buffer_get_size>
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	4283      	cmp	r3, r0
 8008954:	f0c0 8136 	bcc.w	8008bc4 <ai_platform_network_process+0x470>
 8008958:	68e8      	ldr	r0, [r5, #12]
 800895a:	69b1      	ldr	r1, [r6, #24]
 800895c:	68c2      	ldr	r2, [r0, #12]
 800895e:	68cb      	ldr	r3, [r1, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	f040 812f 	bne.w	8008bc4 <ai_platform_network_process+0x470>
 8008966:	6882      	ldr	r2, [r0, #8]
 8008968:	688b      	ldr	r3, [r1, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	f040 812a 	bne.w	8008bc4 <ai_platform_network_process+0x470>
 8008970:	6842      	ldr	r2, [r0, #4]
 8008972:	684b      	ldr	r3, [r1, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	f040 8125 	bne.w	8008bc4 <ai_platform_network_process+0x470>
 800897a:	69ab      	ldr	r3, [r5, #24]
 800897c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008980:	f001 ff72 	bl	800a868 <ai_array_get_data_byte_size>
 8008984:	9002      	str	r0, [sp, #8]
 8008986:	4628      	mov	r0, r5
 8008988:	f001 fec2 	bl	800a710 <get_tensor_byte_size>
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	4283      	cmp	r3, r0
 8008990:	f0c0 8118 	bcc.w	8008bc4 <ai_platform_network_process+0x470>
 8008994:	69ab      	ldr	r3, [r5, #24]
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	f001 fed2 	bl	800a740 <ai_array_to_buffer_fmt>
 800899c:	6833      	ldr	r3, [r6, #0]
 800899e:	4058      	eors	r0, r3
 80089a0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80089a4:	f040 8138 	bne.w	8008c18 <ai_platform_network_process+0x4c4>
 80089a8:	6873      	ldr	r3, [r6, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 814f 	beq.w	8008c4e <ai_platform_network_process+0x4fa>
 80089b0:	69b3      	ldr	r3, [r6, #24]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 8141 	beq.w	8008c3c <ai_platform_network_process+0x4e8>
 80089ba:	9a01      	ldr	r2, [sp, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	bf38      	it	cc
 80089c0:	461a      	movcc	r2, r3
 80089c2:	4628      	mov	r0, r5
 80089c4:	9201      	str	r2, [sp, #4]
 80089c6:	f001 fea3 	bl	800a710 <get_tensor_byte_size>
 80089ca:	f8ca 0008 	str.w	r0, [sl, #8]
 80089ce:	69b3      	ldr	r3, [r6, #24]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	fb00 f303 	mul.w	r3, r0, r3
 80089d6:	f8ca 300c 	str.w	r3, [sl, #12]
 80089da:	6871      	ldr	r1, [r6, #4]
 80089dc:	f8ca 1004 	str.w	r1, [sl, #4]
 80089e0:	440b      	add	r3, r1
 80089e2:	f848 300b 	str.w	r3, [r8, fp]
 80089e6:	69a8      	ldr	r0, [r5, #24]
 80089e8:	6803      	ldr	r3, [r0, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	f107 0701 	add.w	r7, r7, #1
 80089f0:	f106 061c 	add.w	r6, r6, #28
 80089f4:	d445      	bmi.n	8008a82 <ai_platform_network_process+0x32e>
 80089f6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80089fa:	1a9b      	subs	r3, r3, r2
 80089fc:	4419      	add	r1, r3
 80089fe:	6081      	str	r1, [r0, #8]
 8008a00:	69ab      	ldr	r3, [r5, #24]
 8008a02:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008a06:	60da      	str	r2, [r3, #12]
 8008a08:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008a0c:	429f      	cmp	r7, r3
 8008a0e:	d384      	bcc.n	800891a <ai_platform_network_process+0x1c6>
 8008a10:	e03c      	b.n	8008a8c <ai_platform_network_process+0x338>
 8008a12:	e7fe      	b.n	8008a12 <ai_platform_network_process+0x2be>
 8008a14:	68ea      	ldr	r2, [r5, #12]
 8008a16:	616b      	str	r3, [r5, #20]
 8008a18:	f002 0203 	and.w	r2, r2, #3
 8008a1c:	2a03      	cmp	r2, #3
 8008a1e:	d11d      	bne.n	8008a5c <ai_platform_network_process+0x308>
 8008a20:	2217      	movs	r2, #23
 8008a22:	2112      	movs	r1, #18
 8008a24:	f105 0010 	add.w	r0, r5, #16
 8008a28:	f000 f922 	bl	8008c70 <core_set_error>
 8008a2c:	2400      	movs	r4, #0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	b005      	add	sp, #20
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	f8ba 3000 	ldrh.w	r3, [sl]
 8008a3a:	429f      	cmp	r7, r3
 8008a3c:	f4ff aee2 	bcc.w	8008804 <ai_platform_network_process+0xb0>
 8008a40:	e757      	b.n	80088f2 <ai_platform_network_process+0x19e>
 8008a42:	bf00      	nop
 8008a44:	a1c00100 	.word	0xa1c00100
 8008a48:	e0042000 	.word	0xe0042000
 8008a4c:	58024000 	.word	0x58024000
 8008a50:	f407a5c2 	.word	0xf407a5c2
 8008a54:	b5e8b5cd 	.word	0xb5e8b5cd
 8008a58:	40023000 	.word	0x40023000
 8008a5c:	2230      	movs	r2, #48	; 0x30
 8008a5e:	2111      	movs	r1, #17
 8008a60:	f105 0010 	add.w	r0, r5, #16
 8008a64:	f000 f904 	bl	8008c70 <core_set_error>
 8008a68:	2400      	movs	r4, #0
 8008a6a:	e7e0      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008a6c:	462c      	mov	r4, r5
 8008a6e:	e7de      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008a70:	9d02      	ldr	r5, [sp, #8]
 8008a72:	2218      	movs	r2, #24
 8008a74:	2112      	movs	r1, #18
 8008a76:	f105 0010 	add.w	r0, r5, #16
 8008a7a:	f000 f8f9 	bl	8008c70 <core_set_error>
 8008a7e:	2400      	movs	r4, #0
 8008a80:	e7d5      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008a82:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008a86:	429f      	cmp	r7, r3
 8008a88:	f4ff af47 	bcc.w	800891a <ai_platform_network_process+0x1c6>
 8008a8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008a90:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8008a92:	82a3      	strh	r3, [r4, #20]
 8008a94:	4625      	mov	r5, r4
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	f040 808e 	bne.w	8008bb8 <ai_platform_network_process+0x464>
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	4617      	mov	r7, r2
 8008aa0:	8aec      	ldrh	r4, [r5, #22]
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	bf38      	it	cc
 8008aa6:	46ab      	movcc	fp, r5
 8008aa8:	d2c1      	bcs.n	8008a2e <ai_platform_network_process+0x2da>
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	d030      	beq.n	8008b10 <ai_platform_network_process+0x3bc>
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	e014      	b.n	8008ade <ai_platform_network_process+0x38a>
 8008ab4:	6882      	ldr	r2, [r0, #8]
 8008ab6:	68c5      	ldr	r5, [r0, #12]
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	1b52      	subs	r2, r2, r5
 8008abc:	4413      	add	r3, r2
 8008abe:	6083      	str	r3, [r0, #8]
 8008ac0:	698b      	ldr	r3, [r1, #24]
 8008ac2:	6862      	ldr	r2, [r4, #4]
 8008ac4:	60da      	str	r2, [r3, #12]
 8008ac6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8008aca:	f859 200a 	ldr.w	r2, [r9, sl]
 8008ace:	440b      	add	r3, r1
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	bf24      	itt	cs
 8008ad4:	68e3      	ldrcs	r3, [r4, #12]
 8008ad6:	1ad3      	subcs	r3, r2, r3
 8008ad8:	6063      	str	r3, [r4, #4]
 8008ada:	f108 0801 	add.w	r8, r8, #1
 8008ade:	8833      	ldrh	r3, [r6, #0]
 8008ae0:	4543      	cmp	r3, r8
 8008ae2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8008ae6:	d913      	bls.n	8008b10 <ai_platform_network_process+0x3bc>
 8008ae8:	6873      	ldr	r3, [r6, #4]
 8008aea:	b18b      	cbz	r3, 8008b10 <ai_platform_network_process+0x3bc>
 8008aec:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8008af0:	b171      	cbz	r1, 8008b10 <ai_platform_network_process+0x3bc>
 8008af2:	6988      	ldr	r0, [r1, #24]
 8008af4:	68b2      	ldr	r2, [r6, #8]
 8008af6:	6803      	ldr	r3, [r0, #0]
 8008af8:	f8d2 9000 	ldr.w	r9, [r2]
 8008afc:	009d      	lsls	r5, r3, #2
 8008afe:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8008b02:	d5d7      	bpl.n	8008ab4 <ai_platform_network_process+0x360>
 8008b04:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8008b08:	6880      	ldr	r0, [r0, #8]
 8008b0a:	f001 fef1 	bl	800a8f0 <memcpy>
 8008b0e:	e7da      	b.n	8008ac6 <ai_platform_network_process+0x372>
 8008b10:	4658      	mov	r0, fp
 8008b12:	f001 fc89 	bl	800a428 <ai_layers_forward_all>
 8008b16:	2f00      	cmp	r7, #0
 8008b18:	d03f      	beq.n	8008b9a <ai_platform_network_process+0x446>
 8008b1a:	2400      	movs	r4, #0
 8008b1c:	e016      	b.n	8008b4c <ai_platform_network_process+0x3f8>
 8008b1e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8008b22:	f859 100a 	ldr.w	r1, [r9, sl]
 8008b26:	4413      	add	r3, r2
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf24      	itt	cs
 8008b2c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8008b30:	1acb      	subcs	r3, r1, r3
 8008b32:	f8c8 3004 	str.w	r3, [r8, #4]
 8008b36:	6981      	ldr	r1, [r0, #24]
 8008b38:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8008b3c:	1b52      	subs	r2, r2, r5
 8008b3e:	4413      	add	r3, r2
 8008b40:	608b      	str	r3, [r1, #8]
 8008b42:	6983      	ldr	r3, [r0, #24]
 8008b44:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	3401      	adds	r4, #1
 8008b4c:	883b      	ldrh	r3, [r7, #0]
 8008b4e:	42a3      	cmp	r3, r4
 8008b50:	d923      	bls.n	8008b9a <ai_platform_network_process+0x446>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	b30b      	cbz	r3, 8008b9a <ai_platform_network_process+0x446>
 8008b56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008b5a:	b1f0      	cbz	r0, 8008b9a <ai_platform_network_process+0x446>
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	6983      	ldr	r3, [r0, #24]
 8008b60:	f8d2 9000 	ldr.w	r9, [r2]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	0092      	lsls	r2, r2, #2
 8008b68:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8008b6c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8008b70:	d5d5      	bpl.n	8008b1e <ai_platform_network_process+0x3ca>
 8008b72:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8008b76:	6899      	ldr	r1, [r3, #8]
 8008b78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b7c:	f001 feb8 	bl	800a8f0 <memcpy>
 8008b80:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8008b84:	f859 200a 	ldr.w	r2, [r9, sl]
 8008b88:	440b      	add	r3, r1
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	bf24      	itt	cs
 8008b8e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8008b92:	1ad3      	subcs	r3, r2, r3
 8008b94:	f8c8 3004 	str.w	r3, [r8, #4]
 8008b98:	e7d7      	b.n	8008b4a <ai_platform_network_process+0x3f6>
 8008b9a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8008b9e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8008ba2:	3401      	adds	r4, #1
 8008ba4:	b2a4      	uxth	r4, r4
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	f8ab 4016 	strh.w	r4, [fp, #22]
 8008bac:	f63f af7d 	bhi.w	8008aaa <ai_platform_network_process+0x356>
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	b005      	add	sp, #20
 8008bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb8:	2a01      	cmp	r2, #1
 8008bba:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8008bbc:	d03c      	beq.n	8008c38 <ai_platform_network_process+0x4e4>
 8008bbe:	f106 070c 	add.w	r7, r6, #12
 8008bc2:	e76d      	b.n	8008aa0 <ai_platform_network_process+0x34c>
 8008bc4:	4625      	mov	r5, r4
 8008bc6:	2218      	movs	r2, #24
 8008bc8:	2113      	movs	r1, #19
 8008bca:	f105 0010 	add.w	r0, r5, #16
 8008bce:	f000 f84f 	bl	8008c70 <core_set_error>
 8008bd2:	2400      	movs	r4, #0
 8008bd4:	e72b      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008bd6:	9d02      	ldr	r5, [sp, #8]
 8008bd8:	4604      	mov	r4, r0
 8008bda:	2221      	movs	r2, #33	; 0x21
 8008bdc:	2112      	movs	r1, #18
 8008bde:	f105 0010 	add.w	r0, r5, #16
 8008be2:	f000 f845 	bl	8008c70 <core_set_error>
 8008be6:	e722      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008be8:	9d02      	ldr	r5, [sp, #8]
 8008bea:	e719      	b.n	8008a20 <ai_platform_network_process+0x2cc>
 8008bec:	9d02      	ldr	r5, [sp, #8]
 8008bee:	4604      	mov	r4, r0
 8008bf0:	2217      	movs	r2, #23
 8008bf2:	2112      	movs	r1, #18
 8008bf4:	f105 0010 	add.w	r0, r5, #16
 8008bf8:	f000 f83a 	bl	8008c70 <core_set_error>
 8008bfc:	e717      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008bfe:	9d02      	ldr	r5, [sp, #8]
 8008c00:	2219      	movs	r2, #25
 8008c02:	2112      	movs	r1, #18
 8008c04:	f105 0010 	add.w	r0, r5, #16
 8008c08:	f000 f832 	bl	8008c70 <core_set_error>
 8008c0c:	2400      	movs	r4, #0
 8008c0e:	e70e      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008c10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008c14:	82ab      	strh	r3, [r5, #20]
 8008c16:	e73e      	b.n	8008a96 <ai_platform_network_process+0x342>
 8008c18:	f104 0010 	add.w	r0, r4, #16
 8008c1c:	2219      	movs	r2, #25
 8008c1e:	2113      	movs	r1, #19
 8008c20:	f000 f826 	bl	8008c70 <core_set_error>
 8008c24:	2400      	movs	r4, #0
 8008c26:	e702      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008c28:	f104 0010 	add.w	r0, r4, #16
 8008c2c:	2217      	movs	r2, #23
 8008c2e:	2113      	movs	r1, #19
 8008c30:	f000 f81e 	bl	8008c70 <core_set_error>
 8008c34:	4654      	mov	r4, sl
 8008c36:	e6fa      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008c38:	2700      	movs	r7, #0
 8008c3a:	e731      	b.n	8008aa0 <ai_platform_network_process+0x34c>
 8008c3c:	4625      	mov	r5, r4
 8008c3e:	2221      	movs	r2, #33	; 0x21
 8008c40:	4604      	mov	r4, r0
 8008c42:	2113      	movs	r1, #19
 8008c44:	f105 0010 	add.w	r0, r5, #16
 8008c48:	f000 f812 	bl	8008c70 <core_set_error>
 8008c4c:	e6ef      	b.n	8008a2e <ai_platform_network_process+0x2da>
 8008c4e:	4625      	mov	r5, r4
 8008c50:	2217      	movs	r2, #23
 8008c52:	4604      	mov	r4, r0
 8008c54:	2113      	movs	r1, #19
 8008c56:	f105 0010 	add.w	r0, r5, #16
 8008c5a:	f000 f809 	bl	8008c70 <core_set_error>
 8008c5e:	e6e6      	b.n	8008a2e <ai_platform_network_process+0x2da>

08008c60 <core_init>:
 8008c60:	2001      	movs	r0, #1
 8008c62:	4770      	bx	lr

08008c64 <core_get_error>:
 8008c64:	4603      	mov	r3, r0
 8008c66:	2200      	movs	r2, #0
 8008c68:	6800      	ldr	r0, [r0, #0]
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop

08008c70 <core_set_error>:
 8008c70:	4603      	mov	r3, r0
 8008c72:	7800      	ldrb	r0, [r0, #0]
 8008c74:	b108      	cbz	r0, 8008c7a <core_set_error+0xa>
 8008c76:	2000      	movs	r0, #0
 8008c78:	4770      	bx	lr
 8008c7a:	7019      	strb	r1, [r3, #0]
 8008c7c:	6819      	ldr	r1, [r3, #0]
 8008c7e:	f362 211f 	bfi	r1, r2, #8, #24
 8008c82:	2001      	movs	r0, #1
 8008c84:	6019      	str	r1, [r3, #0]
 8008c86:	4770      	bx	lr

08008c88 <func_dummy>:
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop

08008c8c <ai_conv2d_stripe_f32.constprop.0>:
 8008c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c90:	ed2d 8b02 	vpush	{d8}
 8008c94:	b09d      	sub	sp, #116	; 0x74
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 8008c9c:	f8d7 a0bc 	ldr.w	sl, [r7, #188]	; 0xbc
 8008ca0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8008ca4:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008ca6:	f1ba 0f01 	cmp.w	sl, #1
 8008caa:	663b      	str	r3, [r7, #96]	; 0x60
 8008cac:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8008cb0:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 8008cb4:	f8d7 c0cc 	ldr.w	ip, [r7, #204]	; 0xcc
 8008cb8:	f9b7 e0d4 	ldrsh.w	lr, [r7, #212]	; 0xd4
 8008cbc:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8008cc0:	6579      	str	r1, [r7, #84]	; 0x54
 8008cc2:	e9d7 3030 	ldrd	r3, r0, [r7, #192]	; 0xc0
 8008cc6:	f000 812f 	beq.w	8008f28 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 8008cca:	45b2      	cmp	sl, r6
 8008ccc:	f000 827a 	beq.w	80091c4 <ai_conv2d_stripe_f32.constprop.0+0x538>
 8008cd0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	f000 8115 	beq.w	8008f04 <ai_conv2d_stripe_f32.constprop.0+0x278>
 8008cda:	fb93 f4f2 	sdiv	r4, r3, r2
 8008cde:	fb02 3414 	mls	r4, r2, r4, r3
 8008ce2:	1b14      	subs	r4, r2, r4
 8008ce4:	1ac1      	subs	r1, r0, r3
 8008ce6:	fb94 f0f2 	sdiv	r0, r4, r2
 8008cea:	fb02 4010 	mls	r0, r2, r0, r4
 8008cee:	1a09      	subs	r1, r1, r0
 8008cf0:	4411      	add	r1, r2
 8008cf2:	3901      	subs	r1, #1
 8008cf4:	4418      	add	r0, r3
 8008cf6:	fb91 f9f2 	sdiv	r9, r1, r2
 8008cfa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008cfe:	eddf 6a89 	vldr	s13, [pc, #548]	; 8008f24 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8008d02:	4460      	add	r0, ip
 8008d04:	fb01 f100 	mul.w	r1, r1, r0
 8008d08:	6239      	str	r1, [r7, #32]
 8008d0a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008d0e:	4413      	add	r3, r2
 8008d10:	3b01      	subs	r3, #1
 8008d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d16:	fb01 f202 	mul.w	r2, r1, r2
 8008d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d26:	fb0e f306 	mul.w	r3, lr, r6
 8008d2a:	fbb6 f2fa 	udiv	r2, r6, sl
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d34:	00b3      	lsls	r3, r6, #2
 8008d36:	61fb      	str	r3, [r7, #28]
 8008d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d3c:	eba5 0509 	sub.w	r5, r5, r9
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	fb05 f303 	mul.w	r3, r5, r3
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	633b      	str	r3, [r7, #48]	; 0x30
 8008d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d58:	f1c3 0800 	rsb	r8, r3, #0
 8008d5c:	ebae 0303 	sub.w	r3, lr, r3
 8008d60:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8008d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d66:	2300      	movs	r3, #0
 8008d68:	653b      	str	r3, [r7, #80]	; 0x50
 8008d6a:	46cc      	mov	ip, r9
 8008d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d70:	f8c7 b014 	str.w	fp, [r7, #20]
 8008d74:	fbb3 f3fa 	udiv	r3, r3, sl
 8008d78:	46d1      	mov	r9, sl
 8008d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f2c0 80c5 	blt.w	8008f10 <ai_conv2d_stripe_f32.constprop.0+0x284>
 8008d86:	2400      	movs	r4, #0
 8008d88:	4673      	mov	r3, lr
 8008d8a:	4671      	mov	r1, lr
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d90:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 8008d94:	3b01      	subs	r3, #1
 8008d96:	fb93 f3fe 	sdiv	r3, r3, lr
 8008d9a:	4403      	add	r3, r0
 8008d9c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008d9e:	fb0b 0303 	mla	r3, fp, r3, r0
 8008da2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008da6:	4440      	add	r0, r8
 8008da8:	42a8      	cmp	r0, r5
 8008daa:	bf94      	ite	ls
 8008dac:	ebc2 0200 	rsbls	r2, r2, r0
 8008db0:	ebc2 0205 	rsbhi	r2, r2, r5
 8008db4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008db8:	6a3d      	ldr	r5, [r7, #32]
 8008dba:	4428      	add	r0, r5
 8008dbc:	4420      	add	r0, r4
 8008dbe:	fb91 f4fe 	sdiv	r4, r1, lr
 8008dc2:	fb0e 1114 	mls	r1, lr, r4, r1
 8008dc6:	1a52      	subs	r2, r2, r1
 8008dc8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8008dca:	4401      	add	r1, r0
 8008dcc:	69f8      	ldr	r0, [r7, #28]
 8008dce:	fb00 4101 	mla	r1, r0, r1, r4
 8008dd2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8008dd4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dd6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8008dd8:	4472      	add	r2, lr
 8008dda:	3a01      	subs	r2, #1
 8008ddc:	fb92 f6fe 	sdiv	r6, r2, lr
 8008de0:	460a      	mov	r2, r1
 8008de2:	2900      	cmp	r1, #0
 8008de4:	bf08      	it	eq
 8008de6:	4622      	moveq	r2, r4
 8008de8:	42a2      	cmp	r2, r4
 8008dea:	637a      	str	r2, [r7, #52]	; 0x34
 8008dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dee:	fb0e 2116 	mls	r1, lr, r6, r2
 8008df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dfa:	bf08      	it	eq
 8008dfc:	eeb0 7a66 	vmoveq.f32	s14, s13
 8008e00:	1b92      	subs	r2, r2, r6
 8008e02:	f1b9 0f00 	cmp.w	r9, #0
 8008e06:	d066      	beq.n	8008ed6 <ai_conv2d_stripe_f32.constprop.0+0x24a>
 8008e08:	fb0b f202 	mul.w	r2, fp, r2
 8008e0c:	643a      	str	r2, [r7, #64]	; 0x40
 8008e0e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008e12:	fb00 f101 	mul.w	r1, r0, r1
 8008e16:	4591      	cmp	r9, r2
 8008e18:	6479      	str	r1, [r7, #68]	; 0x44
 8008e1a:	d85c      	bhi.n	8008ed6 <ai_conv2d_stripe_f32.constprop.0+0x24a>
 8008e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e1e:	e9c7 e803 	strd	lr, r8, [r7, #12]
 8008e22:	2500      	movs	r5, #0
 8008e24:	3a01      	subs	r2, #1
 8008e26:	46aa      	mov	sl, r5
 8008e28:	61ba      	str	r2, [r7, #24]
 8008e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2c:	f8c7 a008 	str.w	sl, [r7, #8]
 8008e30:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008e34:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e38:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e44:	ecf2 7a01 	vldmia	r2!, {s15}
 8008e48:	f1bc 0f00 	cmp.w	ip, #0
 8008e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e50:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e52:	dd22      	ble.n	8008e9a <ai_conv2d_stripe_f32.constprop.0+0x20e>
 8008e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e56:	2100      	movs	r1, #0
 8008e58:	2e00      	cmp	r6, #0
 8008e5a:	bfc8      	it	gt
 8008e5c:	2000      	movgt	r0, #0
 8008e5e:	dd15      	ble.n	8008e8c <ai_conv2d_stripe_f32.constprop.0+0x200>
 8008e60:	eb02 040b 	add.w	r4, r2, fp
 8008e64:	4294      	cmp	r4, r2
 8008e66:	d90c      	bls.n	8008e82 <ai_conv2d_stripe_f32.constprop.0+0x1f6>
 8008e68:	4696      	mov	lr, r2
 8008e6a:	469a      	mov	sl, r3
 8008e6c:	ecbe 6a01 	vldmia	lr!, {s12}
 8008e70:	ecfa 5a01 	vldmia	sl!, {s11}
 8008e74:	4574      	cmp	r4, lr
 8008e76:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008e7a:	d8f7      	bhi.n	8008e6c <ai_conv2d_stripe_f32.constprop.0+0x1e0>
 8008e7c:	697c      	ldr	r4, [r7, #20]
 8008e7e:	4423      	add	r3, r4
 8008e80:	4422      	add	r2, r4
 8008e82:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8008e84:	3001      	adds	r0, #1
 8008e86:	4286      	cmp	r6, r0
 8008e88:	4422      	add	r2, r4
 8008e8a:	d1e9      	bne.n	8008e60 <ai_conv2d_stripe_f32.constprop.0+0x1d4>
 8008e8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008e8e:	3101      	adds	r1, #1
 8008e90:	4402      	add	r2, r0
 8008e92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e94:	458c      	cmp	ip, r1
 8008e96:	4403      	add	r3, r0
 8008e98:	d1de      	bne.n	8008e58 <ai_conv2d_stripe_f32.constprop.0+0x1cc>
 8008e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e9c:	ece2 7a01 	vstmia	r2!, {s15}
 8008ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea4:	4413      	add	r3, r2
 8008ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ea8:	f108 0801 	add.w	r8, r8, #1
 8008eac:	4542      	cmp	r2, r8
 8008eae:	d8c8      	bhi.n	8008e42 <ai_conv2d_stripe_f32.constprop.0+0x1b6>
 8008eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eb2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8008eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008eba:	445a      	add	r2, fp
 8008ebc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	f10a 0a01 	add.w	sl, sl, #1
 8008ec4:	4589      	cmp	r9, r1
 8008ec6:	bf88      	it	hi
 8008ec8:	2200      	movhi	r2, #0
 8008eca:	3201      	adds	r2, #1
 8008ecc:	45d1      	cmp	r9, sl
 8008ece:	4415      	add	r5, r2
 8008ed0:	d1ab      	bne.n	8008e2a <ai_conv2d_stripe_f32.constprop.0+0x19e>
 8008ed2:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 8008ed6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008edc:	440a      	add	r2, r1
 8008ede:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ee0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ee6:	4411      	add	r1, r2
 8008ee8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008eec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eee:	eba8 0802 	sub.w	r8, r8, r2
 8008ef2:	1a8a      	subs	r2, r1, r2
 8008ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ef6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008efa:	3301      	adds	r3, #1
 8008efc:	429a      	cmp	r2, r3
 8008efe:	653b      	str	r3, [r7, #80]	; 0x50
 8008f00:	f47f af3c 	bne.w	8008d7c <ai_conv2d_stripe_f32.constprop.0+0xf0>
 8008f04:	3774      	adds	r7, #116	; 0x74
 8008f06:	46bd      	mov	sp, r7
 8008f08:	ecbd 8b02 	vpop	{d8}
 8008f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f10:	fb98 f1fe 	sdiv	r1, r8, lr
 8008f14:	fb0e 8111 	mls	r1, lr, r1, r8
 8008f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f1a:	ebae 0101 	sub.w	r1, lr, r1
 8008f1e:	4642      	mov	r2, r8
 8008f20:	4644      	mov	r4, r8
 8008f22:	e734      	b.n	8008d8e <ai_conv2d_stripe_f32.constprop.0+0x102>
 8008f24:	00000000 	.word	0x00000000
 8008f28:	fb0e f102 	mul.w	r1, lr, r2
 8008f2c:	2901      	cmp	r1, #1
 8008f2e:	f47f aecf 	bne.w	8008cd0 <ai_conv2d_stripe_f32.constprop.0+0x44>
 8008f32:	1ac1      	subs	r1, r0, r3
 8008f34:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008f38:	65f9      	str	r1, [r7, #92]	; 0x5c
 8008f3a:	00b1      	lsls	r1, r6, #2
 8008f3c:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f3e:	fb01 f100 	mul.w	r1, r1, r0
 8008f42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f44:	eb0c 0203 	add.w	r2, ip, r3
 8008f48:	fb01 0102 	mla	r1, r1, r2, r0
 8008f4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f50:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8008f54:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008f58:	f080 8269 	bcs.w	800942e <ai_conv2d_stripe_f32.constprop.0+0x7a2>
 8008f5c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	d0cf      	beq.n	8008f04 <ai_conv2d_stripe_f32.constprop.0+0x278>
 8008f64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f68:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008f6c:	ed1f 6a13 	vldr	s12, [pc, #-76]	; 8008f24 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8008f70:	fb05 f202 	mul.w	r2, r5, r2
 8008f74:	fb00 f303 	mul.w	r3, r0, r3
 8008f78:	fb06 f202 	mul.w	r2, r6, r2
 8008f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f7e:	0093      	lsls	r3, r2, #2
 8008f80:	643b      	str	r3, [r7, #64]	; 0x40
 8008f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f84:	fb03 f306 	mul.w	r3, r3, r6
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f90:	fb03 f306 	mul.w	r3, r3, r6
 8008f94:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8008faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 8106 	beq.w	80091be <ai_conv2d_stripe_f32.constprop.0+0x532>
 8008fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb4:	ecf3 6a01 	vldmia	r3!, {s13}
 8008fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 80ea 	beq.w	8009198 <ai_conv2d_stripe_f32.constprop.0+0x50c>
 8008fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fc8:	f8d7 90c8 	ldr.w	r9, [r7, #200]	; 0xc8
 8008fcc:	425d      	negs	r5, r3
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8008fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8008fd6:	f04f 0b00 	mov.w	fp, #0
 8008fda:	f1b9 0f00 	cmp.w	r9, #0
 8008fde:	f2c0 8221 	blt.w	8009424 <ai_conv2d_stripe_f32.constprop.0+0x798>
 8008fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008fea:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8008fec:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8008ff0:	fb02 0c06 	mla	ip, r2, r6, r0
 8008ff4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008ff8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008ffc:	4428      	add	r0, r5
 8008ffe:	42a0      	cmp	r0, r4
 8009000:	bf94      	ite	ls
 8009002:	ebc3 0300 	rsbls	r3, r3, r0
 8009006:	ebc3 0304 	rsbhi	r3, r3, r4
 800900a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800900e:	1ac4      	subs	r4, r0, r3
 8009010:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8009014:	1ac0      	subs	r0, r0, r3
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800901c:	2a00      	cmp	r2, #0
 800901e:	eeb0 7a66 	vmov.f32	s14, s13
 8009022:	f340 80a5 	ble.w	8009170 <ai_conv2d_stripe_f32.constprop.0+0x4e4>
 8009026:	fb06 f204 	mul.w	r2, r6, r4
 800902a:	637a      	str	r2, [r7, #52]	; 0x34
 800902c:	fb06 f200 	mul.w	r2, r6, r0
 8009030:	f023 060f 	bic.w	r6, r3, #15
 8009034:	1e70      	subs	r0, r6, #1
 8009036:	0900      	lsrs	r0, r0, #4
 8009038:	3001      	adds	r0, #1
 800903a:	633a      	str	r2, [r7, #48]	; 0x30
 800903c:	0102      	lsls	r2, r0, #4
 800903e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009040:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8009044:	2400      	movs	r4, #0
 8009046:	4662      	mov	r2, ip
 8009048:	2e00      	cmp	r6, #0
 800904a:	bfd8      	it	le
 800904c:	2000      	movle	r0, #0
 800904e:	dd72      	ble.n	8009136 <ai_conv2d_stripe_f32.constprop.0+0x4aa>
 8009050:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8009054:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009058:	f04f 0800 	mov.w	r8, #0
 800905c:	ed50 4a0f 	vldr	s9, [r0, #-60]	; 0xffffffc4
 8009060:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8009064:	ed1c 5a10 	vldr	s10, [ip, #-64]	; 0xffffffc0
 8009068:	ed50 5a10 	vldr	s11, [r0, #-64]	; 0xffffffc0
 800906c:	ed5c 3a0d 	vldr	s7, [ip, #-52]	; 0xffffffcc
 8009070:	ed1c 4a0c 	vldr	s8, [ip, #-48]	; 0xffffffd0
 8009074:	ed1c 2a0a 	vldr	s4, [ip, #-40]	; 0xffffffd8
 8009078:	ed50 2a0a 	vldr	s5, [r0, #-40]	; 0xffffffd8
 800907c:	ed1c 3a09 	vldr	s6, [ip, #-36]	; 0xffffffdc
 8009080:	ed1c 0a06 	vldr	s0, [ip, #-24]	; 0xffffffe8
 8009084:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 8009088:	ed1c 1a05 	vldr	s2, [ip, #-20]	; 0xffffffec
 800908c:	ed50 1a05 	vldr	s3, [r0, #-20]	; 0xffffffec
 8009090:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8009094:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 8009098:	eee5 7a25 	vfma.f32	s15, s10, s11
 800909c:	f108 0810 	add.w	r8, r8, #16
 80090a0:	45b0      	cmp	r8, r6
 80090a2:	ed10 5a0e 	vldr	s10, [r0, #-56]	; 0xffffffc8
 80090a6:	ed50 5a0d 	vldr	s11, [r0, #-52]	; 0xffffffcc
 80090aa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80090ae:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80090b2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80090b6:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 80090ba:	ed1c 5a1b 	vldr	s10, [ip, #-108]	; 0xffffff94
 80090be:	eee3 7aa5 	vfma.f32	s15, s7, s11
 80090c2:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 80090c6:	ed50 3a19 	vldr	s7, [r0, #-100]	; 0xffffff9c
 80090ca:	eee4 7a24 	vfma.f32	s15, s8, s9
 80090ce:	ed1c 4a18 	vldr	s8, [ip, #-96]	; 0xffffffa0
 80090d2:	ed50 4a18 	vldr	s9, [r0, #-96]	; 0xffffffa0
 80090d6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80090da:	ed1c 5a17 	vldr	s10, [ip, #-92]	; 0xffffffa4
 80090de:	ed50 5a17 	vldr	s11, [r0, #-92]	; 0xffffffa4
 80090e2:	eee2 7a22 	vfma.f32	s15, s4, s5
 80090e6:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 80090ea:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 80090ee:	eee3 7a23 	vfma.f32	s15, s6, s7
 80090f2:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 80090f6:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 80090fa:	eee4 7a24 	vfma.f32	s15, s8, s9
 80090fe:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 8009102:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8009106:	eee5 7a25 	vfma.f32	s15, s10, s11
 800910a:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800910e:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 8009112:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009116:	eee1 7a21 	vfma.f32	s15, s2, s3
 800911a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800911e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009122:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009126:	eee5 7a25 	vfma.f32	s15, s10, s11
 800912a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800912e:	db95      	blt.n	800905c <ai_conv2d_stripe_f32.constprop.0+0x3d0>
 8009130:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009132:	4471      	add	r1, lr
 8009134:	4472      	add	r2, lr
 8009136:	4283      	cmp	r3, r0
 8009138:	dd11      	ble.n	800915e <ai_conv2d_stripe_f32.constprop.0+0x4d2>
 800913a:	4684      	mov	ip, r0
 800913c:	468a      	mov	sl, r1
 800913e:	4690      	mov	r8, r2
 8009140:	ecf8 5a01 	vldmia	r8!, {s11}
 8009144:	ecfa 7a01 	vldmia	sl!, {s15}
 8009148:	f10c 0c01 	add.w	ip, ip, #1
 800914c:	4563      	cmp	r3, ip
 800914e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009152:	d1f5      	bne.n	8009140 <ai_conv2d_stripe_f32.constprop.0+0x4b4>
 8009154:	1a18      	subs	r0, r3, r0
 8009156:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800915a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800915e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009160:	4401      	add	r1, r0
 8009162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009164:	4402      	add	r2, r0
 8009166:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009168:	3401      	adds	r4, #1
 800916a:	42a0      	cmp	r0, r4
 800916c:	f47f af6c 	bne.w	8009048 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 8009170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009176:	ed83 7a00 	vstr	s14, [r3]
 800917a:	440b      	add	r3, r1
 800917c:	4491      	add	r9, r2
 800917e:	647b      	str	r3, [r7, #68]	; 0x44
 8009180:	1aad      	subs	r5, r5, r2
 8009182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009186:	4413      	add	r3, r2
 8009188:	657b      	str	r3, [r7, #84]	; 0x54
 800918a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800918e:	f10b 0b01 	add.w	fp, fp, #1
 8009192:	455b      	cmp	r3, fp
 8009194:	f47f af21 	bne.w	8008fda <ai_conv2d_stripe_f32.constprop.0+0x34e>
 8009198:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800919a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800919c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919e:	440a      	add	r2, r1
 80091a0:	66ba      	str	r2, [r7, #104]	; 0x68
 80091a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091a4:	3204      	adds	r2, #4
 80091a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80091ac:	3301      	adds	r3, #1
 80091ae:	429a      	cmp	r2, r3
 80091b0:	653b      	str	r3, [r7, #80]	; 0x50
 80091b2:	f43f aea7 	beq.w	8008f04 <ai_conv2d_stripe_f32.constprop.0+0x278>
 80091b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f aefa 	bne.w	8008fb2 <ai_conv2d_stripe_f32.constprop.0+0x326>
 80091be:	eef0 6a46 	vmov.f32	s13, s12
 80091c2:	e6fa      	b.n	8008fba <ai_conv2d_stripe_f32.constprop.0+0x32e>
 80091c4:	fb0e f102 	mul.w	r1, lr, r2
 80091c8:	2901      	cmp	r1, #1
 80091ca:	f47f ad81 	bne.w	8008cd0 <ai_conv2d_stripe_f32.constprop.0+0x44>
 80091ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80091d2:	2a00      	cmp	r2, #0
 80091d4:	f43f ae96 	beq.w	8008f04 <ai_conv2d_stripe_f32.constprop.0+0x278>
 80091d8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80091dc:	ed5f 3aaf 	vldr	s7, [pc, #-700]	; 8008f24 <ai_conv2d_stripe_f32.constprop.0+0x298>
 80091e0:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 80091e4:	eb0c 0203 	add.w	r2, ip, r3
 80091e8:	fb01 f202 	mul.w	r2, r1, r2
 80091ec:	61fa      	str	r2, [r7, #28]
 80091ee:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80091f2:	1a1a      	subs	r2, r3, r0
 80091f4:	442a      	add	r2, r5
 80091f6:	fb01 f202 	mul.w	r2, r1, r2
 80091fa:	1ac1      	subs	r1, r0, r3
 80091fc:	64f9      	str	r1, [r7, #76]	; 0x4c
 80091fe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009202:	fb03 f301 	mul.w	r3, r3, r1
 8009206:	64bb      	str	r3, [r7, #72]	; 0x48
 8009208:	0093      	lsls	r3, r2, #2
 800920a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800920c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	63bb      	str	r3, [r7, #56]	; 0x38
 8009214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009218:	f1c3 0b00 	rsb	fp, r3, #0
 800921c:	00f3      	lsls	r3, r6, #3
 800921e:	623b      	str	r3, [r7, #32]
 8009220:	2300      	movs	r3, #0
 8009222:	653b      	str	r3, [r7, #80]	; 0x50
 8009224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009228:	fbb3 f3f6 	udiv	r3, r3, r6
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009232:	2b00      	cmp	r3, #0
 8009234:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8009238:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800923c:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 8009240:	f2c0 80ea 	blt.w	8009418 <ai_conv2d_stripe_f32.constprop.0+0x78c>
 8009244:	2500      	movs	r5, #0
 8009246:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009248:	462b      	mov	r3, r5
 800924a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800924e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8009252:	69fc      	ldr	r4, [r7, #28]
 8009254:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8009256:	445a      	add	r2, fp
 8009258:	4282      	cmp	r2, r0
 800925a:	bf28      	it	cs
 800925c:	4602      	movcs	r2, r0
 800925e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	1904      	adds	r4, r0, r4
 8009266:	2e00      	cmp	r6, #0
 8009268:	f000 822b 	beq.w	80096c2 <ai_conv2d_stripe_f32.constprop.0+0xa36>
 800926c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800926e:	647e      	str	r6, [r7, #68]	; 0x44
 8009270:	429e      	cmp	r6, r3
 8009272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009274:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8009278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800927c:	eba3 0002 	sub.w	r0, r3, r2
 8009280:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009284:	fb03 f000 	mul.w	r0, r3, r0
 8009288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800928c:	bf14      	ite	ne
 800928e:	eeb0 3a62 	vmovne.f32	s6, s5
 8009292:	eeb0 3a63 	vmoveq.f32	s6, s7
 8009296:	1a9b      	subs	r3, r3, r2
 8009298:	442c      	add	r4, r5
 800929a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800929c:	fb08 5e04 	mla	lr, r8, r4, r5
 80092a0:	eb0e 0408 	add.w	r4, lr, r8
 80092a4:	45a6      	cmp	lr, r4
 80092a6:	62bc      	str	r4, [r7, #40]	; 0x28
 80092a8:	f080 809d 	bcs.w	80093e6 <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80092ac:	0080      	lsls	r0, r0, #2
 80092ae:	6378      	str	r0, [r7, #52]	; 0x34
 80092b0:	e9d7 0428 	ldrd	r0, r4, [r7, #160]	; 0xa0
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	633b      	str	r3, [r7, #48]	; 0x30
 80092b8:	42a0      	cmp	r0, r4
 80092ba:	f022 0303 	bic.w	r3, r2, #3
 80092be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092c0:	f200 8091 	bhi.w	80093e6 <ai_conv2d_stripe_f32.constprop.0+0x75a>
 80092c4:	1e58      	subs	r0, r3, #1
 80092c6:	0880      	lsrs	r0, r0, #2
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	fb00 a00a 	mla	r0, r0, sl, sl
 80092ce:	6138      	str	r0, [r7, #16]
 80092d0:	f04f 0900 	mov.w	r9, #0
 80092d4:	0118      	lsls	r0, r3, #4
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	6178      	str	r0, [r7, #20]
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 80092e0:	f8c7 b008 	str.w	fp, [r7, #8]
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092e8:	4499      	add	r9, r3
 80092ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ec:	181c      	adds	r4, r3, r0
 80092ee:	65bc      	str	r4, [r7, #88]	; 0x58
 80092f0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80092f2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80092f6:	1820      	adds	r0, r4, r0
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
 80092fa:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80092fe:	6438      	str	r0, [r7, #64]	; 0x40
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009304:	ecb3 7a01 	vldmia	r3!, {s14}
 8009308:	65bb      	str	r3, [r7, #88]	; 0x58
 800930a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930c:	2b00      	cmp	r3, #0
 800930e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009312:	dd57      	ble.n	80093c4 <ai_conv2d_stripe_f32.constprop.0+0x738>
 8009314:	4675      	mov	r5, lr
 8009316:	f04f 0b00 	mov.w	fp, #0
 800931a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfd8      	it	le
 8009320:	2400      	movle	r4, #0
 8009322:	dd32      	ble.n	800938a <ai_conv2d_stripe_f32.constprop.0+0x6fe>
 8009324:	6a38      	ldr	r0, [r7, #32]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	182c      	adds	r4, r5, r0
 800932a:	f101 0310 	add.w	r3, r1, #16
 800932e:	4628      	mov	r0, r5
 8009330:	2600      	movs	r6, #0
 8009332:	eb00 0c08 	add.w	ip, r0, r8
 8009336:	ed13 4a03 	vldr	s8, [r3, #-12]
 800933a:	eddc 7a00 	vldr	s15, [ip]
 800933e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009342:	ed90 5a00 	vldr	s10, [r0]
 8009346:	edd4 6a00 	vldr	s13, [r4]
 800934a:	ed53 5a02 	vldr	s11, [r3, #-8]
 800934e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8009352:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009354:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009358:	eb04 0c08 	add.w	ip, r4, r8
 800935c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009360:	3604      	adds	r6, #4
 8009362:	4296      	cmp	r6, r2
 8009364:	f103 0310 	add.w	r3, r3, #16
 8009368:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800936c:	4450      	add	r0, sl
 800936e:	4454      	add	r4, sl
 8009370:	eddc 6a00 	vldr	s13, [ip]
 8009374:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800937c:	dbd9      	blt.n	8009332 <ai_conv2d_stripe_f32.constprop.0+0x6a6>
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	68fc      	ldr	r4, [r7, #12]
 8009384:	441d      	add	r5, r3
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	4419      	add	r1, r3
 800938a:	42a2      	cmp	r2, r4
 800938c:	dd11      	ble.n	80093b2 <ai_conv2d_stripe_f32.constprop.0+0x726>
 800938e:	4620      	mov	r0, r4
 8009390:	462b      	mov	r3, r5
 8009392:	460e      	mov	r6, r1
 8009394:	edd3 7a00 	vldr	s15, [r3]
 8009398:	ecf6 6a01 	vldmia	r6!, {s13}
 800939c:	3001      	adds	r0, #1
 800939e:	4290      	cmp	r0, r2
 80093a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093a4:	4443      	add	r3, r8
 80093a6:	d1f5      	bne.n	8009394 <ai_conv2d_stripe_f32.constprop.0+0x708>
 80093a8:	1b14      	subs	r4, r2, r4
 80093aa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093ae:	fb04 5508 	mla	r5, r4, r8, r5
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	441d      	add	r5, r3
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	4419      	add	r1, r3
 80093ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093bc:	f10b 0b01 	add.w	fp, fp, #1
 80093c0:	459b      	cmp	fp, r3
 80093c2:	d1aa      	bne.n	800931a <ai_conv2d_stripe_f32.constprop.0+0x68e>
 80093c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80093c8:	eca3 7a01 	vstmia	r3!, {s14}
 80093cc:	643b      	str	r3, [r7, #64]	; 0x40
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	4419      	add	r1, r3
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	4283      	cmp	r3, r0
 80093d6:	d194      	bne.n	8009302 <ai_conv2d_stripe_f32.constprop.0+0x676>
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	f10e 0e04 	add.w	lr, lr, #4
 80093de:	459e      	cmp	lr, r3
 80093e0:	d380      	bcc.n	80092e4 <ai_conv2d_stripe_f32.constprop.0+0x658>
 80093e2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80093e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ec:	440a      	add	r2, r1
 80093ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80093f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80093f6:	440a      	add	r2, r1
 80093f8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80093fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009400:	3301      	adds	r3, #1
 8009402:	429a      	cmp	r2, r3
 8009404:	653b      	str	r3, [r7, #80]	; 0x50
 8009406:	ebab 0b01 	sub.w	fp, fp, r1
 800940a:	f43f ad7b 	beq.w	8008f04 <ai_conv2d_stripe_f32.constprop.0+0x278>
 800940e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009412:	2b00      	cmp	r3, #0
 8009414:	f6bf af16 	bge.w	8009244 <ai_conv2d_stripe_f32.constprop.0+0x5b8>
 8009418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800941a:	465b      	mov	r3, fp
 800941c:	eb02 010b 	add.w	r1, r2, fp
 8009420:	465d      	mov	r5, fp
 8009422:	e712      	b.n	800924a <ai_conv2d_stripe_f32.constprop.0+0x5be>
 8009424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009428:	462b      	mov	r3, r5
 800942a:	442a      	add	r2, r5
 800942c:	e5dc      	b.n	8008fe8 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800942e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009432:	fb02 f505 	mul.w	r5, r2, r5
 8009436:	fb06 f205 	mul.w	r2, r6, r5
 800943a:	0095      	lsls	r5, r2, #2
 800943c:	637a      	str	r2, [r7, #52]	; 0x34
 800943e:	1dea      	adds	r2, r5, #7
 8009440:	f022 0207 	bic.w	r2, r2, #7
 8009444:	4669      	mov	r1, sp
 8009446:	ebad 0d02 	sub.w	sp, sp, r2
 800944a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800944e:	ee08 1a90 	vmov	s17, r1
 8009452:	46e9      	mov	r9, sp
 8009454:	2a00      	cmp	r2, #0
 8009456:	f000 8130 	beq.w	80096ba <ai_conv2d_stripe_f32.constprop.0+0xa2e>
 800945a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800945e:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 80096f8 <ai_conv2d_stripe_f32.constprop.0+0xa6c>
 8009462:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 8009466:	fb02 f303 	mul.w	r3, r2, r3
 800946a:	647b      	str	r3, [r7, #68]	; 0x44
 800946c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800946e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009470:	fb03 f306 	mul.w	r3, r3, r6
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	623b      	str	r3, [r7, #32]
 8009478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800947c:	fb03 f306 	mul.w	r3, r3, r6
 8009480:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
 8009486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800948e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009490:	64bb      	str	r3, [r7, #72]	; 0x48
 8009492:	2300      	movs	r3, #0
 8009494:	46ca      	mov	sl, r9
 8009496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009498:	46a9      	mov	r9, r5
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	b123      	cbz	r3, 80094a8 <ai_conv2d_stripe_f32.constprop.0+0x81c>
 800949e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094a0:	464a      	mov	r2, r9
 80094a2:	4650      	mov	r0, sl
 80094a4:	f001 fa24 	bl	800a8f0 <memcpy>
 80094a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 8120 	beq.w	80096f0 <ai_conv2d_stripe_f32.constprop.0+0xa64>
 80094b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b2:	ecf3 6a01 	vldmia	r3!, {s13}
 80094b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80094b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 80ee 	beq.w	800969e <ai_conv2d_stripe_f32.constprop.0+0xa12>
 80094c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094c6:	f8c7 901c 	str.w	r9, [r7, #28]
 80094ca:	425d      	negs	r5, r3
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	653b      	str	r3, [r7, #80]	; 0x50
 80094d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d2:	643b      	str	r3, [r7, #64]	; 0x40
 80094d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094d8:	657b      	str	r3, [r7, #84]	; 0x54
 80094da:	2300      	movs	r3, #0
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f2c0 8100 	blt.w	80096e6 <ai_conv2d_stripe_f32.constprop.0+0xa5a>
 80094e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ea:	2300      	movs	r3, #0
 80094ec:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80094f0:	f8d7 60b0 	ldr.w	r6, [r7, #176]	; 0xb0
 80094f4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80094f6:	4428      	add	r0, r5
 80094f8:	42b0      	cmp	r0, r6
 80094fa:	bf94      	ite	ls
 80094fc:	ebc3 0300 	rsbls	r3, r3, r0
 8009500:	ebc3 0306 	rsbhi	r3, r3, r6
 8009504:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009508:	eba0 0c03 	sub.w	ip, r0, r3
 800950c:	1af0      	subs	r0, r6, r3
 800950e:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8009512:	fb06 f303 	mul.w	r3, r6, r3
 8009516:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8009518:	2e00      	cmp	r6, #0
 800951a:	fb02 a204 	mla	r2, r2, r4, sl
 800951e:	eeb0 7a66 	vmov.f32	s14, s13
 8009522:	f340 80a2 	ble.w	800966a <ai_conv2d_stripe_f32.constprop.0+0x9de>
 8009526:	fb04 f000 	mul.w	r0, r4, r0
 800952a:	f023 060f 	bic.w	r6, r3, #15
 800952e:	6338      	str	r0, [r7, #48]	; 0x30
 8009530:	1e70      	subs	r0, r6, #1
 8009532:	0900      	lsrs	r0, r0, #4
 8009534:	3001      	adds	r0, #1
 8009536:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800953a:	0100      	lsls	r0, r0, #4
 800953c:	fb04 fc0c 	mul.w	ip, r4, ip
 8009540:	62b8      	str	r0, [r7, #40]	; 0x28
 8009542:	2400      	movs	r4, #0
 8009544:	2e00      	cmp	r6, #0
 8009546:	bfd8      	it	le
 8009548:	2000      	movle	r0, #0
 800954a:	dd72      	ble.n	8009632 <ai_conv2d_stripe_f32.constprop.0+0x9a6>
 800954c:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 8009550:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009554:	f04f 0900 	mov.w	r9, #0
 8009558:	ed10 5a0f 	vldr	s10, [r0, #-60]	; 0xffffffc4
 800955c:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 8009560:	ed5e 5a10 	vldr	s11, [lr, #-64]	; 0xffffffc0
 8009564:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 8009568:	ed1e 4a0d 	vldr	s8, [lr, #-52]	; 0xffffffcc
 800956c:	ed5e 4a0c 	vldr	s9, [lr, #-48]	; 0xffffffd0
 8009570:	ed5e 2a0a 	vldr	s5, [lr, #-40]	; 0xffffffd8
 8009574:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 8009578:	ed5e 3a09 	vldr	s7, [lr, #-36]	; 0xffffffdc
 800957c:	ed5e 0a06 	vldr	s1, [lr, #-24]	; 0xffffffe8
 8009580:	ed10 1a06 	vldr	s2, [r0, #-24]	; 0xffffffe8
 8009584:	ed5e 1a05 	vldr	s3, [lr, #-20]	; 0xffffffec
 8009588:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800958c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009590:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 8009594:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009598:	f109 0910 	add.w	r9, r9, #16
 800959c:	45b1      	cmp	r9, r6
 800959e:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 80095a2:	ed10 6a0d 	vldr	s12, [r0, #-52]	; 0xffffffcc
 80095a6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80095aa:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 80095ae:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80095b2:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 80095b6:	ed5e 5a1b 	vldr	s11, [lr, #-108]	; 0xffffff94
 80095ba:	eee4 7a06 	vfma.f32	s15, s8, s12
 80095be:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 80095c2:	ed10 4a19 	vldr	s8, [r0, #-100]	; 0xffffff9c
 80095c6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80095ca:	ed5e 4a18 	vldr	s9, [lr, #-96]	; 0xffffffa0
 80095ce:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 80095d2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80095d6:	ed5e 5a17 	vldr	s11, [lr, #-92]	; 0xffffffa4
 80095da:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 80095de:	eee2 7a83 	vfma.f32	s15, s5, s6
 80095e2:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 80095e6:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 80095ea:	eee3 7a84 	vfma.f32	s15, s7, s8
 80095ee:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 80095f2:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 80095f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80095fa:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 80095fe:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8009602:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009606:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800960a:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800960e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009612:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009616:	eee2 7a83 	vfma.f32	s15, s5, s6
 800961a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800961e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009622:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800962a:	db95      	blt.n	8009558 <ai_conv2d_stripe_f32.constprop.0+0x8cc>
 800962c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800962e:	4441      	add	r1, r8
 8009630:	4442      	add	r2, r8
 8009632:	4283      	cmp	r3, r0
 8009634:	dd11      	ble.n	800965a <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 8009636:	4686      	mov	lr, r0
 8009638:	468b      	mov	fp, r1
 800963a:	4691      	mov	r9, r2
 800963c:	ecb9 6a01 	vldmia	r9!, {s12}
 8009640:	ecfb 7a01 	vldmia	fp!, {s15}
 8009644:	f10e 0e01 	add.w	lr, lr, #1
 8009648:	4573      	cmp	r3, lr
 800964a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800964e:	d1f5      	bne.n	800963c <ai_conv2d_stripe_f32.constprop.0+0x9b0>
 8009650:	1a18      	subs	r0, r3, r0
 8009652:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8009656:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800965a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800965c:	4402      	add	r2, r0
 800965e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009660:	3401      	adds	r4, #1
 8009662:	42a0      	cmp	r0, r4
 8009664:	4461      	add	r1, ip
 8009666:	f47f af6d 	bne.w	8009544 <ai_conv2d_stripe_f32.constprop.0+0x8b8>
 800966a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800966c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800966e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009672:	ed82 7a00 	vstr	s14, [r2]
 8009676:	4401      	add	r1, r0
 8009678:	6579      	str	r1, [r7, #84]	; 0x54
 800967a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800967c:	440a      	add	r2, r1
 800967e:	643a      	str	r2, [r7, #64]	; 0x40
 8009680:	6a39      	ldr	r1, [r7, #32]
 8009682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009684:	440a      	add	r2, r1
 8009686:	653a      	str	r2, [r7, #80]	; 0x50
 8009688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800968c:	3301      	adds	r3, #1
 800968e:	429a      	cmp	r2, r3
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009692:	eba5 0500 	sub.w	r5, r5, r0
 8009696:	f47f af22 	bne.w	80094de <ai_conv2d_stripe_f32.constprop.0+0x852>
 800969a:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800969e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096a2:	444a      	add	r2, r9
 80096a4:	66ba      	str	r2, [r7, #104]	; 0x68
 80096a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096a8:	3204      	adds	r2, #4
 80096aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80096b0:	3301      	adds	r3, #1
 80096b2:	429a      	cmp	r2, r3
 80096b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096b6:	f47f aef0 	bne.w	800949a <ai_conv2d_stripe_f32.constprop.0+0x80e>
 80096ba:	ee18 3a90 	vmov	r3, s17
 80096be:	469d      	mov	sp, r3
 80096c0:	e420      	b.n	8008f04 <ai_conv2d_stripe_f32.constprop.0+0x278>
 80096c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096c4:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80096c6:	647e      	str	r6, [r7, #68]	; 0x44
 80096c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80096cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096d0:	1a98      	subs	r0, r3, r2
 80096d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096d6:	fb03 f000 	mul.w	r0, r3, r0
 80096da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80096de:	eeb0 3a63 	vmov.f32	s6, s7
 80096e2:	1a9b      	subs	r3, r3, r2
 80096e4:	e5d8      	b.n	8009298 <ai_conv2d_stripe_f32.constprop.0+0x60c>
 80096e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096ea:	462b      	mov	r3, r5
 80096ec:	442a      	add	r2, r5
 80096ee:	e6fd      	b.n	80094ec <ai_conv2d_stripe_f32.constprop.0+0x860>
 80096f0:	eef0 6a48 	vmov.f32	s13, s16
 80096f4:	e6e0      	b.n	80094b8 <ai_conv2d_stripe_f32.constprop.0+0x82c>
 80096f6:	bf00      	nop
 80096f8:	00000000 	.word	0x00000000

080096fc <ai_dict_decompress_f32>:
 80096fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009700:	9d08      	ldr	r5, [sp, #32]
 8009702:	2b04      	cmp	r3, #4
 8009704:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009708:	d00e      	beq.n	8009728 <ai_dict_decompress_f32+0x2c>
 800970a:	2b08      	cmp	r3, #8
 800970c:	d10a      	bne.n	8009724 <ai_dict_decompress_f32+0x28>
 800970e:	42a8      	cmp	r0, r5
 8009710:	d208      	bcs.n	8009724 <ai_dict_decompress_f32+0x28>
 8009712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f840 3b04 	str.w	r3, [r0], #4
 8009720:	4285      	cmp	r5, r0
 8009722:	d8f6      	bhi.n	8009712 <ai_dict_decompress_f32+0x16>
 8009724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	085e      	lsrs	r6, r3, #1
 800972c:	f003 0701 	and.w	r7, r3, #1
 8009730:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8009734:	f106 38ff 	add.w	r8, r6, #4294967295
 8009738:	42a8      	cmp	r0, r5
 800973a:	d2f3      	bcs.n	8009724 <ai_dict_decompress_f32+0x28>
 800973c:	b33e      	cbz	r6, 800978e <ai_dict_decompress_f32+0x92>
 800973e:	f100 0e08 	add.w	lr, r0, #8
 8009742:	f101 3cff 	add.w	ip, r1, #4294967295
 8009746:	eb01 0408 	add.w	r4, r1, r8
 800974a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800974e:	091b      	lsrs	r3, r3, #4
 8009750:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009754:	f10e 0e08 	add.w	lr, lr, #8
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f84e 3c10 	str.w	r3, [lr, #-16]
 800975e:	f89c 3000 	ldrb.w	r3, [ip]
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800976a:	4564      	cmp	r4, ip
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8009772:	d1ea      	bne.n	800974a <ai_dict_decompress_f32+0x4e>
 8009774:	4431      	add	r1, r6
 8009776:	4448      	add	r0, r9
 8009778:	2f00      	cmp	r7, #0
 800977a:	d0dd      	beq.n	8009738 <ai_dict_decompress_f32+0x3c>
 800977c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009780:	091b      	lsrs	r3, r3, #4
 8009782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f840 3b04 	str.w	r3, [r0], #4
 800978c:	e7d4      	b.n	8009738 <ai_dict_decompress_f32+0x3c>
 800978e:	2f00      	cmp	r7, #0
 8009790:	d1f4      	bne.n	800977c <ai_dict_decompress_f32+0x80>
 8009792:	42a8      	cmp	r0, r5
 8009794:	d3fd      	bcc.n	8009792 <ai_dict_decompress_f32+0x96>
 8009796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800979a:	bf00      	nop

0800979c <forward_conv2d>:
 800979c:	6982      	ldr	r2, [r0, #24]
 800979e:	8813      	ldrh	r3, [r2, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 8110 	beq.w	80099c6 <forward_conv2d+0x22a>
 80097a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	ed2d 8b04 	vpush	{d8-d9}
 80097ae:	6852      	ldr	r2, [r2, #4]
 80097b0:	6851      	ldr	r1, [r2, #4]
 80097b2:	b0a9      	sub	sp, #164	; 0xa4
 80097b4:	4604      	mov	r4, r0
 80097b6:	b101      	cbz	r1, 80097ba <forward_conv2d+0x1e>
 80097b8:	6809      	ldr	r1, [r1, #0]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	f000 8151 	beq.w	8009a62 <forward_conv2d+0x2c6>
 80097c0:	6915      	ldr	r5, [r2, #16]
 80097c2:	b105      	cbz	r5, 80097c6 <forward_conv2d+0x2a>
 80097c4:	682d      	ldr	r5, [r5, #0]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	f000 80ff 	beq.w	80099ca <forward_conv2d+0x22e>
 80097cc:	69d3      	ldr	r3, [r2, #28]
 80097ce:	8b12      	ldrh	r2, [r2, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8137 	beq.w	8009a44 <forward_conv2d+0x2a8>
 80097d6:	2a01      	cmp	r2, #1
 80097d8:	681e      	ldr	r6, [r3, #0]
 80097da:	f240 8139 	bls.w	8009a50 <forward_conv2d+0x2b4>
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	ee08 2a10 	vmov	s16, r2
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	68ca      	ldr	r2, [r1, #12]
 80097e8:	6989      	ldr	r1, [r1, #24]
 80097ea:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80097ee:	6889      	ldr	r1, [r1, #8]
 80097f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80097f2:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 80097f6:	69b7      	ldr	r7, [r6, #24]
 80097f8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80097fc:	f8dc b008 	ldr.w	fp, [ip, #8]
 8009800:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 8009804:	ee09 1a10 	vmov	s18, r1
 8009808:	6851      	ldr	r1, [r2, #4]
 800980a:	911b      	str	r1, [sp, #108]	; 0x6c
 800980c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009810:	9118      	str	r1, [sp, #96]	; 0x60
 8009812:	68d1      	ldr	r1, [r2, #12]
 8009814:	6892      	ldr	r2, [r2, #8]
 8009816:	9223      	str	r2, [sp, #140]	; 0x8c
 8009818:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800981a:	9224      	str	r2, [sp, #144]	; 0x90
 800981c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800981e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009820:	6802      	ldr	r2, [r0, #0]
 8009822:	9211      	str	r2, [sp, #68]	; 0x44
 8009824:	6842      	ldr	r2, [r0, #4]
 8009826:	921e      	str	r2, [sp, #120]	; 0x78
 8009828:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800982a:	9210      	str	r2, [sp, #64]	; 0x40
 800982c:	f8de 2008 	ldr.w	r2, [lr, #8]
 8009830:	9219      	str	r2, [sp, #100]	; 0x64
 8009832:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009836:	9122      	str	r1, [sp, #136]	; 0x88
 8009838:	921a      	str	r2, [sp, #104]	; 0x68
 800983a:	69e2      	ldr	r2, [r4, #28]
 800983c:	9225      	str	r2, [sp, #148]	; 0x94
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	ee08 2a90 	vmov	s17, r2
 8009844:	ee18 2a10 	vmov	r2, s16
 8009848:	b11a      	cbz	r2, 8009852 <forward_conv2d+0xb6>
 800984a:	6992      	ldr	r2, [r2, #24]
 800984c:	6892      	ldr	r2, [r2, #8]
 800984e:	ee08 2a10 	vmov	s16, r2
 8009852:	69aa      	ldr	r2, [r5, #24]
 8009854:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8009858:	6892      	ldr	r2, [r2, #8]
 800985a:	9216      	str	r2, [sp, #88]	; 0x58
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 80de 	beq.w	8009a1e <forward_conv2d+0x282>
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	2a00      	cmp	r2, #0
 8009866:	f000 80e3 	beq.w	8009a30 <forward_conv2d+0x294>
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	9327      	str	r3, [sp, #156]	; 0x9c
 8009874:	e9d2 0100 	ldrd	r0, r1, [r2]
 8009878:	f000 ffce 	bl	800a818 <ai_array_get_byte_size>
 800987c:	69b7      	ldr	r7, [r6, #24]
 800987e:	9013      	str	r0, [sp, #76]	; 0x4c
 8009880:	4a7b      	ldr	r2, [pc, #492]	; (8009a70 <forward_conv2d+0x2d4>)
 8009882:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009884:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2900      	cmp	r1, #0
 800988a:	bf08      	it	eq
 800988c:	4611      	moveq	r1, r2
 800988e:	9112      	str	r1, [sp, #72]	; 0x48
 8009890:	fa1f f18a 	uxth.w	r1, sl
 8009894:	1e70      	subs	r0, r6, #1
 8009896:	3901      	subs	r1, #1
 8009898:	fb00 6101 	mla	r1, r0, r1, r6
 800989c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80098a0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80098a2:	911c      	str	r1, [sp, #112]	; 0x70
 80098a4:	3a01      	subs	r2, #1
 80098a6:	1e41      	subs	r1, r0, #1
 80098a8:	fb01 0202 	mla	r2, r1, r2, r0
 80098ac:	921d      	str	r2, [sp, #116]	; 0x74
 80098ae:	f3c3 4243 	ubfx	r2, r3, #17, #4
 80098b2:	2a04      	cmp	r2, #4
 80098b4:	f000 808c 	beq.w	80099d0 <forward_conv2d+0x234>
 80098b8:	2a08      	cmp	r2, #8
 80098ba:	f000 8089 	beq.w	80099d0 <forward_conv2d+0x234>
 80098be:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80098c2:	9315      	str	r3, [sp, #84]	; 0x54
 80098c4:	425b      	negs	r3, r3
 80098c6:	9314      	str	r3, [sp, #80]	; 0x50
 80098c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d076      	beq.n	80099bc <forward_conv2d+0x220>
 80098ce:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 80098d2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80098d6:	921e      	str	r2, [sp, #120]	; 0x78
 80098d8:	425b      	negs	r3, r3
 80098da:	fa0f f28a 	sxth.w	r2, sl
 80098de:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80098e2:	9321      	str	r3, [sp, #132]	; 0x84
 80098e4:	fb0b f30a 	mul.w	r3, fp, sl
 80098e8:	921f      	str	r2, [sp, #124]	; 0x7c
 80098ea:	9326      	str	r3, [sp, #152]	; 0x98
 80098ec:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80098f0:	9220      	str	r2, [sp, #128]	; 0x80
 80098f2:	2300      	movs	r3, #0
 80098f4:	4644      	mov	r4, r8
 80098f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80098f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80098fa:	920e      	str	r2, [sp, #56]	; 0x38
 80098fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009900:	920d      	str	r2, [sp, #52]	; 0x34
 8009902:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009904:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8009906:	2b00      	cmp	r3, #0
 8009908:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800990c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800990e:	930a      	str	r3, [sp, #40]	; 0x28
 8009910:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009912:	9307      	str	r3, [sp, #28]
 8009914:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009916:	9306      	str	r3, [sp, #24]
 8009918:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800991e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009920:	e9cd b303 	strd	fp, r3, [sp, #12]
 8009924:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009926:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800992a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009930:	4413      	add	r3, r2
 8009932:	bfa8      	it	ge
 8009934:	2200      	movge	r2, #0
 8009936:	9208      	str	r2, [sp, #32]
 8009938:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800993a:	4293      	cmp	r3, r2
 800993c:	bf28      	it	cs
 800993e:	4613      	movcs	r3, r2
 8009940:	9309      	str	r3, [sp, #36]	; 0x24
 8009942:	ee18 2a90 	vmov	r2, s17
 8009946:	ee18 3a10 	vmov	r3, s16
 800994a:	ee19 1a10 	vmov	r1, s18
 800994e:	4638      	mov	r0, r7
 8009950:	f7ff f99c 	bl	8008c8c <ai_conv2d_stripe_f32.constprop.0>
 8009954:	f1bb 0f00 	cmp.w	fp, #0
 8009958:	d020      	beq.n	800999c <forward_conv2d+0x200>
 800995a:	2600      	movs	r6, #0
 800995c:	464a      	mov	r2, r9
 800995e:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8009962:	9610      	str	r6, [sp, #64]	; 0x40
 8009964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009966:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009968:	9211      	str	r2, [sp, #68]	; 0x44
 800996a:	3301      	adds	r3, #1
 800996c:	9310      	str	r3, [sp, #64]	; 0x40
 800996e:	69ab      	ldr	r3, [r5, #24]
 8009970:	4629      	mov	r1, r5
 8009972:	609f      	str	r7, [r3, #8]
 8009974:	4628      	mov	r0, r5
 8009976:	4623      	mov	r3, r4
 8009978:	47b0      	blx	r6
 800997a:	444c      	add	r4, r9
 800997c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800997e:	eba4 0308 	sub.w	r3, r4, r8
 8009982:	4293      	cmp	r3, r2
 8009984:	bfa8      	it	ge
 8009986:	4644      	movge	r4, r8
 8009988:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800998a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800998c:	459b      	cmp	fp, r3
 800998e:	4457      	add	r7, sl
 8009990:	d1e8      	bne.n	8009964 <forward_conv2d+0x1c8>
 8009992:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009994:	4691      	mov	r9, r2
 8009996:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009998:	4413      	add	r3, r2
 800999a:	9316      	str	r3, [sp, #88]	; 0x58
 800999c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800999e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80099a2:	4413      	add	r3, r2
 80099a4:	9314      	str	r3, [sp, #80]	; 0x50
 80099a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	9315      	str	r3, [sp, #84]	; 0x54
 80099ac:	69ab      	ldr	r3, [r5, #24]
 80099ae:	68da      	ldr	r2, [r3, #12]
 80099b0:	609a      	str	r2, [r3, #8]
 80099b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80099b4:	3101      	adds	r1, #1
 80099b6:	428b      	cmp	r3, r1
 80099b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80099ba:	d19d      	bne.n	80098f8 <forward_conv2d+0x15c>
 80099bc:	b029      	add	sp, #164	; 0xa4
 80099be:	ecbd 8b04 	vpop	{d8-d9}
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	deff      	udf	#255	; 0xff
 80099ca:	2300      	movs	r3, #0
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	deff      	udf	#255	; 0xff
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	f43f af73 	beq.w	80098be <forward_conv2d+0x122>
 80099d8:	69a1      	ldr	r1, [r4, #24]
 80099da:	8808      	ldrh	r0, [r1, #0]
 80099dc:	2803      	cmp	r0, #3
 80099de:	d943      	bls.n	8009a68 <forward_conv2d+0x2cc>
 80099e0:	6849      	ldr	r1, [r1, #4]
 80099e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80099e4:	2900      	cmp	r1, #0
 80099e6:	d037      	beq.n	8009a58 <forward_conv2d+0x2bc>
 80099e8:	6809      	ldr	r1, [r1, #0]
 80099ea:	2900      	cmp	r1, #0
 80099ec:	d034      	beq.n	8009a58 <forward_conv2d+0x2bc>
 80099ee:	698c      	ldr	r4, [r1, #24]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80099f6:	9401      	str	r4, [sp, #4]
 80099f8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80099fa:	9400      	str	r4, [sp, #0]
 80099fc:	ee18 4a90 	vmov	r4, s17
 8009a00:	2800      	cmp	r0, #0
 8009a02:	bf18      	it	ne
 8009a04:	4604      	movne	r4, r0
 8009a06:	ee08 4a90 	vmov	s17, r4
 8009a0a:	f3c3 14c6 	ubfx	r4, r3, #7, #7
 8009a0e:	f3c3 5341 	ubfx	r3, r3, #21, #2
 8009a12:	fa44 f303 	asr.w	r3, r4, r3
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f7ff fe70 	bl	80096fc <ai_dict_decompress_f32>
 8009a1c:	e74f      	b.n	80098be <forward_conv2d+0x122>
 8009a1e:	f1b8 0f00 	cmp.w	r8, #0
 8009a22:	d00b      	beq.n	8009a3c <forward_conv2d+0x2a0>
 8009a24:	9327      	str	r3, [sp, #156]	; 0x9c
 8009a26:	2301      	movs	r3, #1
 8009a28:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8009a2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a2e:	e727      	b.n	8009880 <forward_conv2d+0xe4>
 8009a30:	f1b8 0f00 	cmp.w	r8, #0
 8009a34:	d001      	beq.n	8009a3a <forward_conv2d+0x29e>
 8009a36:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8009a3e:	2301      	movs	r3, #1
 8009a40:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a42:	e71d      	b.n	8009880 <forward_conv2d+0xe4>
 8009a44:	2a01      	cmp	r2, #1
 8009a46:	d90a      	bls.n	8009a5e <forward_conv2d+0x2c2>
 8009a48:	ee08 3a10 	vmov	s16, r3
 8009a4c:	461e      	mov	r6, r3
 8009a4e:	e6ca      	b.n	80097e6 <forward_conv2d+0x4a>
 8009a50:	2200      	movs	r2, #0
 8009a52:	ee08 2a10 	vmov	s16, r2
 8009a56:	e6c5      	b.n	80097e4 <forward_conv2d+0x48>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	deff      	udf	#255	; 0xff
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	deff      	udf	#255	; 0xff
 8009a62:	2300      	movs	r3, #0
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	deff      	udf	#255	; 0xff
 8009a68:	2300      	movs	r3, #0
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	deff      	udf	#255	; 0xff
 8009a6e:	bf00      	nop
 8009a70:	08008c89 	.word	0x08008c89

08009a74 <forward_dense>:
 8009a74:	6983      	ldr	r3, [r0, #24]
 8009a76:	881a      	ldrh	r2, [r3, #0]
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	f000 8181 	beq.w	8009d80 <forward_dense+0x30c>
 8009a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a82:	ed2d 8b02 	vpush	{d8}
 8009a86:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009a8a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009a8e:	b095      	sub	sp, #84	; 0x54
 8009a90:	b105      	cbz	r5, 8009a94 <forward_dense+0x20>
 8009a92:	682d      	ldr	r5, [r5, #0]
 8009a94:	2a01      	cmp	r2, #1
 8009a96:	f000 828f 	beq.w	8009fb8 <forward_dense+0x544>
 8009a9a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8009a9e:	b106      	cbz	r6, 8009aa2 <forward_dense+0x2e>
 8009aa0:	6836      	ldr	r6, [r6, #0]
 8009aa2:	2a02      	cmp	r2, #2
 8009aa4:	f000 816e 	beq.w	8009d84 <forward_dense+0x310>
 8009aa8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 8274 	beq.w	8009f9c <forward_dense+0x528>
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8009aba:	6809      	ldr	r1, [r1, #0]
 8009abc:	910d      	str	r1, [sp, #52]	; 0x34
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	f240 826e 	bls.w	8009fa0 <forward_dense+0x52c>
 8009ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aca:	460b      	mov	r3, r1
 8009acc:	68e8      	ldr	r0, [r5, #12]
 8009ace:	68f7      	ldr	r7, [r6, #12]
 8009ad0:	6840      	ldr	r0, [r0, #4]
 8009ad2:	6999      	ldr	r1, [r3, #24]
 8009ad4:	9013      	str	r0, [sp, #76]	; 0x4c
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	680b      	ldr	r3, [r1, #0]
 8009ada:	9012      	str	r0, [sp, #72]	; 0x48
 8009adc:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8009ae0:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009ae4:	fb00 f404 	mul.w	r4, r0, r4
 8009ae8:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8009aec:	fa4e f000 	asr.w	r0, lr, r0
 8009af0:	2a03      	cmp	r2, #3
 8009af2:	9010      	str	r0, [sp, #64]	; 0x40
 8009af4:	f000 825d 	beq.w	8009fb2 <forward_dense+0x53e>
 8009af8:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009afc:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	f000 8246 	beq.w	8009f92 <forward_dense+0x51e>
 8009b06:	6812      	ldr	r2, [r2, #0]
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	f000 8242 	beq.w	8009f92 <forward_dense+0x51e>
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009b14:	f000 822c 	beq.w	8009f70 <forward_dense+0x4fc>
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	f000 8229 	beq.w	8009f70 <forward_dense+0x4fc>
 8009b1e:	f04f 0b00 	mov.w	fp, #0
 8009b22:	69b2      	ldr	r2, [r6, #24]
 8009b24:	69ab      	ldr	r3, [r5, #24]
 8009b26:	6891      	ldr	r1, [r2, #8]
 8009b28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	6952      	ldr	r2, [r2, #20]
 8009b2e:	9106      	str	r1, [sp, #24]
 8009b30:	fb07 f404 	mul.w	r4, r7, r4
 8009b34:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009b38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b3a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009b3e:	4281      	cmp	r1, r0
 8009b40:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8009b44:	900e      	str	r0, [sp, #56]	; 0x38
 8009b46:	940c      	str	r4, [sp, #48]	; 0x30
 8009b48:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8009b4c:	f080 8113 	bcs.w	8009d76 <forward_dense+0x302>
 8009b50:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009b52:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8009da0 <forward_dense+0x32c>
 8009b56:	f021 0201 	bic.w	r2, r1, #1
 8009b5a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009b5e:	9204      	str	r2, [sp, #16]
 8009b60:	f001 0201 	and.w	r2, r1, #1
 8009b64:	08c8      	lsrs	r0, r1, #3
 8009b66:	9208      	str	r2, [sp, #32]
 8009b68:	008a      	lsls	r2, r1, #2
 8009b6a:	f001 0a07 	and.w	sl, r1, #7
 8009b6e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b70:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8009b74:	3320      	adds	r3, #32
 8009b76:	465c      	mov	r4, fp
 8009b78:	9007      	str	r0, [sp, #28]
 8009b7a:	46cb      	mov	fp, r9
 8009b7c:	9205      	str	r2, [sp, #20]
 8009b7e:	9302      	str	r3, [sp, #8]
 8009b80:	46c1      	mov	r9, r8
 8009b82:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	9b02      	ldr	r3, [sp, #8]
 8009b8e:	3b20      	subs	r3, #32
 8009b90:	930a      	str	r3, [sp, #40]	; 0x28
 8009b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b94:	b10b      	cbz	r3, 8009b9a <forward_dense+0x126>
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	2c00      	cmp	r4, #0
 8009b9c:	f000 81da 	beq.w	8009f54 <forward_dense+0x4e0>
 8009ba0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009ba2:	2904      	cmp	r1, #4
 8009ba4:	9906      	ldr	r1, [sp, #24]
 8009ba6:	f000 80fd 	beq.w	8009da4 <forward_dense+0x330>
 8009baa:	4549      	cmp	r1, r9
 8009bac:	f080 80d2 	bcs.w	8009d54 <forward_dense+0x2e0>
 8009bb0:	460f      	mov	r7, r1
 8009bb2:	9907      	ldr	r1, [sp, #28]
 8009bb4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009bb8:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009bbc:	1c4e      	adds	r6, r1, #1
 8009bbe:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009bc2:	4694      	mov	ip, r2
 8009bc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009bc6:	468e      	mov	lr, r1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 80de 	beq.w	8009d8a <forward_dense+0x316>
 8009bce:	ecf3 2a01 	vldmia	r3!, {s5}
 8009bd2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009da0 <forward_dense+0x32c>
 8009bd6:	f1be 0f00 	cmp.w	lr, #0
 8009bda:	f000 80de 	beq.w	8009d9a <forward_dense+0x326>
 8009bde:	f10c 0108 	add.w	r1, ip, #8
 8009be2:	4640      	mov	r0, r8
 8009be4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009be8:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8009bec:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8009bf0:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8009bf4:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8009bf8:	ed10 5a04 	vldr	s10, [r0, #-16]
 8009bfc:	ed50 5a03 	vldr	s11, [r0, #-12]
 8009c00:	ed10 6a02 	vldr	s12, [r0, #-8]
 8009c04:	ed50 6a01 	vldr	s13, [r0, #-4]
 8009c08:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c0c:	edd5 7a00 	vldr	s15, [r5]
 8009c10:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8009c14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c18:	ee67 7a83 	vmul.f32	s15, s15, s6
 8009c1c:	ed95 3a00 	vldr	s6, [r5]
 8009c20:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8009c24:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009c28:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c2c:	3108      	adds	r1, #8
 8009c2e:	edd5 3a00 	vldr	s7, [r5]
 8009c32:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8009c36:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009c3a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c3e:	3020      	adds	r0, #32
 8009c40:	ed95 4a00 	vldr	s8, [r5]
 8009c44:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009c48:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009c4c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c50:	edd5 4a00 	vldr	s9, [r5]
 8009c54:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8009c58:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009c5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c60:	ed95 5a00 	vldr	s10, [r5]
 8009c64:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009c68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009c6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c70:	edd5 5a00 	vldr	s11, [r5]
 8009c74:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8009c78:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009c7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c80:	428e      	cmp	r6, r1
 8009c82:	ed95 6a00 	vldr	s12, [r5]
 8009c86:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009c8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c8e:	d1a9      	bne.n	8009be4 <forward_dense+0x170>
 8009c90:	f1a6 0108 	sub.w	r1, r6, #8
 8009c94:	4650      	mov	r0, sl
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	d04a      	beq.n	8009d30 <forward_dense+0x2bc>
 8009c9a:	780d      	ldrb	r5, [r1, #0]
 8009c9c:	edd0 6a00 	vldr	s13, [r0]
 8009ca0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009ca4:	edd5 7a00 	vldr	s15, [r5]
 8009ca8:	2a01      	cmp	r2, #1
 8009caa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cae:	d03f      	beq.n	8009d30 <forward_dense+0x2bc>
 8009cb0:	784d      	ldrb	r5, [r1, #1]
 8009cb2:	edd0 6a01 	vldr	s13, [r0, #4]
 8009cb6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009cba:	edd5 7a00 	vldr	s15, [r5]
 8009cbe:	2a02      	cmp	r2, #2
 8009cc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cc4:	d034      	beq.n	8009d30 <forward_dense+0x2bc>
 8009cc6:	788d      	ldrb	r5, [r1, #2]
 8009cc8:	edd0 6a02 	vldr	s13, [r0, #8]
 8009ccc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009cd0:	edd5 7a00 	vldr	s15, [r5]
 8009cd4:	2a03      	cmp	r2, #3
 8009cd6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cda:	d029      	beq.n	8009d30 <forward_dense+0x2bc>
 8009cdc:	78cd      	ldrb	r5, [r1, #3]
 8009cde:	edd0 6a03 	vldr	s13, [r0, #12]
 8009ce2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009ce6:	edd5 7a00 	vldr	s15, [r5]
 8009cea:	2a04      	cmp	r2, #4
 8009cec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cf0:	d01e      	beq.n	8009d30 <forward_dense+0x2bc>
 8009cf2:	790d      	ldrb	r5, [r1, #4]
 8009cf4:	edd0 6a04 	vldr	s13, [r0, #16]
 8009cf8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009cfc:	edd5 7a00 	vldr	s15, [r5]
 8009d00:	2a05      	cmp	r2, #5
 8009d02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d06:	d013      	beq.n	8009d30 <forward_dense+0x2bc>
 8009d08:	794d      	ldrb	r5, [r1, #5]
 8009d0a:	edd0 6a05 	vldr	s13, [r0, #20]
 8009d0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009d12:	edd5 7a00 	vldr	s15, [r5]
 8009d16:	2a06      	cmp	r2, #6
 8009d18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d1c:	d008      	beq.n	8009d30 <forward_dense+0x2bc>
 8009d1e:	7989      	ldrb	r1, [r1, #6]
 8009d20:	edd0 7a06 	vldr	s15, [r0, #24]
 8009d24:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009d28:	edd1 6a00 	vldr	s13, [r1]
 8009d2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d30:	44dc      	add	ip, fp
 8009d32:	445e      	add	r6, fp
 8009d34:	ee32 7a87 	vadd.f32	s14, s5, s14
 8009d38:	eca7 7a01 	vstmia	r7!, {s14}
 8009d3c:	454f      	cmp	r7, r9
 8009d3e:	f4ff af43 	bcc.w	8009bc8 <forward_dense+0x154>
 8009d42:	9a06      	ldr	r2, [sp, #24]
 8009d44:	eba9 0302 	sub.w	r3, r9, r2
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	f023 0303 	bic.w	r3, r3, #3
 8009d4e:	3304      	adds	r3, #4
 8009d50:	18d3      	adds	r3, r2, r3
 8009d52:	9306      	str	r3, [sp, #24]
 8009d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d56:	9a05      	ldr	r2, [sp, #20]
 8009d58:	4499      	add	r9, r3
 8009d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d5c:	441a      	add	r2, r3
 8009d5e:	9205      	str	r2, [sp, #20]
 8009d60:	9a02      	ldr	r2, [sp, #8]
 8009d62:	441a      	add	r2, r3
 8009d64:	9202      	str	r2, [sp, #8]
 8009d66:	9a04      	ldr	r2, [sp, #16]
 8009d68:	441a      	add	r2, r3
 8009d6a:	9204      	str	r2, [sp, #16]
 8009d6c:	9b06      	ldr	r3, [sp, #24]
 8009d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d70:	4293      	cmp	r3, r2
 8009d72:	f4ff af08 	bcc.w	8009b86 <forward_dense+0x112>
 8009d76:	b015      	add	sp, #84	; 0x54
 8009d78:	ecbd 8b02 	vpop	{d8}
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	6853      	ldr	r3, [r2, #4]
 8009d82:	deff      	udf	#255	; 0xff
 8009d84:	2300      	movs	r3, #0
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	deff      	udf	#255	; 0xff
 8009d8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009da0 <forward_dense+0x32c>
 8009d8e:	eef0 2a48 	vmov.f32	s5, s16
 8009d92:	f1be 0f00 	cmp.w	lr, #0
 8009d96:	f47f af22 	bne.w	8009bde <forward_dense+0x16a>
 8009d9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d9c:	4661      	mov	r1, ip
 8009d9e:	e77a      	b.n	8009c96 <forward_dense+0x222>
 8009da0:	00000000 	.word	0x00000000
 8009da4:	4549      	cmp	r1, r9
 8009da6:	d2d5      	bcs.n	8009d54 <forward_dense+0x2e0>
 8009da8:	9807      	ldr	r0, [sp, #28]
 8009daa:	9103      	str	r1, [sp, #12]
 8009dac:	9904      	ldr	r1, [sp, #16]
 8009dae:	f100 0c01 	add.w	ip, r0, #1
 8009db2:	3901      	subs	r1, #1
 8009db4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009db8:	9109      	str	r1, [sp, #36]	; 0x24
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80b2 	beq.w	8009f24 <forward_dense+0x4b0>
 8009dc0:	9907      	ldr	r1, [sp, #28]
 8009dc2:	ecf3 2a01 	vldmia	r3!, {s5}
 8009dc6:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8009da0 <forward_dense+0x32c>
 8009dca:	2900      	cmp	r1, #0
 8009dcc:	f000 80b2 	beq.w	8009f34 <forward_dense+0x4c0>
 8009dd0:	9902      	ldr	r1, [sp, #8]
 8009dd2:	1d10      	adds	r0, r2, #4
 8009dd4:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8009dd8:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8009ddc:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8009de0:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8009de4:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8009de8:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8009dec:	ed11 5a04 	vldr	s10, [r1, #-16]
 8009df0:	ed51 5a03 	vldr	s11, [r1, #-12]
 8009df4:	ed11 6a02 	vldr	s12, [r1, #-8]
 8009df8:	ed51 6a01 	vldr	s13, [r1, #-4]
 8009dfc:	f006 070f 	and.w	r7, r6, #15
 8009e00:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009e04:	edd7 7a00 	vldr	s15, [r7]
 8009e08:	0936      	lsrs	r6, r6, #4
 8009e0a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009e0e:	ed96 3a00 	vldr	s6, [r6]
 8009e12:	ee67 7a82 	vmul.f32	s15, s15, s4
 8009e16:	092e      	lsrs	r6, r5, #4
 8009e18:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009e1c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009e20:	f005 050f 	and.w	r5, r5, #15
 8009e24:	edd6 3a00 	vldr	s7, [r6]
 8009e28:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8009e2c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009e30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e34:	0937      	lsrs	r7, r6, #4
 8009e36:	ed95 4a00 	vldr	s8, [r5]
 8009e3a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8009e3e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009e42:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009e46:	f006 060f 	and.w	r6, r6, #15
 8009e4a:	edd7 4a00 	vldr	s9, [r7]
 8009e4e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009e52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009e56:	3004      	adds	r0, #4
 8009e58:	ed96 5a00 	vldr	s10, [r6]
 8009e5c:	092e      	lsrs	r6, r5, #4
 8009e5e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009e62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009e66:	f005 050f 	and.w	r5, r5, #15
 8009e6a:	edd6 5a00 	vldr	s11, [r6]
 8009e6e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009e72:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e76:	4584      	cmp	ip, r0
 8009e78:	ed95 6a00 	vldr	s12, [r5]
 8009e7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009e80:	f101 0120 	add.w	r1, r1, #32
 8009e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e88:	d1a4      	bne.n	8009dd4 <forward_dense+0x360>
 8009e8a:	f8dd e014 	ldr.w	lr, [sp, #20]
 8009e8e:	f1ac 0804 	sub.w	r8, ip, #4
 8009e92:	9904      	ldr	r1, [sp, #16]
 8009e94:	458e      	cmp	lr, r1
 8009e96:	d22a      	bcs.n	8009eee <forward_dense+0x47a>
 8009e98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e9a:	eba1 070e 	sub.w	r7, r1, lr
 8009e9e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8009ea2:	f10e 0008 	add.w	r0, lr, #8
 8009ea6:	f108 36ff 	add.w	r6, r8, #4294967295
 8009eaa:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8009eae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009eb2:	ed50 5a01 	vldr	s11, [r0, #-4]
 8009eb6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009eba:	f001 050f 	and.w	r5, r1, #15
 8009ebe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009ec2:	edd5 7a00 	vldr	s15, [r5]
 8009ec6:	0909      	lsrs	r1, r1, #4
 8009ec8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009ecc:	ed91 6a00 	vldr	s12, [r1]
 8009ed0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ed4:	42b7      	cmp	r7, r6
 8009ed6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009eda:	f100 0008 	add.w	r0, r0, #8
 8009ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ee2:	d1e4      	bne.n	8009eae <forward_dense+0x43a>
 8009ee4:	f10a 0a01 	add.w	sl, sl, #1
 8009ee8:	44d0      	add	r8, sl
 8009eea:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8009eee:	9908      	ldr	r1, [sp, #32]
 8009ef0:	b321      	cbz	r1, 8009f3c <forward_dense+0x4c8>
 8009ef2:	f898 1000 	ldrb.w	r1, [r8]
 8009ef6:	edde 7a00 	vldr	s15, [lr]
 8009efa:	0909      	lsrs	r1, r1, #4
 8009efc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009f00:	edd1 6a00 	vldr	s13, [r1]
 8009f04:	9903      	ldr	r1, [sp, #12]
 8009f06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f0a:	445a      	add	r2, fp
 8009f0c:	44dc      	add	ip, fp
 8009f0e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8009f12:	ece1 2a01 	vstmia	r1!, {s5}
 8009f16:	4589      	cmp	r9, r1
 8009f18:	9103      	str	r1, [sp, #12]
 8009f1a:	f67f af12 	bls.w	8009d42 <forward_dense+0x2ce>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f47f af4e 	bne.w	8009dc0 <forward_dense+0x34c>
 8009f24:	9907      	ldr	r1, [sp, #28]
 8009f26:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8009da0 <forward_dense+0x32c>
 8009f2a:	eef0 2a48 	vmov.f32	s5, s16
 8009f2e:	2900      	cmp	r1, #0
 8009f30:	f47f af4e 	bne.w	8009dd0 <forward_dense+0x35c>
 8009f34:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8009f38:	4690      	mov	r8, r2
 8009f3a:	e7aa      	b.n	8009e92 <forward_dense+0x41e>
 8009f3c:	9903      	ldr	r1, [sp, #12]
 8009f3e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8009f42:	445a      	add	r2, fp
 8009f44:	eca1 7a01 	vstmia	r1!, {s14}
 8009f48:	4549      	cmp	r1, r9
 8009f4a:	9103      	str	r1, [sp, #12]
 8009f4c:	44dc      	add	ip, fp
 8009f4e:	f4ff af34 	bcc.w	8009dba <forward_dense+0x346>
 8009f52:	e6f6      	b.n	8009d42 <forward_dense+0x2ce>
 8009f54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009f56:	9d06      	ldr	r5, [sp, #24]
 8009f58:	9101      	str	r1, [sp, #4]
 8009f5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f5c:	9100      	str	r1, [sp, #0]
 8009f5e:	4628      	mov	r0, r5
 8009f60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f62:	f000 faab 	bl	800a4bc <lite_dense_if32of32wf32>
 8009f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f68:	462b      	mov	r3, r5
 8009f6a:	4413      	add	r3, r2
 8009f6c:	9306      	str	r3, [sp, #24]
 8009f6e:	e6f1      	b.n	8009d54 <forward_dense+0x2e0>
 8009f70:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	d016      	beq.n	8009fa8 <forward_dense+0x534>
 8009f7a:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009f7e:	f000 fc4b 	bl	800a818 <ai_array_get_byte_size>
 8009f82:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8009f86:	4602      	mov	r2, r0
 8009f88:	4641      	mov	r1, r8
 8009f8a:	4658      	mov	r0, fp
 8009f8c:	f000 fcb0 	bl	800a8f0 <memcpy>
 8009f90:	e5c7      	b.n	8009b22 <forward_dense+0xae>
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d00a      	beq.n	8009fac <forward_dense+0x538>
 8009f96:	f04f 0900 	mov.w	r9, #0
 8009f9a:	e5bd      	b.n	8009b18 <forward_dense+0xa4>
 8009f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f9e:	e595      	b.n	8009acc <forward_dense+0x58>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	e591      	b.n	8009acc <forward_dense+0x58>
 8009fa8:	46c3      	mov	fp, r8
 8009faa:	e5ba      	b.n	8009b22 <forward_dense+0xae>
 8009fac:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8009fb0:	e5b7      	b.n	8009b22 <forward_dense+0xae>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	deff      	udf	#255	; 0xff
 8009fb8:	2300      	movs	r3, #0
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	deff      	udf	#255	; 0xff
 8009fbe:	bf00      	nop

08009fc0 <nl_func_relu_array_f32>:
 8009fc0:	b430      	push	{r4, r5}
 8009fc2:	698c      	ldr	r4, [r1, #24]
 8009fc4:	6981      	ldr	r1, [r0, #24]
 8009fc6:	68a5      	ldr	r5, [r4, #8]
 8009fc8:	6889      	ldr	r1, [r1, #8]
 8009fca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009fce:	3a01      	subs	r2, #1
 8009fd0:	0093      	lsls	r3, r2, #2
 8009fd2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8009fd6:	4295      	cmp	r5, r2
 8009fd8:	d814      	bhi.n	800a004 <nl_func_relu_array_f32+0x44>
 8009fda:	1d18      	adds	r0, r3, #4
 8009fdc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800a008 <nl_func_relu_array_f32+0x48>
 8009fe0:	1d13      	adds	r3, r2, #4
 8009fe2:	4401      	add	r1, r0
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	ed73 7a01 	vldmdb	r3!, {s15}
 8009fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff2:	bfb8      	it	lt
 8009ff4:	eef0 7a47 	vmovlt.f32	s15, s14
 8009ff8:	ed61 7a01 	vstmdb	r1!, {s15}
 8009ffc:	68a0      	ldr	r0, [r4, #8]
 8009ffe:	3a08      	subs	r2, #8
 800a000:	4290      	cmp	r0, r2
 800a002:	d9ef      	bls.n	8009fe4 <nl_func_relu_array_f32+0x24>
 800a004:	bc30      	pop	{r4, r5}
 800a006:	4770      	bx	lr
 800a008:	00000000 	.word	0x00000000

0800a00c <forward_relu>:
 800a00c:	6982      	ldr	r2, [r0, #24]
 800a00e:	8813      	ldrh	r3, [r2, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d05b      	beq.n	800a0cc <forward_relu+0xc0>
 800a014:	6851      	ldr	r1, [r2, #4]
 800a016:	684a      	ldr	r2, [r1, #4]
 800a018:	b102      	cbz	r2, 800a01c <forward_relu+0x10>
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	f000 8123 	beq.w	800a268 <forward_relu+0x25c>
 800a022:	b470      	push	{r4, r5, r6}
 800a024:	6909      	ldr	r1, [r1, #16]
 800a026:	b101      	cbz	r1, 800a02a <forward_relu+0x1e>
 800a028:	6809      	ldr	r1, [r1, #0]
 800a02a:	69c6      	ldr	r6, [r0, #28]
 800a02c:	2e00      	cmp	r6, #0
 800a02e:	f000 8097 	beq.w	800a160 <forward_relu+0x154>
 800a032:	6873      	ldr	r3, [r6, #4]
 800a034:	6988      	ldr	r0, [r1, #24]
 800a036:	6991      	ldr	r1, [r2, #24]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	f000 80c1 	beq.w	800a1c0 <forward_relu+0x1b4>
 800a03e:	6893      	ldr	r3, [r2, #8]
 800a040:	6880      	ldr	r0, [r0, #8]
 800a042:	688c      	ldr	r4, [r1, #8]
 800a044:	0a1b      	lsrs	r3, r3, #8
 800a046:	f000 80f2 	beq.w	800a22e <forward_relu+0x222>
 800a04a:	68d5      	ldr	r5, [r2, #12]
 800a04c:	2201      	movs	r2, #1
 800a04e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a056:	42ab      	cmp	r3, r5
 800a058:	fb01 f202 	mul.w	r2, r1, r2
 800a05c:	d1f9      	bne.n	800a052 <forward_relu+0x46>
 800a05e:	68b3      	ldr	r3, [r6, #8]
 800a060:	ed93 7a02 	vldr	s14, [r3, #8]
 800a064:	edd3 6a00 	vldr	s13, [r3]
 800a068:	ed93 6a01 	vldr	s12, [r3, #4]
 800a06c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a070:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a074:	3a01      	subs	r2, #1
 800a076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a07a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a07e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a082:	d425      	bmi.n	800a0d0 <forward_relu+0xc4>
 800a084:	429c      	cmp	r4, r3
 800a086:	d81f      	bhi.n	800a0c8 <forward_relu+0xbc>
 800a088:	1d1a      	adds	r2, r3, #4
 800a08a:	1d01      	adds	r1, r0, #4
 800a08c:	e00d      	b.n	800a0aa <forward_relu+0x9e>
 800a08e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a096:	db03      	blt.n	800a0a0 <forward_relu+0x94>
 800a098:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a09c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a0a0:	3b08      	subs	r3, #8
 800a0a2:	429c      	cmp	r4, r3
 800a0a4:	ed61 7a01 	vstmdb	r1!, {s15}
 800a0a8:	d80e      	bhi.n	800a0c8 <forward_relu+0xbc>
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	ed72 7a01 	vldmdb	r2!, {s15}
 800a0b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b8:	d9e9      	bls.n	800a08e <forward_relu+0x82>
 800a0ba:	3b08      	subs	r3, #8
 800a0bc:	eef0 7a47 	vmov.f32	s15, s14
 800a0c0:	429c      	cmp	r4, r3
 800a0c2:	ed61 7a01 	vstmdb	r1!, {s15}
 800a0c6:	d9f0      	bls.n	800a0aa <forward_relu+0x9e>
 800a0c8:	bc70      	pop	{r4, r5, r6}
 800a0ca:	4770      	bx	lr
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	deff      	udf	#255	; 0xff
 800a0d0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d8:	d11f      	bne.n	800a11a <forward_relu+0x10e>
 800a0da:	429c      	cmp	r4, r3
 800a0dc:	d8f4      	bhi.n	800a0c8 <forward_relu+0xbc>
 800a0de:	1b1c      	subs	r4, r3, r4
 800a0e0:	f024 0403 	bic.w	r4, r4, #3
 800a0e4:	1d1a      	adds	r2, r3, #4
 800a0e6:	2500      	movs	r5, #0
 800a0e8:	1b1b      	subs	r3, r3, r4
 800a0ea:	1d01      	adds	r1, r0, #4
 800a0ec:	ed72 7a01 	vldmdb	r2!, {s15}
 800a0f0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f8:	dc0a      	bgt.n	800a110 <forward_relu+0x104>
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	f841 5d04 	str.w	r5, [r1, #-4]!
 800a100:	d0e2      	beq.n	800a0c8 <forward_relu+0xbc>
 800a102:	ed72 7a01 	vldmdb	r2!, {s15}
 800a106:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10e:	ddf4      	ble.n	800a0fa <forward_relu+0xee>
 800a110:	429a      	cmp	r2, r3
 800a112:	ed61 7a01 	vstmdb	r1!, {s15}
 800a116:	d1e9      	bne.n	800a0ec <forward_relu+0xe0>
 800a118:	e7d6      	b.n	800a0c8 <forward_relu+0xbc>
 800a11a:	429c      	cmp	r4, r3
 800a11c:	d8d4      	bhi.n	800a0c8 <forward_relu+0xbc>
 800a11e:	1b1c      	subs	r4, r3, r4
 800a120:	f024 0403 	bic.w	r4, r4, #3
 800a124:	1d1a      	adds	r2, r3, #4
 800a126:	1d01      	adds	r1, r0, #4
 800a128:	1b1b      	subs	r3, r3, r4
 800a12a:	ed72 7a01 	vldmdb	r2!, {s15}
 800a12e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a136:	db0e      	blt.n	800a156 <forward_relu+0x14a>
 800a138:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a13c:	4293      	cmp	r3, r2
 800a13e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a142:	ed61 7a01 	vstmdb	r1!, {s15}
 800a146:	d0bf      	beq.n	800a0c8 <forward_relu+0xbc>
 800a148:	ed72 7a01 	vldmdb	r2!, {s15}
 800a14c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a154:	daf0      	bge.n	800a138 <forward_relu+0x12c>
 800a156:	4293      	cmp	r3, r2
 800a158:	ed61 7a01 	vstmdb	r1!, {s15}
 800a15c:	d1e5      	bne.n	800a12a <forward_relu+0x11e>
 800a15e:	e7b3      	b.n	800a0c8 <forward_relu+0xbc>
 800a160:	6893      	ldr	r3, [r2, #8]
 800a162:	6989      	ldr	r1, [r1, #24]
 800a164:	6990      	ldr	r0, [r2, #24]
 800a166:	6889      	ldr	r1, [r1, #8]
 800a168:	6884      	ldr	r4, [r0, #8]
 800a16a:	0a1b      	lsrs	r3, r3, #8
 800a16c:	d075      	beq.n	800a25a <forward_relu+0x24e>
 800a16e:	68d5      	ldr	r5, [r2, #12]
 800a170:	2201      	movs	r2, #1
 800a172:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a176:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800a17a:	429d      	cmp	r5, r3
 800a17c:	fb00 f202 	mul.w	r2, r0, r2
 800a180:	d1f9      	bne.n	800a176 <forward_relu+0x16a>
 800a182:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800a186:	3b01      	subs	r3, #1
 800a188:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a18c:	4294      	cmp	r4, r2
 800a18e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a192:	d899      	bhi.n	800a0c8 <forward_relu+0xbc>
 800a194:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a270 <forward_relu+0x264>
 800a198:	3204      	adds	r2, #4
 800a19a:	3104      	adds	r1, #4
 800a19c:	4613      	mov	r3, r2
 800a19e:	ed72 7a01 	vldmdb	r2!, {s15}
 800a1a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1aa:	f1a3 0308 	sub.w	r3, r3, #8
 800a1ae:	bfb8      	it	lt
 800a1b0:	eef0 7a47 	vmovlt.f32	s15, s14
 800a1b4:	429c      	cmp	r4, r3
 800a1b6:	ed61 7a01 	vstmdb	r1!, {s15}
 800a1ba:	d9ef      	bls.n	800a19c <forward_relu+0x190>
 800a1bc:	bc70      	pop	{r4, r5, r6}
 800a1be:	4770      	bx	lr
 800a1c0:	688c      	ldr	r4, [r1, #8]
 800a1c2:	6891      	ldr	r1, [r2, #8]
 800a1c4:	6880      	ldr	r0, [r0, #8]
 800a1c6:	0a09      	lsrs	r1, r1, #8
 800a1c8:	d049      	beq.n	800a25e <forward_relu+0x252>
 800a1ca:	68d5      	ldr	r5, [r2, #12]
 800a1cc:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800a1d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a1d4:	42aa      	cmp	r2, r5
 800a1d6:	fb01 f303 	mul.w	r3, r1, r3
 800a1da:	d1f9      	bne.n	800a1d0 <forward_relu+0x1c4>
 800a1dc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800a1e0:	3a01      	subs	r2, #1
 800a1e2:	68b1      	ldr	r1, [r6, #8]
 800a1e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1e8:	429c      	cmp	r4, r3
 800a1ea:	ed91 7a00 	vldr	s14, [r1]
 800a1ee:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a1f2:	f63f af69 	bhi.w	800a0c8 <forward_relu+0xbc>
 800a1f6:	2500      	movs	r5, #0
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	1d02      	adds	r2, r0, #4
 800a1fc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a208:	f1a3 0104 	sub.w	r1, r3, #4
 800a20c:	f1a3 0308 	sub.w	r3, r3, #8
 800a210:	d406      	bmi.n	800a220 <forward_relu+0x214>
 800a212:	429c      	cmp	r4, r3
 800a214:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a218:	f63f af56 	bhi.w	800a0c8 <forward_relu+0xbc>
 800a21c:	460b      	mov	r3, r1
 800a21e:	e7ed      	b.n	800a1fc <forward_relu+0x1f0>
 800a220:	429c      	cmp	r4, r3
 800a222:	ed62 7a01 	vstmdb	r2!, {s15}
 800a226:	f63f af4f 	bhi.w	800a0c8 <forward_relu+0xbc>
 800a22a:	460b      	mov	r3, r1
 800a22c:	e7e6      	b.n	800a1fc <forward_relu+0x1f0>
 800a22e:	68b3      	ldr	r3, [r6, #8]
 800a230:	ed93 7a02 	vldr	s14, [r3, #8]
 800a234:	edd3 6a00 	vldr	s13, [r3]
 800a238:	ed93 6a01 	vldr	s12, [r3, #4]
 800a23c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a244:	d401      	bmi.n	800a24a <forward_relu+0x23e>
 800a246:	4623      	mov	r3, r4
 800a248:	e71e      	b.n	800a088 <forward_relu+0x7c>
 800a24a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a252:	4623      	mov	r3, r4
 800a254:	f47f af63 	bne.w	800a11e <forward_relu+0x112>
 800a258:	e741      	b.n	800a0de <forward_relu+0xd2>
 800a25a:	4622      	mov	r2, r4
 800a25c:	e79a      	b.n	800a194 <forward_relu+0x188>
 800a25e:	68b2      	ldr	r2, [r6, #8]
 800a260:	4623      	mov	r3, r4
 800a262:	ed92 7a00 	vldr	s14, [r2]
 800a266:	e7c6      	b.n	800a1f6 <forward_relu+0x1ea>
 800a268:	2300      	movs	r3, #0
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	deff      	udf	#255	; 0xff
 800a26e:	bf00      	nop
 800a270:	00000000 	.word	0x00000000

0800a274 <forward_sm>:
 800a274:	6982      	ldr	r2, [r0, #24]
 800a276:	8813      	ldrh	r3, [r2, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d07c      	beq.n	800a376 <forward_sm+0x102>
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	ed2d 8b04 	vpush	{d8-d9}
 800a284:	6852      	ldr	r2, [r2, #4]
 800a286:	6854      	ldr	r4, [r2, #4]
 800a288:	b085      	sub	sp, #20
 800a28a:	b104      	cbz	r4, 800a28e <forward_sm+0x1a>
 800a28c:	6824      	ldr	r4, [r4, #0]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d076      	beq.n	800a380 <forward_sm+0x10c>
 800a292:	6913      	ldr	r3, [r2, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d076      	beq.n	800a386 <forward_sm+0x112>
 800a298:	681e      	ldr	r6, [r3, #0]
 800a29a:	68a3      	ldr	r3, [r4, #8]
 800a29c:	68e0      	ldr	r0, [r4, #12]
 800a29e:	68f2      	ldr	r2, [r6, #12]
 800a2a0:	6845      	ldr	r5, [r0, #4]
 800a2a2:	6857      	ldr	r7, [r2, #4]
 800a2a4:	0a1b      	lsrs	r3, r3, #8
 800a2a6:	d068      	beq.n	800a37a <forward_sm+0x106>
 800a2a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2b2:	4298      	cmp	r0, r3
 800a2b4:	fb01 f202 	mul.w	r2, r1, r2
 800a2b8:	d1f9      	bne.n	800a2ae <forward_sm+0x3a>
 800a2ba:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800a2be:	69a2      	ldr	r2, [r4, #24]
 800a2c0:	69b3      	ldr	r3, [r6, #24]
 800a2c2:	6892      	ldr	r2, [r2, #8]
 800a2c4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800a2c8:	eb02 0309 	add.w	r3, r2, r9
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	d24c      	bcs.n	800a36c <forward_sm+0xf8>
 800a2d2:	00bb      	lsls	r3, r7, #2
 800a2d4:	9303      	str	r3, [sp, #12]
 800a2d6:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800a2da:	00ab      	lsls	r3, r5, #2
 800a2dc:	2d01      	cmp	r5, #1
 800a2de:	ed92 8a00 	vldr	s16, [r2]
 800a2e2:	9302      	str	r3, [sp, #8]
 800a2e4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a2e8:	463e      	mov	r6, r7
 800a2ea:	d93c      	bls.n	800a366 <forward_sm+0xf2>
 800a2ec:	1d13      	adds	r3, r2, #4
 800a2ee:	ecf3 7a01 	vldmia	r3!, {s15}
 800a2f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2fa:	bfb8      	it	lt
 800a2fc:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a300:	429e      	cmp	r6, r3
 800a302:	d1f4      	bne.n	800a2ee <forward_sm+0x7a>
 800a304:	eddf 8a21 	vldr	s17, [pc, #132]	; 800a38c <forward_sm+0x118>
 800a308:	4692      	mov	sl, r2
 800a30a:	46c3      	mov	fp, r8
 800a30c:	46c1      	mov	r9, r8
 800a30e:	2400      	movs	r4, #0
 800a310:	ecba 0a01 	vldmia	sl!, {s0}
 800a314:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a318:	f003 f9f4 	bl	800d704 <expf>
 800a31c:	3401      	adds	r4, #1
 800a31e:	42a5      	cmp	r5, r4
 800a320:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a324:	eca9 0a01 	vstmia	r9!, {s0}
 800a328:	d8f2      	bhi.n	800a310 <forward_sm+0x9c>
 800a32a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a332:	d00b      	beq.n	800a34c <forward_sm+0xd8>
 800a334:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a338:	2300      	movs	r3, #0
 800a33a:	3301      	adds	r3, #1
 800a33c:	429d      	cmp	r5, r3
 800a33e:	eddb 7a00 	vldr	s15, [fp]
 800a342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a346:	eceb 7a01 	vstmia	fp!, {s15}
 800a34a:	d8f6      	bhi.n	800a33a <forward_sm+0xc6>
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	9901      	ldr	r1, [sp, #4]
 800a350:	4498      	add	r8, r3
 800a352:	9b02      	ldr	r3, [sp, #8]
 800a354:	42b9      	cmp	r1, r7
 800a356:	463a      	mov	r2, r7
 800a358:	441e      	add	r6, r3
 800a35a:	d907      	bls.n	800a36c <forward_sm+0xf8>
 800a35c:	2d01      	cmp	r5, #1
 800a35e:	ed92 8a00 	vldr	s16, [r2]
 800a362:	441f      	add	r7, r3
 800a364:	d8c2      	bhi.n	800a2ec <forward_sm+0x78>
 800a366:	2d00      	cmp	r5, #0
 800a368:	d0f0      	beq.n	800a34c <forward_sm+0xd8>
 800a36a:	e7cb      	b.n	800a304 <forward_sm+0x90>
 800a36c:	b005      	add	sp, #20
 800a36e:	ecbd 8b04 	vpop	{d8-d9}
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	deff      	udf	#255	; 0xff
 800a37a:	f04f 0904 	mov.w	r9, #4
 800a37e:	e79e      	b.n	800a2be <forward_sm+0x4a>
 800a380:	2300      	movs	r3, #0
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	deff      	udf	#255	; 0xff
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	deff      	udf	#255	; 0xff
 800a38a:	bf00      	nop
 800a38c:	00000000 	.word	0x00000000

0800a390 <ai_check_custom_types>:
 800a390:	b082      	sub	sp, #8
 800a392:	4b13      	ldr	r3, [pc, #76]	; (800a3e0 <ai_check_custom_types+0x50>)
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	b118      	cbz	r0, 800a3a0 <ai_check_custom_types+0x10>
 800a398:	7803      	ldrb	r3, [r0, #0]
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d002      	beq.n	800a3a4 <ai_check_custom_types+0x14>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	b002      	add	sp, #8
 800a3a2:	4770      	bx	lr
 800a3a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d004      	beq.n	800a3b6 <ai_check_custom_types+0x26>
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	f080 0001 	eor.w	r0, r0, #1
 800a3b2:	b002      	add	sp, #8
 800a3b4:	4770      	bx	lr
 800a3b6:	7842      	ldrb	r2, [r0, #1]
 800a3b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	f100 0001 	add.w	r0, r0, #1
 800a3c2:	d1f3      	bne.n	800a3ac <ai_check_custom_types+0x1c>
 800a3c4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a3c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d1ed      	bne.n	800a3ac <ai_check_custom_types+0x1c>
 800a3d0:	7842      	ldrb	r2, [r0, #1]
 800a3d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d1e8      	bne.n	800a3ac <ai_check_custom_types+0x1c>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	e7e7      	b.n	800a3ae <ai_check_custom_types+0x1e>
 800a3de:	bf00      	nop
 800a3e0:	84048403 	.word	0x84048403

0800a3e4 <ai_layers_init_all>:
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a3ea:	b143      	cbz	r3, 800a3fe <ai_layers_init_all+0x1a>
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	60d9      	str	r1, [r3, #12]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	f100 0001 	add.w	r0, r0, #1
 800a3f6:	d002      	beq.n	800a3fe <ai_layers_init_all+0x1a>
 800a3f8:	b10a      	cbz	r2, 800a3fe <ai_layers_init_all+0x1a>
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	e7f5      	b.n	800a3ea <ai_layers_init_all+0x6>
 800a3fe:	4770      	bx	lr

0800a400 <ai_layers_post_init_all>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a404:	2500      	movs	r5, #0
 800a406:	b16c      	cbz	r4, 800a424 <ai_layers_post_init_all+0x24>
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d504      	bpl.n	800a418 <ai_layers_post_init_all+0x18>
 800a40e:	6a23      	ldr	r3, [r4, #32]
 800a410:	4620      	mov	r0, r4
 800a412:	b10b      	cbz	r3, 800a418 <ai_layers_post_init_all+0x18>
 800a414:	4798      	blx	r3
 800a416:	3501      	adds	r5, #1
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	42a3      	cmp	r3, r4
 800a41c:	d002      	beq.n	800a424 <ai_layers_post_init_all+0x24>
 800a41e:	b10b      	cbz	r3, 800a424 <ai_layers_post_init_all+0x24>
 800a420:	461c      	mov	r4, r3
 800a422:	e7f0      	b.n	800a406 <ai_layers_post_init_all+0x6>
 800a424:	4628      	mov	r0, r5
 800a426:	bd38      	pop	{r3, r4, r5, pc}

0800a428 <ai_layers_forward_all>:
 800a428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800a430:	4604      	mov	r4, r0
 800a432:	f1b8 0f00 	cmp.w	r8, #0
 800a436:	d02b      	beq.n	800a490 <ai_layers_forward_all+0x68>
 800a438:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a43a:	6381      	str	r1, [r0, #56]	; 0x38
 800a43c:	b321      	cbz	r1, 800a488 <ai_layers_forward_all+0x60>
 800a43e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a440:	2001      	movs	r0, #1
 800a442:	47c0      	blx	r8
 800a444:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a446:	b1fe      	cbz	r6, 800a488 <ai_layers_forward_all+0x60>
 800a448:	2700      	movs	r7, #0
 800a44a:	4631      	mov	r1, r6
 800a44c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a44e:	2002      	movs	r0, #2
 800a450:	47c0      	blx	r8
 800a452:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a454:	4628      	mov	r0, r5
 800a456:	696b      	ldr	r3, [r5, #20]
 800a458:	4798      	blx	r3
 800a45a:	692e      	ldr	r6, [r5, #16]
 800a45c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a45e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a460:	42b5      	cmp	r5, r6
 800a462:	f04f 0003 	mov.w	r0, #3
 800a466:	d007      	beq.n	800a478 <ai_layers_forward_all+0x50>
 800a468:	47c0      	blx	r8
 800a46a:	3701      	adds	r7, #1
 800a46c:	63a6      	str	r6, [r4, #56]	; 0x38
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d1eb      	bne.n	800a44a <ai_layers_forward_all+0x22>
 800a472:	4638      	mov	r0, r7
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a478:	2003      	movs	r0, #3
 800a47a:	47c0      	blx	r8
 800a47c:	2300      	movs	r3, #0
 800a47e:	3701      	adds	r7, #1
 800a480:	63a3      	str	r3, [r4, #56]	; 0x38
 800a482:	4638      	mov	r0, r7
 800a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a488:	2700      	movs	r7, #0
 800a48a:	4638      	mov	r0, r7
 800a48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a490:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a492:	6385      	str	r5, [r0, #56]	; 0x38
 800a494:	2d00      	cmp	r5, #0
 800a496:	d0f7      	beq.n	800a488 <ai_layers_forward_all+0x60>
 800a498:	4647      	mov	r7, r8
 800a49a:	696b      	ldr	r3, [r5, #20]
 800a49c:	4628      	mov	r0, r5
 800a49e:	4798      	blx	r3
 800a4a0:	462b      	mov	r3, r5
 800a4a2:	692d      	ldr	r5, [r5, #16]
 800a4a4:	429d      	cmp	r5, r3
 800a4a6:	d004      	beq.n	800a4b2 <ai_layers_forward_all+0x8a>
 800a4a8:	63a5      	str	r5, [r4, #56]	; 0x38
 800a4aa:	3701      	adds	r7, #1
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	d1f4      	bne.n	800a49a <ai_layers_forward_all+0x72>
 800a4b0:	e7df      	b.n	800a472 <ai_layers_forward_all+0x4a>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800a4b6:	3701      	adds	r7, #1
 800a4b8:	e7db      	b.n	800a472 <ai_layers_forward_all+0x4a>
 800a4ba:	bf00      	nop

0800a4bc <lite_dense_if32of32wf32>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800a4c4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800a4c8:	4287      	cmp	r7, r0
 800a4ca:	f240 8106 	bls.w	800a6da <lite_dense_if32of32wf32+0x21e>
 800a4ce:	f1a6 0810 	sub.w	r8, r6, #16
 800a4d2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800a4d6:	f108 0801 	add.w	r8, r8, #1
 800a4da:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a4de:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800a4e2:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	f006 0a0f 	and.w	sl, r6, #15
 800a4ec:	2e0f      	cmp	r6, #15
 800a4ee:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800a700 <lite_dense_if32of32wf32+0x244>
 800a4f2:	f240 8101 	bls.w	800a6f8 <lite_dense_if32of32wf32+0x23c>
 800a4f6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800a4fa:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800a4fe:	46b6      	mov	lr, r6
 800a500:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800a504:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800a508:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800a50c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800a510:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800a514:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800a518:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800a51c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800a520:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800a524:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800a528:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800a52c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800a530:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800a534:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a538:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800a53c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a540:	f1ae 0e10 	sub.w	lr, lr, #16
 800a544:	f1be 0f0f 	cmp.w	lr, #15
 800a548:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800a54c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800a550:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a554:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800a558:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800a55c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800a560:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800a564:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800a568:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800a56c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800a570:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a574:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800a578:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800a57c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a580:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800a584:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800a588:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a58c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800a590:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800a594:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a598:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800a59c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800a5a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a5a4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800a5a8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800a5ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5b0:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800a5b4:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800a5b8:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a5bc:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a5c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a5c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a5c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a5cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5d4:	d894      	bhi.n	800a500 <lite_dense_if32of32wf32+0x44>
 800a5d6:	eb02 0e0b 	add.w	lr, r2, fp
 800a5da:	4654      	mov	r4, sl
 800a5dc:	46c4      	mov	ip, r8
 800a5de:	2c00      	cmp	r4, #0
 800a5e0:	d075      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a5e2:	eddc 6a00 	vldr	s13, [ip]
 800a5e6:	edde 7a00 	vldr	s15, [lr]
 800a5ea:	2c01      	cmp	r4, #1
 800a5ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5f0:	d06d      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a5f2:	eddc 6a01 	vldr	s13, [ip, #4]
 800a5f6:	edde 7a01 	vldr	s15, [lr, #4]
 800a5fa:	2c02      	cmp	r4, #2
 800a5fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a600:	d065      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a602:	eddc 6a02 	vldr	s13, [ip, #8]
 800a606:	edde 7a02 	vldr	s15, [lr, #8]
 800a60a:	2c03      	cmp	r4, #3
 800a60c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a610:	d05d      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a612:	eddc 6a03 	vldr	s13, [ip, #12]
 800a616:	edde 7a03 	vldr	s15, [lr, #12]
 800a61a:	2c04      	cmp	r4, #4
 800a61c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a620:	d055      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a622:	eddc 6a04 	vldr	s13, [ip, #16]
 800a626:	edde 7a04 	vldr	s15, [lr, #16]
 800a62a:	2c05      	cmp	r4, #5
 800a62c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a630:	d04d      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a632:	eddc 6a05 	vldr	s13, [ip, #20]
 800a636:	edde 7a05 	vldr	s15, [lr, #20]
 800a63a:	2c06      	cmp	r4, #6
 800a63c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a640:	d045      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a642:	eddc 6a06 	vldr	s13, [ip, #24]
 800a646:	edde 7a06 	vldr	s15, [lr, #24]
 800a64a:	2c07      	cmp	r4, #7
 800a64c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a650:	d03d      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a652:	eddc 6a07 	vldr	s13, [ip, #28]
 800a656:	edde 7a07 	vldr	s15, [lr, #28]
 800a65a:	2c08      	cmp	r4, #8
 800a65c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a660:	d035      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a662:	eddc 6a08 	vldr	s13, [ip, #32]
 800a666:	edde 7a08 	vldr	s15, [lr, #32]
 800a66a:	2c09      	cmp	r4, #9
 800a66c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a670:	d02d      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a672:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800a676:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800a67a:	2c0a      	cmp	r4, #10
 800a67c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a680:	d025      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a682:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800a686:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800a68a:	2c0b      	cmp	r4, #11
 800a68c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a690:	d01d      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a692:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800a696:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800a69a:	2c0c      	cmp	r4, #12
 800a69c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6a0:	d015      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a6a2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800a6a6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800a6aa:	3c0d      	subs	r4, #13
 800a6ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6b0:	d00d      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a6b2:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800a6b6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800a6ba:	2c01      	cmp	r4, #1
 800a6bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6c0:	d005      	beq.n	800a6ce <lite_dense_if32of32wf32+0x212>
 800a6c2:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800a6c6:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800a6ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6ce:	444a      	add	r2, r9
 800a6d0:	eca5 7a01 	vstmia	r5!, {s14}
 800a6d4:	42af      	cmp	r7, r5
 800a6d6:	f63f af09 	bhi.w	800a4ec <lite_dense_if32of32wf32+0x30>
 800a6da:	b15b      	cbz	r3, 800a6f4 <lite_dense_if32of32wf32+0x238>
 800a6dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6de:	b14a      	cbz	r2, 800a6f4 <lite_dense_if32of32wf32+0x238>
 800a6e0:	edd0 7a00 	vldr	s15, [r0]
 800a6e4:	ecb3 7a01 	vldmia	r3!, {s14}
 800a6e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6ec:	ece0 7a01 	vstmia	r0!, {s15}
 800a6f0:	4287      	cmp	r7, r0
 800a6f2:	d1f5      	bne.n	800a6e0 <lite_dense_if32of32wf32+0x224>
 800a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	4634      	mov	r4, r6
 800a6fa:	4696      	mov	lr, r2
 800a6fc:	468c      	mov	ip, r1
 800a6fe:	e76e      	b.n	800a5de <lite_dense_if32of32wf32+0x122>
 800a700:	00000000 	.word	0x00000000

0800a704 <ai_version_get>:
 800a704:	0212      	lsls	r2, r2, #8
 800a706:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a70a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a70e:	4770      	bx	lr

0800a710 <get_tensor_byte_size>:
 800a710:	b410      	push	{r4}
 800a712:	6983      	ldr	r3, [r0, #24]
 800a714:	68c4      	ldr	r4, [r0, #12]
 800a716:	6941      	ldr	r1, [r0, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68e0      	ldr	r0, [r4, #12]
 800a71c:	4a07      	ldr	r2, [pc, #28]	; (800a73c <get_tensor_byte_size+0x2c>)
 800a71e:	68c9      	ldr	r1, [r1, #12]
 800a720:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a724:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800a728:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a72c:	fb01 f000 	mul.w	r0, r1, r0
 800a730:	4293      	cmp	r3, r2
 800a732:	bf04      	itt	eq
 800a734:	3007      	addeq	r0, #7
 800a736:	08c0      	lsreq	r0, r0, #3
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	000400c0 	.word	0x000400c0

0800a740 <ai_array_to_buffer_fmt>:
 800a740:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a744:	2b02      	cmp	r3, #2
 800a746:	d050      	beq.n	800a7ea <ai_array_to_buffer_fmt+0xaa>
 800a748:	4b2a      	ldr	r3, [pc, #168]	; (800a7f4 <ai_array_to_buffer_fmt+0xb4>)
 800a74a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800a74e:	429a      	cmp	r2, r3
 800a750:	d00b      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a752:	dc1c      	bgt.n	800a78e <ai_array_to_buffer_fmt+0x4e>
 800a754:	4b28      	ldr	r3, [pc, #160]	; (800a7f8 <ai_array_to_buffer_fmt+0xb8>)
 800a756:	429a      	cmp	r2, r3
 800a758:	d007      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a75a:	dd0b      	ble.n	800a774 <ai_array_to_buffer_fmt+0x34>
 800a75c:	4b27      	ldr	r3, [pc, #156]	; (800a7fc <ai_array_to_buffer_fmt+0xbc>)
 800a75e:	429a      	cmp	r2, r3
 800a760:	d003      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a762:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800a766:	429a      	cmp	r2, r3
 800a768:	d131      	bne.n	800a7ce <ai_array_to_buffer_fmt+0x8e>
 800a76a:	4613      	mov	r3, r2
 800a76c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a770:	4318      	orrs	r0, r3
 800a772:	4770      	bx	lr
 800a774:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a778:	429a      	cmp	r2, r3
 800a77a:	d0f6      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a77c:	dd2c      	ble.n	800a7d8 <ai_array_to_buffer_fmt+0x98>
 800a77e:	4b20      	ldr	r3, [pc, #128]	; (800a800 <ai_array_to_buffer_fmt+0xc0>)
 800a780:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a784:	429a      	cmp	r2, r3
 800a786:	bf18      	it	ne
 800a788:	2340      	movne	r3, #64	; 0x40
 800a78a:	4318      	orrs	r0, r3
 800a78c:	4770      	bx	lr
 800a78e:	4b1d      	ldr	r3, [pc, #116]	; (800a804 <ai_array_to_buffer_fmt+0xc4>)
 800a790:	429a      	cmp	r2, r3
 800a792:	d0ea      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a794:	dd0e      	ble.n	800a7b4 <ai_array_to_buffer_fmt+0x74>
 800a796:	4b1c      	ldr	r3, [pc, #112]	; (800a808 <ai_array_to_buffer_fmt+0xc8>)
 800a798:	429a      	cmp	r2, r3
 800a79a:	d0e6      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a79c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d0e2      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a7a4:	4b19      	ldr	r3, [pc, #100]	; (800a80c <ai_array_to_buffer_fmt+0xcc>)
 800a7a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	bf18      	it	ne
 800a7ae:	2340      	movne	r3, #64	; 0x40
 800a7b0:	4318      	orrs	r0, r3
 800a7b2:	4770      	bx	lr
 800a7b4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d0d6      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a7bc:	3307      	adds	r3, #7
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d0d3      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a7c2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	bf18      	it	ne
 800a7ca:	2340      	movne	r3, #64	; 0x40
 800a7cc:	e7ce      	b.n	800a76c <ai_array_to_buffer_fmt+0x2c>
 800a7ce:	4b10      	ldr	r3, [pc, #64]	; (800a810 <ai_array_to_buffer_fmt+0xd0>)
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	bf18      	it	ne
 800a7d4:	2340      	movne	r3, #64	; 0x40
 800a7d6:	e7c9      	b.n	800a76c <ai_array_to_buffer_fmt+0x2c>
 800a7d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d0c4      	beq.n	800a76a <ai_array_to_buffer_fmt+0x2a>
 800a7e0:	3380      	adds	r3, #128	; 0x80
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	bf18      	it	ne
 800a7e6:	2340      	movne	r3, #64	; 0x40
 800a7e8:	e7c0      	b.n	800a76c <ai_array_to_buffer_fmt+0x2c>
 800a7ea:	4b0a      	ldr	r3, [pc, #40]	; (800a814 <ai_array_to_buffer_fmt+0xd4>)
 800a7ec:	4003      	ands	r3, r0
 800a7ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7f2:	e7bb      	b.n	800a76c <ai_array_to_buffer_fmt+0x2c>
 800a7f4:	00840040 	.word	0x00840040
 800a7f8:	00040840 	.word	0x00040840
 800a7fc:	00041040 	.word	0x00041040
 800a800:	00040447 	.word	0x00040447
 800a804:	00840840 	.word	0x00840840
 800a808:	00841040 	.word	0x00841040
 800a80c:	0084084f 	.word	0x0084084f
 800a810:	0004084f 	.word	0x0004084f
 800a814:	00803fff 	.word	0x00803fff

0800a818 <ai_array_get_byte_size>:
 800a818:	b319      	cbz	r1, 800a862 <ai_array_get_byte_size+0x4a>
 800a81a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a81e:	fb03 f101 	mul.w	r1, r3, r1
 800a822:	3107      	adds	r1, #7
 800a824:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800a828:	f021 0307 	bic.w	r3, r1, #7
 800a82c:	2a04      	cmp	r2, #4
 800a82e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800a832:	fa23 f101 	lsr.w	r1, r3, r1
 800a836:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800a83a:	d00b      	beq.n	800a854 <ai_array_get_byte_size+0x3c>
 800a83c:	2a08      	cmp	r2, #8
 800a83e:	d002      	beq.n	800a846 <ai_array_get_byte_size+0x2e>
 800a840:	3107      	adds	r1, #7
 800a842:	08c8      	lsrs	r0, r1, #3
 800a844:	4770      	bx	lr
 800a846:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a84a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a84e:	3107      	adds	r1, #7
 800a850:	08c8      	lsrs	r0, r1, #3
 800a852:	4770      	bx	lr
 800a854:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a858:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800a85c:	3107      	adds	r1, #7
 800a85e:	08c8      	lsrs	r0, r1, #3
 800a860:	4770      	bx	lr
 800a862:	4608      	mov	r0, r1
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop

0800a868 <ai_array_get_data_byte_size>:
 800a868:	b169      	cbz	r1, 800a886 <ai_array_get_data_byte_size+0x1e>
 800a86a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800a86e:	fb02 f101 	mul.w	r1, r2, r1
 800a872:	1dcb      	adds	r3, r1, #7
 800a874:	f023 0307 	bic.w	r3, r3, #7
 800a878:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a87c:	fa23 f000 	lsr.w	r0, r3, r0
 800a880:	3007      	adds	r0, #7
 800a882:	08c0      	lsrs	r0, r0, #3
 800a884:	4770      	bx	lr
 800a886:	4608      	mov	r0, r1
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop

0800a88c <__errno>:
 800a88c:	4b01      	ldr	r3, [pc, #4]	; (800a894 <__errno+0x8>)
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	20000874 	.word	0x20000874

0800a898 <__libc_init_array>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	4d0d      	ldr	r5, [pc, #52]	; (800a8d0 <__libc_init_array+0x38>)
 800a89c:	4c0d      	ldr	r4, [pc, #52]	; (800a8d4 <__libc_init_array+0x3c>)
 800a89e:	1b64      	subs	r4, r4, r5
 800a8a0:	10a4      	asrs	r4, r4, #2
 800a8a2:	2600      	movs	r6, #0
 800a8a4:	42a6      	cmp	r6, r4
 800a8a6:	d109      	bne.n	800a8bc <__libc_init_array+0x24>
 800a8a8:	4d0b      	ldr	r5, [pc, #44]	; (800a8d8 <__libc_init_array+0x40>)
 800a8aa:	4c0c      	ldr	r4, [pc, #48]	; (800a8dc <__libc_init_array+0x44>)
 800a8ac:	f003 f8a0 	bl	800d9f0 <_init>
 800a8b0:	1b64      	subs	r4, r4, r5
 800a8b2:	10a4      	asrs	r4, r4, #2
 800a8b4:	2600      	movs	r6, #0
 800a8b6:	42a6      	cmp	r6, r4
 800a8b8:	d105      	bne.n	800a8c6 <__libc_init_array+0x2e>
 800a8ba:	bd70      	pop	{r4, r5, r6, pc}
 800a8bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c0:	4798      	blx	r3
 800a8c2:	3601      	adds	r6, #1
 800a8c4:	e7ee      	b.n	800a8a4 <__libc_init_array+0xc>
 800a8c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ca:	4798      	blx	r3
 800a8cc:	3601      	adds	r6, #1
 800a8ce:	e7f2      	b.n	800a8b6 <__libc_init_array+0x1e>
 800a8d0:	08019eec 	.word	0x08019eec
 800a8d4:	08019eec 	.word	0x08019eec
 800a8d8:	08019eec 	.word	0x08019eec
 800a8dc:	08019ef0 	.word	0x08019ef0

0800a8e0 <malloc>:
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <malloc+0xc>)
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f000 b885 	b.w	800a9f4 <_malloc_r>
 800a8ea:	bf00      	nop
 800a8ec:	20000874 	.word	0x20000874

0800a8f0 <memcpy>:
 800a8f0:	440a      	add	r2, r1
 800a8f2:	4291      	cmp	r1, r2
 800a8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f8:	d100      	bne.n	800a8fc <memcpy+0xc>
 800a8fa:	4770      	bx	lr
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a902:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a906:	4291      	cmp	r1, r2
 800a908:	d1f9      	bne.n	800a8fe <memcpy+0xe>
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <memset>:
 800a90c:	4402      	add	r2, r0
 800a90e:	4603      	mov	r3, r0
 800a910:	4293      	cmp	r3, r2
 800a912:	d100      	bne.n	800a916 <memset+0xa>
 800a914:	4770      	bx	lr
 800a916:	f803 1b01 	strb.w	r1, [r3], #1
 800a91a:	e7f9      	b.n	800a910 <memset+0x4>

0800a91c <_free_r>:
 800a91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a91e:	2900      	cmp	r1, #0
 800a920:	d044      	beq.n	800a9ac <_free_r+0x90>
 800a922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a926:	9001      	str	r0, [sp, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f1a1 0404 	sub.w	r4, r1, #4
 800a92e:	bfb8      	it	lt
 800a930:	18e4      	addlt	r4, r4, r3
 800a932:	f001 fd0d 	bl	800c350 <__malloc_lock>
 800a936:	4a1e      	ldr	r2, [pc, #120]	; (800a9b0 <_free_r+0x94>)
 800a938:	9801      	ldr	r0, [sp, #4]
 800a93a:	6813      	ldr	r3, [r2, #0]
 800a93c:	b933      	cbnz	r3, 800a94c <_free_r+0x30>
 800a93e:	6063      	str	r3, [r4, #4]
 800a940:	6014      	str	r4, [r2, #0]
 800a942:	b003      	add	sp, #12
 800a944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a948:	f001 bd08 	b.w	800c35c <__malloc_unlock>
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d908      	bls.n	800a962 <_free_r+0x46>
 800a950:	6825      	ldr	r5, [r4, #0]
 800a952:	1961      	adds	r1, r4, r5
 800a954:	428b      	cmp	r3, r1
 800a956:	bf01      	itttt	eq
 800a958:	6819      	ldreq	r1, [r3, #0]
 800a95a:	685b      	ldreq	r3, [r3, #4]
 800a95c:	1949      	addeq	r1, r1, r5
 800a95e:	6021      	streq	r1, [r4, #0]
 800a960:	e7ed      	b.n	800a93e <_free_r+0x22>
 800a962:	461a      	mov	r2, r3
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	b10b      	cbz	r3, 800a96c <_free_r+0x50>
 800a968:	42a3      	cmp	r3, r4
 800a96a:	d9fa      	bls.n	800a962 <_free_r+0x46>
 800a96c:	6811      	ldr	r1, [r2, #0]
 800a96e:	1855      	adds	r5, r2, r1
 800a970:	42a5      	cmp	r5, r4
 800a972:	d10b      	bne.n	800a98c <_free_r+0x70>
 800a974:	6824      	ldr	r4, [r4, #0]
 800a976:	4421      	add	r1, r4
 800a978:	1854      	adds	r4, r2, r1
 800a97a:	42a3      	cmp	r3, r4
 800a97c:	6011      	str	r1, [r2, #0]
 800a97e:	d1e0      	bne.n	800a942 <_free_r+0x26>
 800a980:	681c      	ldr	r4, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	6053      	str	r3, [r2, #4]
 800a986:	4421      	add	r1, r4
 800a988:	6011      	str	r1, [r2, #0]
 800a98a:	e7da      	b.n	800a942 <_free_r+0x26>
 800a98c:	d902      	bls.n	800a994 <_free_r+0x78>
 800a98e:	230c      	movs	r3, #12
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	e7d6      	b.n	800a942 <_free_r+0x26>
 800a994:	6825      	ldr	r5, [r4, #0]
 800a996:	1961      	adds	r1, r4, r5
 800a998:	428b      	cmp	r3, r1
 800a99a:	bf04      	itt	eq
 800a99c:	6819      	ldreq	r1, [r3, #0]
 800a99e:	685b      	ldreq	r3, [r3, #4]
 800a9a0:	6063      	str	r3, [r4, #4]
 800a9a2:	bf04      	itt	eq
 800a9a4:	1949      	addeq	r1, r1, r5
 800a9a6:	6021      	streq	r1, [r4, #0]
 800a9a8:	6054      	str	r4, [r2, #4]
 800a9aa:	e7ca      	b.n	800a942 <_free_r+0x26>
 800a9ac:	b003      	add	sp, #12
 800a9ae:	bd30      	pop	{r4, r5, pc}
 800a9b0:	20004044 	.word	0x20004044

0800a9b4 <sbrk_aligned>:
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	4e0e      	ldr	r6, [pc, #56]	; (800a9f0 <sbrk_aligned+0x3c>)
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	6831      	ldr	r1, [r6, #0]
 800a9bc:	4605      	mov	r5, r0
 800a9be:	b911      	cbnz	r1, 800a9c6 <sbrk_aligned+0x12>
 800a9c0:	f000 fd0e 	bl	800b3e0 <_sbrk_r>
 800a9c4:	6030      	str	r0, [r6, #0]
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f000 fd09 	bl	800b3e0 <_sbrk_r>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	d00a      	beq.n	800a9e8 <sbrk_aligned+0x34>
 800a9d2:	1cc4      	adds	r4, r0, #3
 800a9d4:	f024 0403 	bic.w	r4, r4, #3
 800a9d8:	42a0      	cmp	r0, r4
 800a9da:	d007      	beq.n	800a9ec <sbrk_aligned+0x38>
 800a9dc:	1a21      	subs	r1, r4, r0
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 fcfe 	bl	800b3e0 <_sbrk_r>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d101      	bne.n	800a9ec <sbrk_aligned+0x38>
 800a9e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	20004048 	.word	0x20004048

0800a9f4 <_malloc_r>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	1ccd      	adds	r5, r1, #3
 800a9fa:	f025 0503 	bic.w	r5, r5, #3
 800a9fe:	3508      	adds	r5, #8
 800aa00:	2d0c      	cmp	r5, #12
 800aa02:	bf38      	it	cc
 800aa04:	250c      	movcc	r5, #12
 800aa06:	2d00      	cmp	r5, #0
 800aa08:	4607      	mov	r7, r0
 800aa0a:	db01      	blt.n	800aa10 <_malloc_r+0x1c>
 800aa0c:	42a9      	cmp	r1, r5
 800aa0e:	d905      	bls.n	800aa1c <_malloc_r+0x28>
 800aa10:	230c      	movs	r3, #12
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	2600      	movs	r6, #0
 800aa16:	4630      	mov	r0, r6
 800aa18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1c:	4e2e      	ldr	r6, [pc, #184]	; (800aad8 <_malloc_r+0xe4>)
 800aa1e:	f001 fc97 	bl	800c350 <__malloc_lock>
 800aa22:	6833      	ldr	r3, [r6, #0]
 800aa24:	461c      	mov	r4, r3
 800aa26:	bb34      	cbnz	r4, 800aa76 <_malloc_r+0x82>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f7ff ffc2 	bl	800a9b4 <sbrk_aligned>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	4604      	mov	r4, r0
 800aa34:	d14d      	bne.n	800aad2 <_malloc_r+0xde>
 800aa36:	6834      	ldr	r4, [r6, #0]
 800aa38:	4626      	mov	r6, r4
 800aa3a:	2e00      	cmp	r6, #0
 800aa3c:	d140      	bne.n	800aac0 <_malloc_r+0xcc>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	4631      	mov	r1, r6
 800aa42:	4638      	mov	r0, r7
 800aa44:	eb04 0803 	add.w	r8, r4, r3
 800aa48:	f000 fcca 	bl	800b3e0 <_sbrk_r>
 800aa4c:	4580      	cmp	r8, r0
 800aa4e:	d13a      	bne.n	800aac6 <_malloc_r+0xd2>
 800aa50:	6821      	ldr	r1, [r4, #0]
 800aa52:	3503      	adds	r5, #3
 800aa54:	1a6d      	subs	r5, r5, r1
 800aa56:	f025 0503 	bic.w	r5, r5, #3
 800aa5a:	3508      	adds	r5, #8
 800aa5c:	2d0c      	cmp	r5, #12
 800aa5e:	bf38      	it	cc
 800aa60:	250c      	movcc	r5, #12
 800aa62:	4629      	mov	r1, r5
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff ffa5 	bl	800a9b4 <sbrk_aligned>
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	d02b      	beq.n	800aac6 <_malloc_r+0xd2>
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	442b      	add	r3, r5
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	e00e      	b.n	800aa94 <_malloc_r+0xa0>
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	1b52      	subs	r2, r2, r5
 800aa7a:	d41e      	bmi.n	800aaba <_malloc_r+0xc6>
 800aa7c:	2a0b      	cmp	r2, #11
 800aa7e:	d916      	bls.n	800aaae <_malloc_r+0xba>
 800aa80:	1961      	adds	r1, r4, r5
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	6025      	str	r5, [r4, #0]
 800aa86:	bf18      	it	ne
 800aa88:	6059      	strne	r1, [r3, #4]
 800aa8a:	6863      	ldr	r3, [r4, #4]
 800aa8c:	bf08      	it	eq
 800aa8e:	6031      	streq	r1, [r6, #0]
 800aa90:	5162      	str	r2, [r4, r5]
 800aa92:	604b      	str	r3, [r1, #4]
 800aa94:	4638      	mov	r0, r7
 800aa96:	f104 060b 	add.w	r6, r4, #11
 800aa9a:	f001 fc5f 	bl	800c35c <__malloc_unlock>
 800aa9e:	f026 0607 	bic.w	r6, r6, #7
 800aaa2:	1d23      	adds	r3, r4, #4
 800aaa4:	1af2      	subs	r2, r6, r3
 800aaa6:	d0b6      	beq.n	800aa16 <_malloc_r+0x22>
 800aaa8:	1b9b      	subs	r3, r3, r6
 800aaaa:	50a3      	str	r3, [r4, r2]
 800aaac:	e7b3      	b.n	800aa16 <_malloc_r+0x22>
 800aaae:	6862      	ldr	r2, [r4, #4]
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	bf0c      	ite	eq
 800aab4:	6032      	streq	r2, [r6, #0]
 800aab6:	605a      	strne	r2, [r3, #4]
 800aab8:	e7ec      	b.n	800aa94 <_malloc_r+0xa0>
 800aaba:	4623      	mov	r3, r4
 800aabc:	6864      	ldr	r4, [r4, #4]
 800aabe:	e7b2      	b.n	800aa26 <_malloc_r+0x32>
 800aac0:	4634      	mov	r4, r6
 800aac2:	6876      	ldr	r6, [r6, #4]
 800aac4:	e7b9      	b.n	800aa3a <_malloc_r+0x46>
 800aac6:	230c      	movs	r3, #12
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	4638      	mov	r0, r7
 800aacc:	f001 fc46 	bl	800c35c <__malloc_unlock>
 800aad0:	e7a1      	b.n	800aa16 <_malloc_r+0x22>
 800aad2:	6025      	str	r5, [r4, #0]
 800aad4:	e7de      	b.n	800aa94 <_malloc_r+0xa0>
 800aad6:	bf00      	nop
 800aad8:	20004044 	.word	0x20004044

0800aadc <__cvt>:
 800aadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae0:	ec55 4b10 	vmov	r4, r5, d0
 800aae4:	2d00      	cmp	r5, #0
 800aae6:	460e      	mov	r6, r1
 800aae8:	4619      	mov	r1, r3
 800aaea:	462b      	mov	r3, r5
 800aaec:	bfbb      	ittet	lt
 800aaee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aaf2:	461d      	movlt	r5, r3
 800aaf4:	2300      	movge	r3, #0
 800aaf6:	232d      	movlt	r3, #45	; 0x2d
 800aaf8:	700b      	strb	r3, [r1, #0]
 800aafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aafc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab00:	4691      	mov	r9, r2
 800ab02:	f023 0820 	bic.w	r8, r3, #32
 800ab06:	bfbc      	itt	lt
 800ab08:	4622      	movlt	r2, r4
 800ab0a:	4614      	movlt	r4, r2
 800ab0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab10:	d005      	beq.n	800ab1e <__cvt+0x42>
 800ab12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab16:	d100      	bne.n	800ab1a <__cvt+0x3e>
 800ab18:	3601      	adds	r6, #1
 800ab1a:	2102      	movs	r1, #2
 800ab1c:	e000      	b.n	800ab20 <__cvt+0x44>
 800ab1e:	2103      	movs	r1, #3
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	ab02      	add	r3, sp, #8
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	ec45 4b10 	vmov	d0, r4, r5
 800ab2c:	4653      	mov	r3, sl
 800ab2e:	4632      	mov	r2, r6
 800ab30:	f000 fd22 	bl	800b578 <_dtoa_r>
 800ab34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab38:	4607      	mov	r7, r0
 800ab3a:	d102      	bne.n	800ab42 <__cvt+0x66>
 800ab3c:	f019 0f01 	tst.w	r9, #1
 800ab40:	d022      	beq.n	800ab88 <__cvt+0xac>
 800ab42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab46:	eb07 0906 	add.w	r9, r7, r6
 800ab4a:	d110      	bne.n	800ab6e <__cvt+0x92>
 800ab4c:	783b      	ldrb	r3, [r7, #0]
 800ab4e:	2b30      	cmp	r3, #48	; 0x30
 800ab50:	d10a      	bne.n	800ab68 <__cvt+0x8c>
 800ab52:	2200      	movs	r2, #0
 800ab54:	2300      	movs	r3, #0
 800ab56:	4620      	mov	r0, r4
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f7f5 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab5e:	b918      	cbnz	r0, 800ab68 <__cvt+0x8c>
 800ab60:	f1c6 0601 	rsb	r6, r6, #1
 800ab64:	f8ca 6000 	str.w	r6, [sl]
 800ab68:	f8da 3000 	ldr.w	r3, [sl]
 800ab6c:	4499      	add	r9, r3
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2300      	movs	r3, #0
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7f5 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7a:	b108      	cbz	r0, 800ab80 <__cvt+0xa4>
 800ab7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab80:	2230      	movs	r2, #48	; 0x30
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	454b      	cmp	r3, r9
 800ab86:	d307      	bcc.n	800ab98 <__cvt+0xbc>
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab8c:	1bdb      	subs	r3, r3, r7
 800ab8e:	4638      	mov	r0, r7
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	b004      	add	sp, #16
 800ab94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab98:	1c59      	adds	r1, r3, #1
 800ab9a:	9103      	str	r1, [sp, #12]
 800ab9c:	701a      	strb	r2, [r3, #0]
 800ab9e:	e7f0      	b.n	800ab82 <__cvt+0xa6>

0800aba0 <__exponent>:
 800aba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba2:	4603      	mov	r3, r0
 800aba4:	2900      	cmp	r1, #0
 800aba6:	bfb8      	it	lt
 800aba8:	4249      	neglt	r1, r1
 800abaa:	f803 2b02 	strb.w	r2, [r3], #2
 800abae:	bfb4      	ite	lt
 800abb0:	222d      	movlt	r2, #45	; 0x2d
 800abb2:	222b      	movge	r2, #43	; 0x2b
 800abb4:	2909      	cmp	r1, #9
 800abb6:	7042      	strb	r2, [r0, #1]
 800abb8:	dd2a      	ble.n	800ac10 <__exponent+0x70>
 800abba:	f10d 0407 	add.w	r4, sp, #7
 800abbe:	46a4      	mov	ip, r4
 800abc0:	270a      	movs	r7, #10
 800abc2:	46a6      	mov	lr, r4
 800abc4:	460a      	mov	r2, r1
 800abc6:	fb91 f6f7 	sdiv	r6, r1, r7
 800abca:	fb07 1516 	mls	r5, r7, r6, r1
 800abce:	3530      	adds	r5, #48	; 0x30
 800abd0:	2a63      	cmp	r2, #99	; 0x63
 800abd2:	f104 34ff 	add.w	r4, r4, #4294967295
 800abd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abda:	4631      	mov	r1, r6
 800abdc:	dcf1      	bgt.n	800abc2 <__exponent+0x22>
 800abde:	3130      	adds	r1, #48	; 0x30
 800abe0:	f1ae 0502 	sub.w	r5, lr, #2
 800abe4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800abe8:	1c44      	adds	r4, r0, #1
 800abea:	4629      	mov	r1, r5
 800abec:	4561      	cmp	r1, ip
 800abee:	d30a      	bcc.n	800ac06 <__exponent+0x66>
 800abf0:	f10d 0209 	add.w	r2, sp, #9
 800abf4:	eba2 020e 	sub.w	r2, r2, lr
 800abf8:	4565      	cmp	r5, ip
 800abfa:	bf88      	it	hi
 800abfc:	2200      	movhi	r2, #0
 800abfe:	4413      	add	r3, r2
 800ac00:	1a18      	subs	r0, r3, r0
 800ac02:	b003      	add	sp, #12
 800ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac0e:	e7ed      	b.n	800abec <__exponent+0x4c>
 800ac10:	2330      	movs	r3, #48	; 0x30
 800ac12:	3130      	adds	r1, #48	; 0x30
 800ac14:	7083      	strb	r3, [r0, #2]
 800ac16:	70c1      	strb	r1, [r0, #3]
 800ac18:	1d03      	adds	r3, r0, #4
 800ac1a:	e7f1      	b.n	800ac00 <__exponent+0x60>

0800ac1c <_printf_float>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	ed2d 8b02 	vpush	{d8}
 800ac24:	b08d      	sub	sp, #52	; 0x34
 800ac26:	460c      	mov	r4, r1
 800ac28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	461f      	mov	r7, r3
 800ac30:	4605      	mov	r5, r0
 800ac32:	f001 fb85 	bl	800c340 <_localeconv_r>
 800ac36:	f8d0 a000 	ldr.w	sl, [r0]
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	f7f5 fac8 	bl	80001d0 <strlen>
 800ac40:	2300      	movs	r3, #0
 800ac42:	930a      	str	r3, [sp, #40]	; 0x28
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	9305      	str	r3, [sp, #20]
 800ac48:	f8d8 3000 	ldr.w	r3, [r8]
 800ac4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac50:	3307      	adds	r3, #7
 800ac52:	f023 0307 	bic.w	r3, r3, #7
 800ac56:	f103 0208 	add.w	r2, r3, #8
 800ac5a:	f8c8 2000 	str.w	r2, [r8]
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac6e:	9307      	str	r3, [sp, #28]
 800ac70:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac74:	ee08 0a10 	vmov	s16, r0
 800ac78:	4b9f      	ldr	r3, [pc, #636]	; (800aef8 <_printf_float+0x2dc>)
 800ac7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac82:	f7f5 ff53 	bl	8000b2c <__aeabi_dcmpun>
 800ac86:	bb88      	cbnz	r0, 800acec <_printf_float+0xd0>
 800ac88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac8c:	4b9a      	ldr	r3, [pc, #616]	; (800aef8 <_printf_float+0x2dc>)
 800ac8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac92:	f7f5 ff2d 	bl	8000af0 <__aeabi_dcmple>
 800ac96:	bb48      	cbnz	r0, 800acec <_printf_float+0xd0>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800aca4:	b110      	cbz	r0, 800acac <_printf_float+0x90>
 800aca6:	232d      	movs	r3, #45	; 0x2d
 800aca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acac:	4b93      	ldr	r3, [pc, #588]	; (800aefc <_printf_float+0x2e0>)
 800acae:	4894      	ldr	r0, [pc, #592]	; (800af00 <_printf_float+0x2e4>)
 800acb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800acb4:	bf94      	ite	ls
 800acb6:	4698      	movls	r8, r3
 800acb8:	4680      	movhi	r8, r0
 800acba:	2303      	movs	r3, #3
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	f023 0204 	bic.w	r2, r3, #4
 800acc4:	6022      	str	r2, [r4, #0]
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	9700      	str	r7, [sp, #0]
 800accc:	4633      	mov	r3, r6
 800acce:	aa0b      	add	r2, sp, #44	; 0x2c
 800acd0:	4621      	mov	r1, r4
 800acd2:	4628      	mov	r0, r5
 800acd4:	f000 f9d8 	bl	800b088 <_printf_common>
 800acd8:	3001      	adds	r0, #1
 800acda:	f040 8090 	bne.w	800adfe <_printf_float+0x1e2>
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	b00d      	add	sp, #52	; 0x34
 800ace4:	ecbd 8b02 	vpop	{d8}
 800ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	4642      	mov	r2, r8
 800acee:	464b      	mov	r3, r9
 800acf0:	4640      	mov	r0, r8
 800acf2:	4649      	mov	r1, r9
 800acf4:	f7f5 ff1a 	bl	8000b2c <__aeabi_dcmpun>
 800acf8:	b140      	cbz	r0, 800ad0c <_printf_float+0xf0>
 800acfa:	464b      	mov	r3, r9
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	bfbc      	itt	lt
 800ad00:	232d      	movlt	r3, #45	; 0x2d
 800ad02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad06:	487f      	ldr	r0, [pc, #508]	; (800af04 <_printf_float+0x2e8>)
 800ad08:	4b7f      	ldr	r3, [pc, #508]	; (800af08 <_printf_float+0x2ec>)
 800ad0a:	e7d1      	b.n	800acb0 <_printf_float+0x94>
 800ad0c:	6863      	ldr	r3, [r4, #4]
 800ad0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad12:	9206      	str	r2, [sp, #24]
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	d13f      	bne.n	800ad98 <_printf_float+0x17c>
 800ad18:	2306      	movs	r3, #6
 800ad1a:	6063      	str	r3, [r4, #4]
 800ad1c:	9b05      	ldr	r3, [sp, #20]
 800ad1e:	6861      	ldr	r1, [r4, #4]
 800ad20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad24:	2300      	movs	r3, #0
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	ab0a      	add	r3, sp, #40	; 0x28
 800ad2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad2e:	ab09      	add	r3, sp, #36	; 0x24
 800ad30:	ec49 8b10 	vmov	d0, r8, r9
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	6022      	str	r2, [r4, #0]
 800ad38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f7ff fecd 	bl	800aadc <__cvt>
 800ad42:	9b06      	ldr	r3, [sp, #24]
 800ad44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad46:	2b47      	cmp	r3, #71	; 0x47
 800ad48:	4680      	mov	r8, r0
 800ad4a:	d108      	bne.n	800ad5e <_printf_float+0x142>
 800ad4c:	1cc8      	adds	r0, r1, #3
 800ad4e:	db02      	blt.n	800ad56 <_printf_float+0x13a>
 800ad50:	6863      	ldr	r3, [r4, #4]
 800ad52:	4299      	cmp	r1, r3
 800ad54:	dd41      	ble.n	800adda <_printf_float+0x1be>
 800ad56:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad5a:	fa5f fb8b 	uxtb.w	fp, fp
 800ad5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad62:	d820      	bhi.n	800ada6 <_printf_float+0x18a>
 800ad64:	3901      	subs	r1, #1
 800ad66:	465a      	mov	r2, fp
 800ad68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad6c:	9109      	str	r1, [sp, #36]	; 0x24
 800ad6e:	f7ff ff17 	bl	800aba0 <__exponent>
 800ad72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad74:	1813      	adds	r3, r2, r0
 800ad76:	2a01      	cmp	r2, #1
 800ad78:	4681      	mov	r9, r0
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	dc02      	bgt.n	800ad84 <_printf_float+0x168>
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	07d2      	lsls	r2, r2, #31
 800ad82:	d501      	bpl.n	800ad88 <_printf_float+0x16c>
 800ad84:	3301      	adds	r3, #1
 800ad86:	6123      	str	r3, [r4, #16]
 800ad88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d09c      	beq.n	800acca <_printf_float+0xae>
 800ad90:	232d      	movs	r3, #45	; 0x2d
 800ad92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad96:	e798      	b.n	800acca <_printf_float+0xae>
 800ad98:	9a06      	ldr	r2, [sp, #24]
 800ad9a:	2a47      	cmp	r2, #71	; 0x47
 800ad9c:	d1be      	bne.n	800ad1c <_printf_float+0x100>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1bc      	bne.n	800ad1c <_printf_float+0x100>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e7b9      	b.n	800ad1a <_printf_float+0xfe>
 800ada6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adaa:	d118      	bne.n	800adde <_printf_float+0x1c2>
 800adac:	2900      	cmp	r1, #0
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	dd0b      	ble.n	800adca <_printf_float+0x1ae>
 800adb2:	6121      	str	r1, [r4, #16]
 800adb4:	b913      	cbnz	r3, 800adbc <_printf_float+0x1a0>
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	07d0      	lsls	r0, r2, #31
 800adba:	d502      	bpl.n	800adc2 <_printf_float+0x1a6>
 800adbc:	3301      	adds	r3, #1
 800adbe:	440b      	add	r3, r1
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800adc4:	f04f 0900 	mov.w	r9, #0
 800adc8:	e7de      	b.n	800ad88 <_printf_float+0x16c>
 800adca:	b913      	cbnz	r3, 800add2 <_printf_float+0x1b6>
 800adcc:	6822      	ldr	r2, [r4, #0]
 800adce:	07d2      	lsls	r2, r2, #31
 800add0:	d501      	bpl.n	800add6 <_printf_float+0x1ba>
 800add2:	3302      	adds	r3, #2
 800add4:	e7f4      	b.n	800adc0 <_printf_float+0x1a4>
 800add6:	2301      	movs	r3, #1
 800add8:	e7f2      	b.n	800adc0 <_printf_float+0x1a4>
 800adda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade0:	4299      	cmp	r1, r3
 800ade2:	db05      	blt.n	800adf0 <_printf_float+0x1d4>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	6121      	str	r1, [r4, #16]
 800ade8:	07d8      	lsls	r0, r3, #31
 800adea:	d5ea      	bpl.n	800adc2 <_printf_float+0x1a6>
 800adec:	1c4b      	adds	r3, r1, #1
 800adee:	e7e7      	b.n	800adc0 <_printf_float+0x1a4>
 800adf0:	2900      	cmp	r1, #0
 800adf2:	bfd4      	ite	le
 800adf4:	f1c1 0202 	rsble	r2, r1, #2
 800adf8:	2201      	movgt	r2, #1
 800adfa:	4413      	add	r3, r2
 800adfc:	e7e0      	b.n	800adc0 <_printf_float+0x1a4>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	055a      	lsls	r2, r3, #21
 800ae02:	d407      	bmi.n	800ae14 <_printf_float+0x1f8>
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	4642      	mov	r2, r8
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	47b8      	blx	r7
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d12c      	bne.n	800ae6c <_printf_float+0x250>
 800ae12:	e764      	b.n	800acde <_printf_float+0xc2>
 800ae14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae18:	f240 80e0 	bls.w	800afdc <_printf_float+0x3c0>
 800ae1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae20:	2200      	movs	r2, #0
 800ae22:	2300      	movs	r3, #0
 800ae24:	f7f5 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d034      	beq.n	800ae96 <_printf_float+0x27a>
 800ae2c:	4a37      	ldr	r2, [pc, #220]	; (800af0c <_printf_float+0x2f0>)
 800ae2e:	2301      	movs	r3, #1
 800ae30:	4631      	mov	r1, r6
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f af51 	beq.w	800acde <_printf_float+0xc2>
 800ae3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae40:	429a      	cmp	r2, r3
 800ae42:	db02      	blt.n	800ae4a <_printf_float+0x22e>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	07d8      	lsls	r0, r3, #31
 800ae48:	d510      	bpl.n	800ae6c <_printf_float+0x250>
 800ae4a:	ee18 3a10 	vmov	r3, s16
 800ae4e:	4652      	mov	r2, sl
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	f43f af41 	beq.w	800acde <_printf_float+0xc2>
 800ae5c:	f04f 0800 	mov.w	r8, #0
 800ae60:	f104 091a 	add.w	r9, r4, #26
 800ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae66:	3b01      	subs	r3, #1
 800ae68:	4543      	cmp	r3, r8
 800ae6a:	dc09      	bgt.n	800ae80 <_printf_float+0x264>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	079b      	lsls	r3, r3, #30
 800ae70:	f100 8105 	bmi.w	800b07e <_printf_float+0x462>
 800ae74:	68e0      	ldr	r0, [r4, #12]
 800ae76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae78:	4298      	cmp	r0, r3
 800ae7a:	bfb8      	it	lt
 800ae7c:	4618      	movlt	r0, r3
 800ae7e:	e730      	b.n	800ace2 <_printf_float+0xc6>
 800ae80:	2301      	movs	r3, #1
 800ae82:	464a      	mov	r2, r9
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f43f af27 	beq.w	800acde <_printf_float+0xc2>
 800ae90:	f108 0801 	add.w	r8, r8, #1
 800ae94:	e7e6      	b.n	800ae64 <_printf_float+0x248>
 800ae96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dc39      	bgt.n	800af10 <_printf_float+0x2f4>
 800ae9c:	4a1b      	ldr	r2, [pc, #108]	; (800af0c <_printf_float+0x2f0>)
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4631      	mov	r1, r6
 800aea2:	4628      	mov	r0, r5
 800aea4:	47b8      	blx	r7
 800aea6:	3001      	adds	r0, #1
 800aea8:	f43f af19 	beq.w	800acde <_printf_float+0xc2>
 800aeac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	d102      	bne.n	800aeba <_printf_float+0x29e>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	07d9      	lsls	r1, r3, #31
 800aeb8:	d5d8      	bpl.n	800ae6c <_printf_float+0x250>
 800aeba:	ee18 3a10 	vmov	r3, s16
 800aebe:	4652      	mov	r2, sl
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	f43f af09 	beq.w	800acde <_printf_float+0xc2>
 800aecc:	f04f 0900 	mov.w	r9, #0
 800aed0:	f104 0a1a 	add.w	sl, r4, #26
 800aed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed6:	425b      	negs	r3, r3
 800aed8:	454b      	cmp	r3, r9
 800aeda:	dc01      	bgt.n	800aee0 <_printf_float+0x2c4>
 800aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aede:	e792      	b.n	800ae06 <_printf_float+0x1ea>
 800aee0:	2301      	movs	r3, #1
 800aee2:	4652      	mov	r2, sl
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f43f aef7 	beq.w	800acde <_printf_float+0xc2>
 800aef0:	f109 0901 	add.w	r9, r9, #1
 800aef4:	e7ee      	b.n	800aed4 <_printf_float+0x2b8>
 800aef6:	bf00      	nop
 800aef8:	7fefffff 	.word	0x7fefffff
 800aefc:	08019af4 	.word	0x08019af4
 800af00:	08019af8 	.word	0x08019af8
 800af04:	08019b00 	.word	0x08019b00
 800af08:	08019afc 	.word	0x08019afc
 800af0c:	08019b04 	.word	0x08019b04
 800af10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af14:	429a      	cmp	r2, r3
 800af16:	bfa8      	it	ge
 800af18:	461a      	movge	r2, r3
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	4691      	mov	r9, r2
 800af1e:	dc37      	bgt.n	800af90 <_printf_float+0x374>
 800af20:	f04f 0b00 	mov.w	fp, #0
 800af24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af28:	f104 021a 	add.w	r2, r4, #26
 800af2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af2e:	9305      	str	r3, [sp, #20]
 800af30:	eba3 0309 	sub.w	r3, r3, r9
 800af34:	455b      	cmp	r3, fp
 800af36:	dc33      	bgt.n	800afa0 <_printf_float+0x384>
 800af38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af3c:	429a      	cmp	r2, r3
 800af3e:	db3b      	blt.n	800afb8 <_printf_float+0x39c>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	07da      	lsls	r2, r3, #31
 800af44:	d438      	bmi.n	800afb8 <_printf_float+0x39c>
 800af46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af48:	9a05      	ldr	r2, [sp, #20]
 800af4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af4c:	1a9a      	subs	r2, r3, r2
 800af4e:	eba3 0901 	sub.w	r9, r3, r1
 800af52:	4591      	cmp	r9, r2
 800af54:	bfa8      	it	ge
 800af56:	4691      	movge	r9, r2
 800af58:	f1b9 0f00 	cmp.w	r9, #0
 800af5c:	dc35      	bgt.n	800afca <_printf_float+0x3ae>
 800af5e:	f04f 0800 	mov.w	r8, #0
 800af62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af66:	f104 0a1a 	add.w	sl, r4, #26
 800af6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	eba3 0309 	sub.w	r3, r3, r9
 800af74:	4543      	cmp	r3, r8
 800af76:	f77f af79 	ble.w	800ae6c <_printf_float+0x250>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4652      	mov	r2, sl
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f aeaa 	beq.w	800acde <_printf_float+0xc2>
 800af8a:	f108 0801 	add.w	r8, r8, #1
 800af8e:	e7ec      	b.n	800af6a <_printf_float+0x34e>
 800af90:	4613      	mov	r3, r2
 800af92:	4631      	mov	r1, r6
 800af94:	4642      	mov	r2, r8
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	d1c0      	bne.n	800af20 <_printf_float+0x304>
 800af9e:	e69e      	b.n	800acde <_printf_float+0xc2>
 800afa0:	2301      	movs	r3, #1
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	47b8      	blx	r7
 800afaa:	3001      	adds	r0, #1
 800afac:	f43f ae97 	beq.w	800acde <_printf_float+0xc2>
 800afb0:	9a05      	ldr	r2, [sp, #20]
 800afb2:	f10b 0b01 	add.w	fp, fp, #1
 800afb6:	e7b9      	b.n	800af2c <_printf_float+0x310>
 800afb8:	ee18 3a10 	vmov	r3, s16
 800afbc:	4652      	mov	r2, sl
 800afbe:	4631      	mov	r1, r6
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b8      	blx	r7
 800afc4:	3001      	adds	r0, #1
 800afc6:	d1be      	bne.n	800af46 <_printf_float+0x32a>
 800afc8:	e689      	b.n	800acde <_printf_float+0xc2>
 800afca:	9a05      	ldr	r2, [sp, #20]
 800afcc:	464b      	mov	r3, r9
 800afce:	4442      	add	r2, r8
 800afd0:	4631      	mov	r1, r6
 800afd2:	4628      	mov	r0, r5
 800afd4:	47b8      	blx	r7
 800afd6:	3001      	adds	r0, #1
 800afd8:	d1c1      	bne.n	800af5e <_printf_float+0x342>
 800afda:	e680      	b.n	800acde <_printf_float+0xc2>
 800afdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afde:	2a01      	cmp	r2, #1
 800afe0:	dc01      	bgt.n	800afe6 <_printf_float+0x3ca>
 800afe2:	07db      	lsls	r3, r3, #31
 800afe4:	d538      	bpl.n	800b058 <_printf_float+0x43c>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4642      	mov	r2, r8
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f ae74 	beq.w	800acde <_printf_float+0xc2>
 800aff6:	ee18 3a10 	vmov	r3, s16
 800affa:	4652      	mov	r2, sl
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	f43f ae6b 	beq.w	800acde <_printf_float+0xc2>
 800b008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b00c:	2200      	movs	r2, #0
 800b00e:	2300      	movs	r3, #0
 800b010:	f7f5 fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b014:	b9d8      	cbnz	r0, 800b04e <_printf_float+0x432>
 800b016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b018:	f108 0201 	add.w	r2, r8, #1
 800b01c:	3b01      	subs	r3, #1
 800b01e:	4631      	mov	r1, r6
 800b020:	4628      	mov	r0, r5
 800b022:	47b8      	blx	r7
 800b024:	3001      	adds	r0, #1
 800b026:	d10e      	bne.n	800b046 <_printf_float+0x42a>
 800b028:	e659      	b.n	800acde <_printf_float+0xc2>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4652      	mov	r2, sl
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	f43f ae52 	beq.w	800acde <_printf_float+0xc2>
 800b03a:	f108 0801 	add.w	r8, r8, #1
 800b03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b040:	3b01      	subs	r3, #1
 800b042:	4543      	cmp	r3, r8
 800b044:	dcf1      	bgt.n	800b02a <_printf_float+0x40e>
 800b046:	464b      	mov	r3, r9
 800b048:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b04c:	e6dc      	b.n	800ae08 <_printf_float+0x1ec>
 800b04e:	f04f 0800 	mov.w	r8, #0
 800b052:	f104 0a1a 	add.w	sl, r4, #26
 800b056:	e7f2      	b.n	800b03e <_printf_float+0x422>
 800b058:	2301      	movs	r3, #1
 800b05a:	4642      	mov	r2, r8
 800b05c:	e7df      	b.n	800b01e <_printf_float+0x402>
 800b05e:	2301      	movs	r3, #1
 800b060:	464a      	mov	r2, r9
 800b062:	4631      	mov	r1, r6
 800b064:	4628      	mov	r0, r5
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	f43f ae38 	beq.w	800acde <_printf_float+0xc2>
 800b06e:	f108 0801 	add.w	r8, r8, #1
 800b072:	68e3      	ldr	r3, [r4, #12]
 800b074:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b076:	1a5b      	subs	r3, r3, r1
 800b078:	4543      	cmp	r3, r8
 800b07a:	dcf0      	bgt.n	800b05e <_printf_float+0x442>
 800b07c:	e6fa      	b.n	800ae74 <_printf_float+0x258>
 800b07e:	f04f 0800 	mov.w	r8, #0
 800b082:	f104 0919 	add.w	r9, r4, #25
 800b086:	e7f4      	b.n	800b072 <_printf_float+0x456>

0800b088 <_printf_common>:
 800b088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b08c:	4616      	mov	r6, r2
 800b08e:	4699      	mov	r9, r3
 800b090:	688a      	ldr	r2, [r1, #8]
 800b092:	690b      	ldr	r3, [r1, #16]
 800b094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b098:	4293      	cmp	r3, r2
 800b09a:	bfb8      	it	lt
 800b09c:	4613      	movlt	r3, r2
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	b10a      	cbz	r2, 800b0ae <_printf_common+0x26>
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	0699      	lsls	r1, r3, #26
 800b0b2:	bf42      	ittt	mi
 800b0b4:	6833      	ldrmi	r3, [r6, #0]
 800b0b6:	3302      	addmi	r3, #2
 800b0b8:	6033      	strmi	r3, [r6, #0]
 800b0ba:	6825      	ldr	r5, [r4, #0]
 800b0bc:	f015 0506 	ands.w	r5, r5, #6
 800b0c0:	d106      	bne.n	800b0d0 <_printf_common+0x48>
 800b0c2:	f104 0a19 	add.w	sl, r4, #25
 800b0c6:	68e3      	ldr	r3, [r4, #12]
 800b0c8:	6832      	ldr	r2, [r6, #0]
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	42ab      	cmp	r3, r5
 800b0ce:	dc26      	bgt.n	800b11e <_printf_common+0x96>
 800b0d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0d4:	1e13      	subs	r3, r2, #0
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	bf18      	it	ne
 800b0da:	2301      	movne	r3, #1
 800b0dc:	0692      	lsls	r2, r2, #26
 800b0de:	d42b      	bmi.n	800b138 <_printf_common+0xb0>
 800b0e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	47c0      	blx	r8
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	d01e      	beq.n	800b12c <_printf_common+0xa4>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	68e5      	ldr	r5, [r4, #12]
 800b0f2:	6832      	ldr	r2, [r6, #0]
 800b0f4:	f003 0306 	and.w	r3, r3, #6
 800b0f8:	2b04      	cmp	r3, #4
 800b0fa:	bf08      	it	eq
 800b0fc:	1aad      	subeq	r5, r5, r2
 800b0fe:	68a3      	ldr	r3, [r4, #8]
 800b100:	6922      	ldr	r2, [r4, #16]
 800b102:	bf0c      	ite	eq
 800b104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b108:	2500      	movne	r5, #0
 800b10a:	4293      	cmp	r3, r2
 800b10c:	bfc4      	itt	gt
 800b10e:	1a9b      	subgt	r3, r3, r2
 800b110:	18ed      	addgt	r5, r5, r3
 800b112:	2600      	movs	r6, #0
 800b114:	341a      	adds	r4, #26
 800b116:	42b5      	cmp	r5, r6
 800b118:	d11a      	bne.n	800b150 <_printf_common+0xc8>
 800b11a:	2000      	movs	r0, #0
 800b11c:	e008      	b.n	800b130 <_printf_common+0xa8>
 800b11e:	2301      	movs	r3, #1
 800b120:	4652      	mov	r2, sl
 800b122:	4649      	mov	r1, r9
 800b124:	4638      	mov	r0, r7
 800b126:	47c0      	blx	r8
 800b128:	3001      	adds	r0, #1
 800b12a:	d103      	bne.n	800b134 <_printf_common+0xac>
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b134:	3501      	adds	r5, #1
 800b136:	e7c6      	b.n	800b0c6 <_printf_common+0x3e>
 800b138:	18e1      	adds	r1, r4, r3
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	2030      	movs	r0, #48	; 0x30
 800b13e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b142:	4422      	add	r2, r4
 800b144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b14c:	3302      	adds	r3, #2
 800b14e:	e7c7      	b.n	800b0e0 <_printf_common+0x58>
 800b150:	2301      	movs	r3, #1
 800b152:	4622      	mov	r2, r4
 800b154:	4649      	mov	r1, r9
 800b156:	4638      	mov	r0, r7
 800b158:	47c0      	blx	r8
 800b15a:	3001      	adds	r0, #1
 800b15c:	d0e6      	beq.n	800b12c <_printf_common+0xa4>
 800b15e:	3601      	adds	r6, #1
 800b160:	e7d9      	b.n	800b116 <_printf_common+0x8e>
	...

0800b164 <_printf_i>:
 800b164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b168:	7e0f      	ldrb	r7, [r1, #24]
 800b16a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b16c:	2f78      	cmp	r7, #120	; 0x78
 800b16e:	4691      	mov	r9, r2
 800b170:	4680      	mov	r8, r0
 800b172:	460c      	mov	r4, r1
 800b174:	469a      	mov	sl, r3
 800b176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b17a:	d807      	bhi.n	800b18c <_printf_i+0x28>
 800b17c:	2f62      	cmp	r7, #98	; 0x62
 800b17e:	d80a      	bhi.n	800b196 <_printf_i+0x32>
 800b180:	2f00      	cmp	r7, #0
 800b182:	f000 80d8 	beq.w	800b336 <_printf_i+0x1d2>
 800b186:	2f58      	cmp	r7, #88	; 0x58
 800b188:	f000 80a3 	beq.w	800b2d2 <_printf_i+0x16e>
 800b18c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b194:	e03a      	b.n	800b20c <_printf_i+0xa8>
 800b196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b19a:	2b15      	cmp	r3, #21
 800b19c:	d8f6      	bhi.n	800b18c <_printf_i+0x28>
 800b19e:	a101      	add	r1, pc, #4	; (adr r1, 800b1a4 <_printf_i+0x40>)
 800b1a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a4:	0800b1fd 	.word	0x0800b1fd
 800b1a8:	0800b211 	.word	0x0800b211
 800b1ac:	0800b18d 	.word	0x0800b18d
 800b1b0:	0800b18d 	.word	0x0800b18d
 800b1b4:	0800b18d 	.word	0x0800b18d
 800b1b8:	0800b18d 	.word	0x0800b18d
 800b1bc:	0800b211 	.word	0x0800b211
 800b1c0:	0800b18d 	.word	0x0800b18d
 800b1c4:	0800b18d 	.word	0x0800b18d
 800b1c8:	0800b18d 	.word	0x0800b18d
 800b1cc:	0800b18d 	.word	0x0800b18d
 800b1d0:	0800b31d 	.word	0x0800b31d
 800b1d4:	0800b241 	.word	0x0800b241
 800b1d8:	0800b2ff 	.word	0x0800b2ff
 800b1dc:	0800b18d 	.word	0x0800b18d
 800b1e0:	0800b18d 	.word	0x0800b18d
 800b1e4:	0800b33f 	.word	0x0800b33f
 800b1e8:	0800b18d 	.word	0x0800b18d
 800b1ec:	0800b241 	.word	0x0800b241
 800b1f0:	0800b18d 	.word	0x0800b18d
 800b1f4:	0800b18d 	.word	0x0800b18d
 800b1f8:	0800b307 	.word	0x0800b307
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	602a      	str	r2, [r5, #0]
 800b204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0a3      	b.n	800b358 <_printf_i+0x1f4>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	6829      	ldr	r1, [r5, #0]
 800b214:	0606      	lsls	r6, r0, #24
 800b216:	f101 0304 	add.w	r3, r1, #4
 800b21a:	d50a      	bpl.n	800b232 <_printf_i+0xce>
 800b21c:	680e      	ldr	r6, [r1, #0]
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	2e00      	cmp	r6, #0
 800b222:	da03      	bge.n	800b22c <_printf_i+0xc8>
 800b224:	232d      	movs	r3, #45	; 0x2d
 800b226:	4276      	negs	r6, r6
 800b228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b22c:	485e      	ldr	r0, [pc, #376]	; (800b3a8 <_printf_i+0x244>)
 800b22e:	230a      	movs	r3, #10
 800b230:	e019      	b.n	800b266 <_printf_i+0x102>
 800b232:	680e      	ldr	r6, [r1, #0]
 800b234:	602b      	str	r3, [r5, #0]
 800b236:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b23a:	bf18      	it	ne
 800b23c:	b236      	sxthne	r6, r6
 800b23e:	e7ef      	b.n	800b220 <_printf_i+0xbc>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	6029      	str	r1, [r5, #0]
 800b248:	0601      	lsls	r1, r0, #24
 800b24a:	d501      	bpl.n	800b250 <_printf_i+0xec>
 800b24c:	681e      	ldr	r6, [r3, #0]
 800b24e:	e002      	b.n	800b256 <_printf_i+0xf2>
 800b250:	0646      	lsls	r6, r0, #25
 800b252:	d5fb      	bpl.n	800b24c <_printf_i+0xe8>
 800b254:	881e      	ldrh	r6, [r3, #0]
 800b256:	4854      	ldr	r0, [pc, #336]	; (800b3a8 <_printf_i+0x244>)
 800b258:	2f6f      	cmp	r7, #111	; 0x6f
 800b25a:	bf0c      	ite	eq
 800b25c:	2308      	moveq	r3, #8
 800b25e:	230a      	movne	r3, #10
 800b260:	2100      	movs	r1, #0
 800b262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b266:	6865      	ldr	r5, [r4, #4]
 800b268:	60a5      	str	r5, [r4, #8]
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	bfa2      	ittt	ge
 800b26e:	6821      	ldrge	r1, [r4, #0]
 800b270:	f021 0104 	bicge.w	r1, r1, #4
 800b274:	6021      	strge	r1, [r4, #0]
 800b276:	b90e      	cbnz	r6, 800b27c <_printf_i+0x118>
 800b278:	2d00      	cmp	r5, #0
 800b27a:	d04d      	beq.n	800b318 <_printf_i+0x1b4>
 800b27c:	4615      	mov	r5, r2
 800b27e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b282:	fb03 6711 	mls	r7, r3, r1, r6
 800b286:	5dc7      	ldrb	r7, [r0, r7]
 800b288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b28c:	4637      	mov	r7, r6
 800b28e:	42bb      	cmp	r3, r7
 800b290:	460e      	mov	r6, r1
 800b292:	d9f4      	bls.n	800b27e <_printf_i+0x11a>
 800b294:	2b08      	cmp	r3, #8
 800b296:	d10b      	bne.n	800b2b0 <_printf_i+0x14c>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	07de      	lsls	r6, r3, #31
 800b29c:	d508      	bpl.n	800b2b0 <_printf_i+0x14c>
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	bfde      	ittt	le
 800b2a6:	2330      	movle	r3, #48	; 0x30
 800b2a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2b0:	1b52      	subs	r2, r2, r5
 800b2b2:	6122      	str	r2, [r4, #16]
 800b2b4:	f8cd a000 	str.w	sl, [sp]
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	aa03      	add	r2, sp, #12
 800b2bc:	4621      	mov	r1, r4
 800b2be:	4640      	mov	r0, r8
 800b2c0:	f7ff fee2 	bl	800b088 <_printf_common>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d14c      	bne.n	800b362 <_printf_i+0x1fe>
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2cc:	b004      	add	sp, #16
 800b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d2:	4835      	ldr	r0, [pc, #212]	; (800b3a8 <_printf_i+0x244>)
 800b2d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2d8:	6829      	ldr	r1, [r5, #0]
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2e0:	6029      	str	r1, [r5, #0]
 800b2e2:	061d      	lsls	r5, r3, #24
 800b2e4:	d514      	bpl.n	800b310 <_printf_i+0x1ac>
 800b2e6:	07df      	lsls	r7, r3, #31
 800b2e8:	bf44      	itt	mi
 800b2ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b2ee:	6023      	strmi	r3, [r4, #0]
 800b2f0:	b91e      	cbnz	r6, 800b2fa <_printf_i+0x196>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	f023 0320 	bic.w	r3, r3, #32
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	2310      	movs	r3, #16
 800b2fc:	e7b0      	b.n	800b260 <_printf_i+0xfc>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	f043 0320 	orr.w	r3, r3, #32
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	2378      	movs	r3, #120	; 0x78
 800b308:	4828      	ldr	r0, [pc, #160]	; (800b3ac <_printf_i+0x248>)
 800b30a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b30e:	e7e3      	b.n	800b2d8 <_printf_i+0x174>
 800b310:	0659      	lsls	r1, r3, #25
 800b312:	bf48      	it	mi
 800b314:	b2b6      	uxthmi	r6, r6
 800b316:	e7e6      	b.n	800b2e6 <_printf_i+0x182>
 800b318:	4615      	mov	r5, r2
 800b31a:	e7bb      	b.n	800b294 <_printf_i+0x130>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	6826      	ldr	r6, [r4, #0]
 800b320:	6961      	ldr	r1, [r4, #20]
 800b322:	1d18      	adds	r0, r3, #4
 800b324:	6028      	str	r0, [r5, #0]
 800b326:	0635      	lsls	r5, r6, #24
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	d501      	bpl.n	800b330 <_printf_i+0x1cc>
 800b32c:	6019      	str	r1, [r3, #0]
 800b32e:	e002      	b.n	800b336 <_printf_i+0x1d2>
 800b330:	0670      	lsls	r0, r6, #25
 800b332:	d5fb      	bpl.n	800b32c <_printf_i+0x1c8>
 800b334:	8019      	strh	r1, [r3, #0]
 800b336:	2300      	movs	r3, #0
 800b338:	6123      	str	r3, [r4, #16]
 800b33a:	4615      	mov	r5, r2
 800b33c:	e7ba      	b.n	800b2b4 <_printf_i+0x150>
 800b33e:	682b      	ldr	r3, [r5, #0]
 800b340:	1d1a      	adds	r2, r3, #4
 800b342:	602a      	str	r2, [r5, #0]
 800b344:	681d      	ldr	r5, [r3, #0]
 800b346:	6862      	ldr	r2, [r4, #4]
 800b348:	2100      	movs	r1, #0
 800b34a:	4628      	mov	r0, r5
 800b34c:	f7f4 ff48 	bl	80001e0 <memchr>
 800b350:	b108      	cbz	r0, 800b356 <_printf_i+0x1f2>
 800b352:	1b40      	subs	r0, r0, r5
 800b354:	6060      	str	r0, [r4, #4]
 800b356:	6863      	ldr	r3, [r4, #4]
 800b358:	6123      	str	r3, [r4, #16]
 800b35a:	2300      	movs	r3, #0
 800b35c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b360:	e7a8      	b.n	800b2b4 <_printf_i+0x150>
 800b362:	6923      	ldr	r3, [r4, #16]
 800b364:	462a      	mov	r2, r5
 800b366:	4649      	mov	r1, r9
 800b368:	4640      	mov	r0, r8
 800b36a:	47d0      	blx	sl
 800b36c:	3001      	adds	r0, #1
 800b36e:	d0ab      	beq.n	800b2c8 <_printf_i+0x164>
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	079b      	lsls	r3, r3, #30
 800b374:	d413      	bmi.n	800b39e <_printf_i+0x23a>
 800b376:	68e0      	ldr	r0, [r4, #12]
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	4298      	cmp	r0, r3
 800b37c:	bfb8      	it	lt
 800b37e:	4618      	movlt	r0, r3
 800b380:	e7a4      	b.n	800b2cc <_printf_i+0x168>
 800b382:	2301      	movs	r3, #1
 800b384:	4632      	mov	r2, r6
 800b386:	4649      	mov	r1, r9
 800b388:	4640      	mov	r0, r8
 800b38a:	47d0      	blx	sl
 800b38c:	3001      	adds	r0, #1
 800b38e:	d09b      	beq.n	800b2c8 <_printf_i+0x164>
 800b390:	3501      	adds	r5, #1
 800b392:	68e3      	ldr	r3, [r4, #12]
 800b394:	9903      	ldr	r1, [sp, #12]
 800b396:	1a5b      	subs	r3, r3, r1
 800b398:	42ab      	cmp	r3, r5
 800b39a:	dcf2      	bgt.n	800b382 <_printf_i+0x21e>
 800b39c:	e7eb      	b.n	800b376 <_printf_i+0x212>
 800b39e:	2500      	movs	r5, #0
 800b3a0:	f104 0619 	add.w	r6, r4, #25
 800b3a4:	e7f5      	b.n	800b392 <_printf_i+0x22e>
 800b3a6:	bf00      	nop
 800b3a8:	08019b06 	.word	0x08019b06
 800b3ac:	08019b17 	.word	0x08019b17

0800b3b0 <iprintf>:
 800b3b0:	b40f      	push	{r0, r1, r2, r3}
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <iprintf+0x2c>)
 800b3b4:	b513      	push	{r0, r1, r4, lr}
 800b3b6:	681c      	ldr	r4, [r3, #0]
 800b3b8:	b124      	cbz	r4, 800b3c4 <iprintf+0x14>
 800b3ba:	69a3      	ldr	r3, [r4, #24]
 800b3bc:	b913      	cbnz	r3, 800b3c4 <iprintf+0x14>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 ff20 	bl	800c204 <__sinit>
 800b3c4:	ab05      	add	r3, sp, #20
 800b3c6:	9a04      	ldr	r2, [sp, #16]
 800b3c8:	68a1      	ldr	r1, [r4, #8]
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f001 fd19 	bl	800ce04 <_vfiprintf_r>
 800b3d2:	b002      	add	sp, #8
 800b3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d8:	b004      	add	sp, #16
 800b3da:	4770      	bx	lr
 800b3dc:	20000874 	.word	0x20000874

0800b3e0 <_sbrk_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4d06      	ldr	r5, [pc, #24]	; (800b3fc <_sbrk_r+0x1c>)
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	4608      	mov	r0, r1
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	f7f8 fc7a 	bl	8003ce4 <_sbrk>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d102      	bne.n	800b3fa <_sbrk_r+0x1a>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	b103      	cbz	r3, 800b3fa <_sbrk_r+0x1a>
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	20004050 	.word	0x20004050

0800b400 <siprintf>:
 800b400:	b40e      	push	{r1, r2, r3}
 800b402:	b500      	push	{lr}
 800b404:	b09c      	sub	sp, #112	; 0x70
 800b406:	ab1d      	add	r3, sp, #116	; 0x74
 800b408:	9002      	str	r0, [sp, #8]
 800b40a:	9006      	str	r0, [sp, #24]
 800b40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b410:	4809      	ldr	r0, [pc, #36]	; (800b438 <siprintf+0x38>)
 800b412:	9107      	str	r1, [sp, #28]
 800b414:	9104      	str	r1, [sp, #16]
 800b416:	4909      	ldr	r1, [pc, #36]	; (800b43c <siprintf+0x3c>)
 800b418:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41c:	9105      	str	r1, [sp, #20]
 800b41e:	6800      	ldr	r0, [r0, #0]
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	a902      	add	r1, sp, #8
 800b424:	f001 fbc4 	bl	800cbb0 <_svfiprintf_r>
 800b428:	9b02      	ldr	r3, [sp, #8]
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	b01c      	add	sp, #112	; 0x70
 800b430:	f85d eb04 	ldr.w	lr, [sp], #4
 800b434:	b003      	add	sp, #12
 800b436:	4770      	bx	lr
 800b438:	20000874 	.word	0x20000874
 800b43c:	ffff0208 	.word	0xffff0208

0800b440 <strcat>:
 800b440:	b510      	push	{r4, lr}
 800b442:	4602      	mov	r2, r0
 800b444:	7814      	ldrb	r4, [r2, #0]
 800b446:	4613      	mov	r3, r2
 800b448:	3201      	adds	r2, #1
 800b44a:	2c00      	cmp	r4, #0
 800b44c:	d1fa      	bne.n	800b444 <strcat+0x4>
 800b44e:	3b01      	subs	r3, #1
 800b450:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b454:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b458:	2a00      	cmp	r2, #0
 800b45a:	d1f9      	bne.n	800b450 <strcat+0x10>
 800b45c:	bd10      	pop	{r4, pc}

0800b45e <quorem>:
 800b45e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b462:	6903      	ldr	r3, [r0, #16]
 800b464:	690c      	ldr	r4, [r1, #16]
 800b466:	42a3      	cmp	r3, r4
 800b468:	4607      	mov	r7, r0
 800b46a:	f2c0 8081 	blt.w	800b570 <quorem+0x112>
 800b46e:	3c01      	subs	r4, #1
 800b470:	f101 0814 	add.w	r8, r1, #20
 800b474:	f100 0514 	add.w	r5, r0, #20
 800b478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b486:	3301      	adds	r3, #1
 800b488:	429a      	cmp	r2, r3
 800b48a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b48e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b492:	fbb2 f6f3 	udiv	r6, r2, r3
 800b496:	d331      	bcc.n	800b4fc <quorem+0x9e>
 800b498:	f04f 0e00 	mov.w	lr, #0
 800b49c:	4640      	mov	r0, r8
 800b49e:	46ac      	mov	ip, r5
 800b4a0:	46f2      	mov	sl, lr
 800b4a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4a6:	b293      	uxth	r3, r2
 800b4a8:	fb06 e303 	mla	r3, r6, r3, lr
 800b4ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	ebaa 0303 	sub.w	r3, sl, r3
 800b4b6:	f8dc a000 	ldr.w	sl, [ip]
 800b4ba:	0c12      	lsrs	r2, r2, #16
 800b4bc:	fa13 f38a 	uxtah	r3, r3, sl
 800b4c0:	fb06 e202 	mla	r2, r6, r2, lr
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	9b00      	ldr	r3, [sp, #0]
 800b4c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4cc:	b292      	uxth	r2, r2
 800b4ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4d6:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4da:	4581      	cmp	r9, r0
 800b4dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4e0:	f84c 3b04 	str.w	r3, [ip], #4
 800b4e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4e8:	d2db      	bcs.n	800b4a2 <quorem+0x44>
 800b4ea:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4ee:	b92b      	cbnz	r3, 800b4fc <quorem+0x9e>
 800b4f0:	9b01      	ldr	r3, [sp, #4]
 800b4f2:	3b04      	subs	r3, #4
 800b4f4:	429d      	cmp	r5, r3
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	d32e      	bcc.n	800b558 <quorem+0xfa>
 800b4fa:	613c      	str	r4, [r7, #16]
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	f001 f9b5 	bl	800c86c <__mcmp>
 800b502:	2800      	cmp	r0, #0
 800b504:	db24      	blt.n	800b550 <quorem+0xf2>
 800b506:	3601      	adds	r6, #1
 800b508:	4628      	mov	r0, r5
 800b50a:	f04f 0c00 	mov.w	ip, #0
 800b50e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b512:	f8d0 e000 	ldr.w	lr, [r0]
 800b516:	b293      	uxth	r3, r2
 800b518:	ebac 0303 	sub.w	r3, ip, r3
 800b51c:	0c12      	lsrs	r2, r2, #16
 800b51e:	fa13 f38e 	uxtah	r3, r3, lr
 800b522:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b526:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b530:	45c1      	cmp	r9, r8
 800b532:	f840 3b04 	str.w	r3, [r0], #4
 800b536:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b53a:	d2e8      	bcs.n	800b50e <quorem+0xb0>
 800b53c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b544:	b922      	cbnz	r2, 800b550 <quorem+0xf2>
 800b546:	3b04      	subs	r3, #4
 800b548:	429d      	cmp	r5, r3
 800b54a:	461a      	mov	r2, r3
 800b54c:	d30a      	bcc.n	800b564 <quorem+0x106>
 800b54e:	613c      	str	r4, [r7, #16]
 800b550:	4630      	mov	r0, r6
 800b552:	b003      	add	sp, #12
 800b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b558:	6812      	ldr	r2, [r2, #0]
 800b55a:	3b04      	subs	r3, #4
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	d1cc      	bne.n	800b4fa <quorem+0x9c>
 800b560:	3c01      	subs	r4, #1
 800b562:	e7c7      	b.n	800b4f4 <quorem+0x96>
 800b564:	6812      	ldr	r2, [r2, #0]
 800b566:	3b04      	subs	r3, #4
 800b568:	2a00      	cmp	r2, #0
 800b56a:	d1f0      	bne.n	800b54e <quorem+0xf0>
 800b56c:	3c01      	subs	r4, #1
 800b56e:	e7eb      	b.n	800b548 <quorem+0xea>
 800b570:	2000      	movs	r0, #0
 800b572:	e7ee      	b.n	800b552 <quorem+0xf4>
 800b574:	0000      	movs	r0, r0
	...

0800b578 <_dtoa_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	ed2d 8b04 	vpush	{d8-d9}
 800b580:	ec57 6b10 	vmov	r6, r7, d0
 800b584:	b093      	sub	sp, #76	; 0x4c
 800b586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b58c:	9106      	str	r1, [sp, #24]
 800b58e:	ee10 aa10 	vmov	sl, s0
 800b592:	4604      	mov	r4, r0
 800b594:	9209      	str	r2, [sp, #36]	; 0x24
 800b596:	930c      	str	r3, [sp, #48]	; 0x30
 800b598:	46bb      	mov	fp, r7
 800b59a:	b975      	cbnz	r5, 800b5ba <_dtoa_r+0x42>
 800b59c:	2010      	movs	r0, #16
 800b59e:	f7ff f99f 	bl	800a8e0 <malloc>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	6260      	str	r0, [r4, #36]	; 0x24
 800b5a6:	b920      	cbnz	r0, 800b5b2 <_dtoa_r+0x3a>
 800b5a8:	4ba7      	ldr	r3, [pc, #668]	; (800b848 <_dtoa_r+0x2d0>)
 800b5aa:	21ea      	movs	r1, #234	; 0xea
 800b5ac:	48a7      	ldr	r0, [pc, #668]	; (800b84c <_dtoa_r+0x2d4>)
 800b5ae:	f001 fe6f 	bl	800d290 <__assert_func>
 800b5b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5b6:	6005      	str	r5, [r0, #0]
 800b5b8:	60c5      	str	r5, [r0, #12]
 800b5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5bc:	6819      	ldr	r1, [r3, #0]
 800b5be:	b151      	cbz	r1, 800b5d6 <_dtoa_r+0x5e>
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	604a      	str	r2, [r1, #4]
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4093      	lsls	r3, r2
 800b5c8:	608b      	str	r3, [r1, #8]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 ff0c 	bl	800c3e8 <_Bfree>
 800b5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	1e3b      	subs	r3, r7, #0
 800b5d8:	bfaa      	itet	ge
 800b5da:	2300      	movge	r3, #0
 800b5dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b5e0:	f8c8 3000 	strge.w	r3, [r8]
 800b5e4:	4b9a      	ldr	r3, [pc, #616]	; (800b850 <_dtoa_r+0x2d8>)
 800b5e6:	bfbc      	itt	lt
 800b5e8:	2201      	movlt	r2, #1
 800b5ea:	f8c8 2000 	strlt.w	r2, [r8]
 800b5ee:	ea33 030b 	bics.w	r3, r3, fp
 800b5f2:	d11b      	bne.n	800b62c <_dtoa_r+0xb4>
 800b5f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b600:	4333      	orrs	r3, r6
 800b602:	f000 8592 	beq.w	800c12a <_dtoa_r+0xbb2>
 800b606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b608:	b963      	cbnz	r3, 800b624 <_dtoa_r+0xac>
 800b60a:	4b92      	ldr	r3, [pc, #584]	; (800b854 <_dtoa_r+0x2dc>)
 800b60c:	e022      	b.n	800b654 <_dtoa_r+0xdc>
 800b60e:	4b92      	ldr	r3, [pc, #584]	; (800b858 <_dtoa_r+0x2e0>)
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	3308      	adds	r3, #8
 800b614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	9801      	ldr	r0, [sp, #4]
 800b61a:	b013      	add	sp, #76	; 0x4c
 800b61c:	ecbd 8b04 	vpop	{d8-d9}
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	4b8b      	ldr	r3, [pc, #556]	; (800b854 <_dtoa_r+0x2dc>)
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	3303      	adds	r3, #3
 800b62a:	e7f3      	b.n	800b614 <_dtoa_r+0x9c>
 800b62c:	2200      	movs	r2, #0
 800b62e:	2300      	movs	r3, #0
 800b630:	4650      	mov	r0, sl
 800b632:	4659      	mov	r1, fp
 800b634:	f7f5 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 800b638:	ec4b ab19 	vmov	d9, sl, fp
 800b63c:	4680      	mov	r8, r0
 800b63e:	b158      	cbz	r0, 800b658 <_dtoa_r+0xe0>
 800b640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b642:	2301      	movs	r3, #1
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 856b 	beq.w	800c124 <_dtoa_r+0xbac>
 800b64e:	4883      	ldr	r0, [pc, #524]	; (800b85c <_dtoa_r+0x2e4>)
 800b650:	6018      	str	r0, [r3, #0]
 800b652:	1e43      	subs	r3, r0, #1
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	e7df      	b.n	800b618 <_dtoa_r+0xa0>
 800b658:	ec4b ab10 	vmov	d0, sl, fp
 800b65c:	aa10      	add	r2, sp, #64	; 0x40
 800b65e:	a911      	add	r1, sp, #68	; 0x44
 800b660:	4620      	mov	r0, r4
 800b662:	f001 f9a9 	bl	800c9b8 <__d2b>
 800b666:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b66a:	ee08 0a10 	vmov	s16, r0
 800b66e:	2d00      	cmp	r5, #0
 800b670:	f000 8084 	beq.w	800b77c <_dtoa_r+0x204>
 800b674:	ee19 3a90 	vmov	r3, s19
 800b678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b67c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b680:	4656      	mov	r6, sl
 800b682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b68a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b68e:	4b74      	ldr	r3, [pc, #464]	; (800b860 <_dtoa_r+0x2e8>)
 800b690:	2200      	movs	r2, #0
 800b692:	4630      	mov	r0, r6
 800b694:	4639      	mov	r1, r7
 800b696:	f7f4 fdf7 	bl	8000288 <__aeabi_dsub>
 800b69a:	a365      	add	r3, pc, #404	; (adr r3, 800b830 <_dtoa_r+0x2b8>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 ffaa 	bl	80005f8 <__aeabi_dmul>
 800b6a4:	a364      	add	r3, pc, #400	; (adr r3, 800b838 <_dtoa_r+0x2c0>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 fdef 	bl	800028c <__adddf3>
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	f7f4 ff36 	bl	8000524 <__aeabi_i2d>
 800b6b8:	a361      	add	r3, pc, #388	; (adr r3, 800b840 <_dtoa_r+0x2c8>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	f7f4 fddf 	bl	800028c <__adddf3>
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	f7f5 fa41 	bl	8000b58 <__aeabi_d2iz>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	9000      	str	r0, [sp, #0]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4630      	mov	r0, r6
 800b6de:	4639      	mov	r1, r7
 800b6e0:	f7f5 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800b6e4:	b150      	cbz	r0, 800b6fc <_dtoa_r+0x184>
 800b6e6:	9800      	ldr	r0, [sp, #0]
 800b6e8:	f7f4 ff1c 	bl	8000524 <__aeabi_i2d>
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	463b      	mov	r3, r7
 800b6f0:	f7f5 f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6f4:	b910      	cbnz	r0, 800b6fc <_dtoa_r+0x184>
 800b6f6:	9b00      	ldr	r3, [sp, #0]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	9b00      	ldr	r3, [sp, #0]
 800b6fe:	2b16      	cmp	r3, #22
 800b700:	d85a      	bhi.n	800b7b8 <_dtoa_r+0x240>
 800b702:	9a00      	ldr	r2, [sp, #0]
 800b704:	4b57      	ldr	r3, [pc, #348]	; (800b864 <_dtoa_r+0x2ec>)
 800b706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	ec51 0b19 	vmov	r0, r1, d9
 800b712:	f7f5 f9e3 	bl	8000adc <__aeabi_dcmplt>
 800b716:	2800      	cmp	r0, #0
 800b718:	d050      	beq.n	800b7bc <_dtoa_r+0x244>
 800b71a:	9b00      	ldr	r3, [sp, #0]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	2300      	movs	r3, #0
 800b722:	930b      	str	r3, [sp, #44]	; 0x2c
 800b724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b726:	1b5d      	subs	r5, r3, r5
 800b728:	1e6b      	subs	r3, r5, #1
 800b72a:	9305      	str	r3, [sp, #20]
 800b72c:	bf45      	ittet	mi
 800b72e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b732:	9304      	strmi	r3, [sp, #16]
 800b734:	2300      	movpl	r3, #0
 800b736:	2300      	movmi	r3, #0
 800b738:	bf4c      	ite	mi
 800b73a:	9305      	strmi	r3, [sp, #20]
 800b73c:	9304      	strpl	r3, [sp, #16]
 800b73e:	9b00      	ldr	r3, [sp, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	db3d      	blt.n	800b7c0 <_dtoa_r+0x248>
 800b744:	9b05      	ldr	r3, [sp, #20]
 800b746:	9a00      	ldr	r2, [sp, #0]
 800b748:	920a      	str	r2, [sp, #40]	; 0x28
 800b74a:	4413      	add	r3, r2
 800b74c:	9305      	str	r3, [sp, #20]
 800b74e:	2300      	movs	r3, #0
 800b750:	9307      	str	r3, [sp, #28]
 800b752:	9b06      	ldr	r3, [sp, #24]
 800b754:	2b09      	cmp	r3, #9
 800b756:	f200 8089 	bhi.w	800b86c <_dtoa_r+0x2f4>
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	bfc4      	itt	gt
 800b75e:	3b04      	subgt	r3, #4
 800b760:	9306      	strgt	r3, [sp, #24]
 800b762:	9b06      	ldr	r3, [sp, #24]
 800b764:	f1a3 0302 	sub.w	r3, r3, #2
 800b768:	bfcc      	ite	gt
 800b76a:	2500      	movgt	r5, #0
 800b76c:	2501      	movle	r5, #1
 800b76e:	2b03      	cmp	r3, #3
 800b770:	f200 8087 	bhi.w	800b882 <_dtoa_r+0x30a>
 800b774:	e8df f003 	tbb	[pc, r3]
 800b778:	59383a2d 	.word	0x59383a2d
 800b77c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b780:	441d      	add	r5, r3
 800b782:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b786:	2b20      	cmp	r3, #32
 800b788:	bfc1      	itttt	gt
 800b78a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b78e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b792:	fa0b f303 	lslgt.w	r3, fp, r3
 800b796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b79a:	bfda      	itte	le
 800b79c:	f1c3 0320 	rsble	r3, r3, #32
 800b7a0:	fa06 f003 	lslle.w	r0, r6, r3
 800b7a4:	4318      	orrgt	r0, r3
 800b7a6:	f7f4 fead 	bl	8000504 <__aeabi_ui2d>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b7b2:	3d01      	subs	r5, #1
 800b7b4:	930e      	str	r3, [sp, #56]	; 0x38
 800b7b6:	e76a      	b.n	800b68e <_dtoa_r+0x116>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e7b2      	b.n	800b722 <_dtoa_r+0x1aa>
 800b7bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7be:	e7b1      	b.n	800b724 <_dtoa_r+0x1ac>
 800b7c0:	9b04      	ldr	r3, [sp, #16]
 800b7c2:	9a00      	ldr	r2, [sp, #0]
 800b7c4:	1a9b      	subs	r3, r3, r2
 800b7c6:	9304      	str	r3, [sp, #16]
 800b7c8:	4253      	negs	r3, r2
 800b7ca:	9307      	str	r3, [sp, #28]
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d0:	e7bf      	b.n	800b752 <_dtoa_r+0x1da>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9308      	str	r3, [sp, #32]
 800b7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	dc55      	bgt.n	800b888 <_dtoa_r+0x310>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7e6:	e00c      	b.n	800b802 <_dtoa_r+0x28a>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e7f3      	b.n	800b7d4 <_dtoa_r+0x25c>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7f0:	9308      	str	r3, [sp, #32]
 800b7f2:	9b00      	ldr	r3, [sp, #0]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	9302      	str	r3, [sp, #8]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	bfb8      	it	lt
 800b800:	2301      	movlt	r3, #1
 800b802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b804:	2200      	movs	r2, #0
 800b806:	6042      	str	r2, [r0, #4]
 800b808:	2204      	movs	r2, #4
 800b80a:	f102 0614 	add.w	r6, r2, #20
 800b80e:	429e      	cmp	r6, r3
 800b810:	6841      	ldr	r1, [r0, #4]
 800b812:	d93d      	bls.n	800b890 <_dtoa_r+0x318>
 800b814:	4620      	mov	r0, r4
 800b816:	f000 fda7 	bl	800c368 <_Balloc>
 800b81a:	9001      	str	r0, [sp, #4]
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d13b      	bne.n	800b898 <_dtoa_r+0x320>
 800b820:	4b11      	ldr	r3, [pc, #68]	; (800b868 <_dtoa_r+0x2f0>)
 800b822:	4602      	mov	r2, r0
 800b824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b828:	e6c0      	b.n	800b5ac <_dtoa_r+0x34>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e7df      	b.n	800b7ee <_dtoa_r+0x276>
 800b82e:	bf00      	nop
 800b830:	636f4361 	.word	0x636f4361
 800b834:	3fd287a7 	.word	0x3fd287a7
 800b838:	8b60c8b3 	.word	0x8b60c8b3
 800b83c:	3fc68a28 	.word	0x3fc68a28
 800b840:	509f79fb 	.word	0x509f79fb
 800b844:	3fd34413 	.word	0x3fd34413
 800b848:	08019b35 	.word	0x08019b35
 800b84c:	08019b4c 	.word	0x08019b4c
 800b850:	7ff00000 	.word	0x7ff00000
 800b854:	08019b31 	.word	0x08019b31
 800b858:	08019b28 	.word	0x08019b28
 800b85c:	08019b05 	.word	0x08019b05
 800b860:	3ff80000 	.word	0x3ff80000
 800b864:	08019ca0 	.word	0x08019ca0
 800b868:	08019ba7 	.word	0x08019ba7
 800b86c:	2501      	movs	r5, #1
 800b86e:	2300      	movs	r3, #0
 800b870:	9306      	str	r3, [sp, #24]
 800b872:	9508      	str	r5, [sp, #32]
 800b874:	f04f 33ff 	mov.w	r3, #4294967295
 800b878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b87c:	2200      	movs	r2, #0
 800b87e:	2312      	movs	r3, #18
 800b880:	e7b0      	b.n	800b7e4 <_dtoa_r+0x26c>
 800b882:	2301      	movs	r3, #1
 800b884:	9308      	str	r3, [sp, #32]
 800b886:	e7f5      	b.n	800b874 <_dtoa_r+0x2fc>
 800b888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b88e:	e7b8      	b.n	800b802 <_dtoa_r+0x28a>
 800b890:	3101      	adds	r1, #1
 800b892:	6041      	str	r1, [r0, #4]
 800b894:	0052      	lsls	r2, r2, #1
 800b896:	e7b8      	b.n	800b80a <_dtoa_r+0x292>
 800b898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89a:	9a01      	ldr	r2, [sp, #4]
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	2b0e      	cmp	r3, #14
 800b8a2:	f200 809d 	bhi.w	800b9e0 <_dtoa_r+0x468>
 800b8a6:	2d00      	cmp	r5, #0
 800b8a8:	f000 809a 	beq.w	800b9e0 <_dtoa_r+0x468>
 800b8ac:	9b00      	ldr	r3, [sp, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dd32      	ble.n	800b918 <_dtoa_r+0x3a0>
 800b8b2:	4ab7      	ldr	r2, [pc, #732]	; (800bb90 <_dtoa_r+0x618>)
 800b8b4:	f003 030f 	and.w	r3, r3, #15
 800b8b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8c0:	9b00      	ldr	r3, [sp, #0]
 800b8c2:	05d8      	lsls	r0, r3, #23
 800b8c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b8c8:	d516      	bpl.n	800b8f8 <_dtoa_r+0x380>
 800b8ca:	4bb2      	ldr	r3, [pc, #712]	; (800bb94 <_dtoa_r+0x61c>)
 800b8cc:	ec51 0b19 	vmov	r0, r1, d9
 800b8d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8d4:	f7f4 ffba 	bl	800084c <__aeabi_ddiv>
 800b8d8:	f007 070f 	and.w	r7, r7, #15
 800b8dc:	4682      	mov	sl, r0
 800b8de:	468b      	mov	fp, r1
 800b8e0:	2503      	movs	r5, #3
 800b8e2:	4eac      	ldr	r6, [pc, #688]	; (800bb94 <_dtoa_r+0x61c>)
 800b8e4:	b957      	cbnz	r7, 800b8fc <_dtoa_r+0x384>
 800b8e6:	4642      	mov	r2, r8
 800b8e8:	464b      	mov	r3, r9
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	4659      	mov	r1, fp
 800b8ee:	f7f4 ffad 	bl	800084c <__aeabi_ddiv>
 800b8f2:	4682      	mov	sl, r0
 800b8f4:	468b      	mov	fp, r1
 800b8f6:	e028      	b.n	800b94a <_dtoa_r+0x3d2>
 800b8f8:	2502      	movs	r5, #2
 800b8fa:	e7f2      	b.n	800b8e2 <_dtoa_r+0x36a>
 800b8fc:	07f9      	lsls	r1, r7, #31
 800b8fe:	d508      	bpl.n	800b912 <_dtoa_r+0x39a>
 800b900:	4640      	mov	r0, r8
 800b902:	4649      	mov	r1, r9
 800b904:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b908:	f7f4 fe76 	bl	80005f8 <__aeabi_dmul>
 800b90c:	3501      	adds	r5, #1
 800b90e:	4680      	mov	r8, r0
 800b910:	4689      	mov	r9, r1
 800b912:	107f      	asrs	r7, r7, #1
 800b914:	3608      	adds	r6, #8
 800b916:	e7e5      	b.n	800b8e4 <_dtoa_r+0x36c>
 800b918:	f000 809b 	beq.w	800ba52 <_dtoa_r+0x4da>
 800b91c:	9b00      	ldr	r3, [sp, #0]
 800b91e:	4f9d      	ldr	r7, [pc, #628]	; (800bb94 <_dtoa_r+0x61c>)
 800b920:	425e      	negs	r6, r3
 800b922:	4b9b      	ldr	r3, [pc, #620]	; (800bb90 <_dtoa_r+0x618>)
 800b924:	f006 020f 	and.w	r2, r6, #15
 800b928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	ec51 0b19 	vmov	r0, r1, d9
 800b934:	f7f4 fe60 	bl	80005f8 <__aeabi_dmul>
 800b938:	1136      	asrs	r6, r6, #4
 800b93a:	4682      	mov	sl, r0
 800b93c:	468b      	mov	fp, r1
 800b93e:	2300      	movs	r3, #0
 800b940:	2502      	movs	r5, #2
 800b942:	2e00      	cmp	r6, #0
 800b944:	d17a      	bne.n	800ba3c <_dtoa_r+0x4c4>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1d3      	bne.n	800b8f2 <_dtoa_r+0x37a>
 800b94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 8082 	beq.w	800ba56 <_dtoa_r+0x4de>
 800b952:	4b91      	ldr	r3, [pc, #580]	; (800bb98 <_dtoa_r+0x620>)
 800b954:	2200      	movs	r2, #0
 800b956:	4650      	mov	r0, sl
 800b958:	4659      	mov	r1, fp
 800b95a:	f7f5 f8bf 	bl	8000adc <__aeabi_dcmplt>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d079      	beq.n	800ba56 <_dtoa_r+0x4de>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d076      	beq.n	800ba56 <_dtoa_r+0x4de>
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	dd36      	ble.n	800b9dc <_dtoa_r+0x464>
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	4650      	mov	r0, sl
 800b972:	4659      	mov	r1, fp
 800b974:	1e5f      	subs	r7, r3, #1
 800b976:	2200      	movs	r2, #0
 800b978:	4b88      	ldr	r3, [pc, #544]	; (800bb9c <_dtoa_r+0x624>)
 800b97a:	f7f4 fe3d 	bl	80005f8 <__aeabi_dmul>
 800b97e:	9e02      	ldr	r6, [sp, #8]
 800b980:	4682      	mov	sl, r0
 800b982:	468b      	mov	fp, r1
 800b984:	3501      	adds	r5, #1
 800b986:	4628      	mov	r0, r5
 800b988:	f7f4 fdcc 	bl	8000524 <__aeabi_i2d>
 800b98c:	4652      	mov	r2, sl
 800b98e:	465b      	mov	r3, fp
 800b990:	f7f4 fe32 	bl	80005f8 <__aeabi_dmul>
 800b994:	4b82      	ldr	r3, [pc, #520]	; (800bba0 <_dtoa_r+0x628>)
 800b996:	2200      	movs	r2, #0
 800b998:	f7f4 fc78 	bl	800028c <__adddf3>
 800b99c:	46d0      	mov	r8, sl
 800b99e:	46d9      	mov	r9, fp
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	d158      	bne.n	800ba5c <_dtoa_r+0x4e4>
 800b9aa:	4b7e      	ldr	r3, [pc, #504]	; (800bba4 <_dtoa_r+0x62c>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	f7f4 fc69 	bl	8000288 <__aeabi_dsub>
 800b9b6:	4652      	mov	r2, sl
 800b9b8:	465b      	mov	r3, fp
 800b9ba:	4680      	mov	r8, r0
 800b9bc:	4689      	mov	r9, r1
 800b9be:	f7f5 f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	f040 8295 	bne.w	800bef2 <_dtoa_r+0x97a>
 800b9c8:	4652      	mov	r2, sl
 800b9ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	f7f5 f883 	bl	8000adc <__aeabi_dcmplt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f040 8289 	bne.w	800beee <_dtoa_r+0x976>
 800b9dc:	ec5b ab19 	vmov	sl, fp, d9
 800b9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f2c0 8148 	blt.w	800bc78 <_dtoa_r+0x700>
 800b9e8:	9a00      	ldr	r2, [sp, #0]
 800b9ea:	2a0e      	cmp	r2, #14
 800b9ec:	f300 8144 	bgt.w	800bc78 <_dtoa_r+0x700>
 800b9f0:	4b67      	ldr	r3, [pc, #412]	; (800bb90 <_dtoa_r+0x618>)
 800b9f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f280 80d5 	bge.w	800bbac <_dtoa_r+0x634>
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f300 80d1 	bgt.w	800bbac <_dtoa_r+0x634>
 800ba0a:	f040 826f 	bne.w	800beec <_dtoa_r+0x974>
 800ba0e:	4b65      	ldr	r3, [pc, #404]	; (800bba4 <_dtoa_r+0x62c>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	4640      	mov	r0, r8
 800ba14:	4649      	mov	r1, r9
 800ba16:	f7f4 fdef 	bl	80005f8 <__aeabi_dmul>
 800ba1a:	4652      	mov	r2, sl
 800ba1c:	465b      	mov	r3, fp
 800ba1e:	f7f5 f871 	bl	8000b04 <__aeabi_dcmpge>
 800ba22:	9e03      	ldr	r6, [sp, #12]
 800ba24:	4637      	mov	r7, r6
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f040 8245 	bne.w	800beb6 <_dtoa_r+0x93e>
 800ba2c:	9d01      	ldr	r5, [sp, #4]
 800ba2e:	2331      	movs	r3, #49	; 0x31
 800ba30:	f805 3b01 	strb.w	r3, [r5], #1
 800ba34:	9b00      	ldr	r3, [sp, #0]
 800ba36:	3301      	adds	r3, #1
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	e240      	b.n	800bebe <_dtoa_r+0x946>
 800ba3c:	07f2      	lsls	r2, r6, #31
 800ba3e:	d505      	bpl.n	800ba4c <_dtoa_r+0x4d4>
 800ba40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	3501      	adds	r5, #1
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	1076      	asrs	r6, r6, #1
 800ba4e:	3708      	adds	r7, #8
 800ba50:	e777      	b.n	800b942 <_dtoa_r+0x3ca>
 800ba52:	2502      	movs	r5, #2
 800ba54:	e779      	b.n	800b94a <_dtoa_r+0x3d2>
 800ba56:	9f00      	ldr	r7, [sp, #0]
 800ba58:	9e03      	ldr	r6, [sp, #12]
 800ba5a:	e794      	b.n	800b986 <_dtoa_r+0x40e>
 800ba5c:	9901      	ldr	r1, [sp, #4]
 800ba5e:	4b4c      	ldr	r3, [pc, #304]	; (800bb90 <_dtoa_r+0x618>)
 800ba60:	4431      	add	r1, r6
 800ba62:	910d      	str	r1, [sp, #52]	; 0x34
 800ba64:	9908      	ldr	r1, [sp, #32]
 800ba66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba6e:	2900      	cmp	r1, #0
 800ba70:	d043      	beq.n	800bafa <_dtoa_r+0x582>
 800ba72:	494d      	ldr	r1, [pc, #308]	; (800bba8 <_dtoa_r+0x630>)
 800ba74:	2000      	movs	r0, #0
 800ba76:	f7f4 fee9 	bl	800084c <__aeabi_ddiv>
 800ba7a:	4652      	mov	r2, sl
 800ba7c:	465b      	mov	r3, fp
 800ba7e:	f7f4 fc03 	bl	8000288 <__aeabi_dsub>
 800ba82:	9d01      	ldr	r5, [sp, #4]
 800ba84:	4682      	mov	sl, r0
 800ba86:	468b      	mov	fp, r1
 800ba88:	4649      	mov	r1, r9
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	f7f5 f864 	bl	8000b58 <__aeabi_d2iz>
 800ba90:	4606      	mov	r6, r0
 800ba92:	f7f4 fd47 	bl	8000524 <__aeabi_i2d>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	f7f4 fbf3 	bl	8000288 <__aeabi_dsub>
 800baa2:	3630      	adds	r6, #48	; 0x30
 800baa4:	f805 6b01 	strb.w	r6, [r5], #1
 800baa8:	4652      	mov	r2, sl
 800baaa:	465b      	mov	r3, fp
 800baac:	4680      	mov	r8, r0
 800baae:	4689      	mov	r9, r1
 800bab0:	f7f5 f814 	bl	8000adc <__aeabi_dcmplt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d163      	bne.n	800bb80 <_dtoa_r+0x608>
 800bab8:	4642      	mov	r2, r8
 800baba:	464b      	mov	r3, r9
 800babc:	4936      	ldr	r1, [pc, #216]	; (800bb98 <_dtoa_r+0x620>)
 800babe:	2000      	movs	r0, #0
 800bac0:	f7f4 fbe2 	bl	8000288 <__aeabi_dsub>
 800bac4:	4652      	mov	r2, sl
 800bac6:	465b      	mov	r3, fp
 800bac8:	f7f5 f808 	bl	8000adc <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f040 80b5 	bne.w	800bc3c <_dtoa_r+0x6c4>
 800bad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad4:	429d      	cmp	r5, r3
 800bad6:	d081      	beq.n	800b9dc <_dtoa_r+0x464>
 800bad8:	4b30      	ldr	r3, [pc, #192]	; (800bb9c <_dtoa_r+0x624>)
 800bada:	2200      	movs	r2, #0
 800badc:	4650      	mov	r0, sl
 800bade:	4659      	mov	r1, fp
 800bae0:	f7f4 fd8a 	bl	80005f8 <__aeabi_dmul>
 800bae4:	4b2d      	ldr	r3, [pc, #180]	; (800bb9c <_dtoa_r+0x624>)
 800bae6:	4682      	mov	sl, r0
 800bae8:	468b      	mov	fp, r1
 800baea:	4640      	mov	r0, r8
 800baec:	4649      	mov	r1, r9
 800baee:	2200      	movs	r2, #0
 800baf0:	f7f4 fd82 	bl	80005f8 <__aeabi_dmul>
 800baf4:	4680      	mov	r8, r0
 800baf6:	4689      	mov	r9, r1
 800baf8:	e7c6      	b.n	800ba88 <_dtoa_r+0x510>
 800bafa:	4650      	mov	r0, sl
 800bafc:	4659      	mov	r1, fp
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb04:	9d01      	ldr	r5, [sp, #4]
 800bb06:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb08:	4682      	mov	sl, r0
 800bb0a:	468b      	mov	fp, r1
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	4640      	mov	r0, r8
 800bb10:	f7f5 f822 	bl	8000b58 <__aeabi_d2iz>
 800bb14:	4606      	mov	r6, r0
 800bb16:	f7f4 fd05 	bl	8000524 <__aeabi_i2d>
 800bb1a:	3630      	adds	r6, #48	; 0x30
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4640      	mov	r0, r8
 800bb22:	4649      	mov	r1, r9
 800bb24:	f7f4 fbb0 	bl	8000288 <__aeabi_dsub>
 800bb28:	f805 6b01 	strb.w	r6, [r5], #1
 800bb2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb2e:	429d      	cmp	r5, r3
 800bb30:	4680      	mov	r8, r0
 800bb32:	4689      	mov	r9, r1
 800bb34:	f04f 0200 	mov.w	r2, #0
 800bb38:	d124      	bne.n	800bb84 <_dtoa_r+0x60c>
 800bb3a:	4b1b      	ldr	r3, [pc, #108]	; (800bba8 <_dtoa_r+0x630>)
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	4659      	mov	r1, fp
 800bb40:	f7f4 fba4 	bl	800028c <__adddf3>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4640      	mov	r0, r8
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	f7f4 ffe4 	bl	8000b18 <__aeabi_dcmpgt>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d173      	bne.n	800bc3c <_dtoa_r+0x6c4>
 800bb54:	4652      	mov	r2, sl
 800bb56:	465b      	mov	r3, fp
 800bb58:	4913      	ldr	r1, [pc, #76]	; (800bba8 <_dtoa_r+0x630>)
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	f7f4 fb94 	bl	8000288 <__aeabi_dsub>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4640      	mov	r0, r8
 800bb66:	4649      	mov	r1, r9
 800bb68:	f7f4 ffb8 	bl	8000adc <__aeabi_dcmplt>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	f43f af35 	beq.w	800b9dc <_dtoa_r+0x464>
 800bb72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb74:	1e6b      	subs	r3, r5, #1
 800bb76:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb7c:	2b30      	cmp	r3, #48	; 0x30
 800bb7e:	d0f8      	beq.n	800bb72 <_dtoa_r+0x5fa>
 800bb80:	9700      	str	r7, [sp, #0]
 800bb82:	e049      	b.n	800bc18 <_dtoa_r+0x6a0>
 800bb84:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <_dtoa_r+0x624>)
 800bb86:	f7f4 fd37 	bl	80005f8 <__aeabi_dmul>
 800bb8a:	4680      	mov	r8, r0
 800bb8c:	4689      	mov	r9, r1
 800bb8e:	e7bd      	b.n	800bb0c <_dtoa_r+0x594>
 800bb90:	08019ca0 	.word	0x08019ca0
 800bb94:	08019c78 	.word	0x08019c78
 800bb98:	3ff00000 	.word	0x3ff00000
 800bb9c:	40240000 	.word	0x40240000
 800bba0:	401c0000 	.word	0x401c0000
 800bba4:	40140000 	.word	0x40140000
 800bba8:	3fe00000 	.word	0x3fe00000
 800bbac:	9d01      	ldr	r5, [sp, #4]
 800bbae:	4656      	mov	r6, sl
 800bbb0:	465f      	mov	r7, fp
 800bbb2:	4642      	mov	r2, r8
 800bbb4:	464b      	mov	r3, r9
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	4639      	mov	r1, r7
 800bbba:	f7f4 fe47 	bl	800084c <__aeabi_ddiv>
 800bbbe:	f7f4 ffcb 	bl	8000b58 <__aeabi_d2iz>
 800bbc2:	4682      	mov	sl, r0
 800bbc4:	f7f4 fcae 	bl	8000524 <__aeabi_i2d>
 800bbc8:	4642      	mov	r2, r8
 800bbca:	464b      	mov	r3, r9
 800bbcc:	f7f4 fd14 	bl	80005f8 <__aeabi_dmul>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bbdc:	f7f4 fb54 	bl	8000288 <__aeabi_dsub>
 800bbe0:	f805 6b01 	strb.w	r6, [r5], #1
 800bbe4:	9e01      	ldr	r6, [sp, #4]
 800bbe6:	9f03      	ldr	r7, [sp, #12]
 800bbe8:	1bae      	subs	r6, r5, r6
 800bbea:	42b7      	cmp	r7, r6
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	d135      	bne.n	800bc5e <_dtoa_r+0x6e6>
 800bbf2:	f7f4 fb4b 	bl	800028c <__adddf3>
 800bbf6:	4642      	mov	r2, r8
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	f7f4 ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 800bc02:	b9d0      	cbnz	r0, 800bc3a <_dtoa_r+0x6c2>
 800bc04:	4642      	mov	r2, r8
 800bc06:	464b      	mov	r3, r9
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc10:	b110      	cbz	r0, 800bc18 <_dtoa_r+0x6a0>
 800bc12:	f01a 0f01 	tst.w	sl, #1
 800bc16:	d110      	bne.n	800bc3a <_dtoa_r+0x6c2>
 800bc18:	4620      	mov	r0, r4
 800bc1a:	ee18 1a10 	vmov	r1, s16
 800bc1e:	f000 fbe3 	bl	800c3e8 <_Bfree>
 800bc22:	2300      	movs	r3, #0
 800bc24:	9800      	ldr	r0, [sp, #0]
 800bc26:	702b      	strb	r3, [r5, #0]
 800bc28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	6018      	str	r0, [r3, #0]
 800bc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f43f acf1 	beq.w	800b618 <_dtoa_r+0xa0>
 800bc36:	601d      	str	r5, [r3, #0]
 800bc38:	e4ee      	b.n	800b618 <_dtoa_r+0xa0>
 800bc3a:	9f00      	ldr	r7, [sp, #0]
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	461d      	mov	r5, r3
 800bc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc44:	2a39      	cmp	r2, #57	; 0x39
 800bc46:	d106      	bne.n	800bc56 <_dtoa_r+0x6de>
 800bc48:	9a01      	ldr	r2, [sp, #4]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d1f7      	bne.n	800bc3e <_dtoa_r+0x6c6>
 800bc4e:	9901      	ldr	r1, [sp, #4]
 800bc50:	2230      	movs	r2, #48	; 0x30
 800bc52:	3701      	adds	r7, #1
 800bc54:	700a      	strb	r2, [r1, #0]
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	3201      	adds	r2, #1
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	e790      	b.n	800bb80 <_dtoa_r+0x608>
 800bc5e:	4ba6      	ldr	r3, [pc, #664]	; (800bef8 <_dtoa_r+0x980>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	f7f4 fcc9 	bl	80005f8 <__aeabi_dmul>
 800bc66:	2200      	movs	r2, #0
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4606      	mov	r6, r0
 800bc6c:	460f      	mov	r7, r1
 800bc6e:	f7f4 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d09d      	beq.n	800bbb2 <_dtoa_r+0x63a>
 800bc76:	e7cf      	b.n	800bc18 <_dtoa_r+0x6a0>
 800bc78:	9a08      	ldr	r2, [sp, #32]
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	f000 80d7 	beq.w	800be2e <_dtoa_r+0x8b6>
 800bc80:	9a06      	ldr	r2, [sp, #24]
 800bc82:	2a01      	cmp	r2, #1
 800bc84:	f300 80ba 	bgt.w	800bdfc <_dtoa_r+0x884>
 800bc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc8a:	2a00      	cmp	r2, #0
 800bc8c:	f000 80b2 	beq.w	800bdf4 <_dtoa_r+0x87c>
 800bc90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc94:	9e07      	ldr	r6, [sp, #28]
 800bc96:	9d04      	ldr	r5, [sp, #16]
 800bc98:	9a04      	ldr	r2, [sp, #16]
 800bc9a:	441a      	add	r2, r3
 800bc9c:	9204      	str	r2, [sp, #16]
 800bc9e:	9a05      	ldr	r2, [sp, #20]
 800bca0:	2101      	movs	r1, #1
 800bca2:	441a      	add	r2, r3
 800bca4:	4620      	mov	r0, r4
 800bca6:	9205      	str	r2, [sp, #20]
 800bca8:	f000 fc56 	bl	800c558 <__i2b>
 800bcac:	4607      	mov	r7, r0
 800bcae:	2d00      	cmp	r5, #0
 800bcb0:	dd0c      	ble.n	800bccc <_dtoa_r+0x754>
 800bcb2:	9b05      	ldr	r3, [sp, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dd09      	ble.n	800bccc <_dtoa_r+0x754>
 800bcb8:	42ab      	cmp	r3, r5
 800bcba:	9a04      	ldr	r2, [sp, #16]
 800bcbc:	bfa8      	it	ge
 800bcbe:	462b      	movge	r3, r5
 800bcc0:	1ad2      	subs	r2, r2, r3
 800bcc2:	9204      	str	r2, [sp, #16]
 800bcc4:	9a05      	ldr	r2, [sp, #20]
 800bcc6:	1aed      	subs	r5, r5, r3
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	9305      	str	r3, [sp, #20]
 800bccc:	9b07      	ldr	r3, [sp, #28]
 800bcce:	b31b      	cbz	r3, 800bd18 <_dtoa_r+0x7a0>
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80af 	beq.w	800be36 <_dtoa_r+0x8be>
 800bcd8:	2e00      	cmp	r6, #0
 800bcda:	dd13      	ble.n	800bd04 <_dtoa_r+0x78c>
 800bcdc:	4639      	mov	r1, r7
 800bcde:	4632      	mov	r2, r6
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 fcf9 	bl	800c6d8 <__pow5mult>
 800bce6:	ee18 2a10 	vmov	r2, s16
 800bcea:	4601      	mov	r1, r0
 800bcec:	4607      	mov	r7, r0
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 fc48 	bl	800c584 <__multiply>
 800bcf4:	ee18 1a10 	vmov	r1, s16
 800bcf8:	4680      	mov	r8, r0
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 fb74 	bl	800c3e8 <_Bfree>
 800bd00:	ee08 8a10 	vmov	s16, r8
 800bd04:	9b07      	ldr	r3, [sp, #28]
 800bd06:	1b9a      	subs	r2, r3, r6
 800bd08:	d006      	beq.n	800bd18 <_dtoa_r+0x7a0>
 800bd0a:	ee18 1a10 	vmov	r1, s16
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 fce2 	bl	800c6d8 <__pow5mult>
 800bd14:	ee08 0a10 	vmov	s16, r0
 800bd18:	2101      	movs	r1, #1
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 fc1c 	bl	800c558 <__i2b>
 800bd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	4606      	mov	r6, r0
 800bd26:	f340 8088 	ble.w	800be3a <_dtoa_r+0x8c2>
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 fcd2 	bl	800c6d8 <__pow5mult>
 800bd34:	9b06      	ldr	r3, [sp, #24]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	4606      	mov	r6, r0
 800bd3a:	f340 8081 	ble.w	800be40 <_dtoa_r+0x8c8>
 800bd3e:	f04f 0800 	mov.w	r8, #0
 800bd42:	6933      	ldr	r3, [r6, #16]
 800bd44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd48:	6918      	ldr	r0, [r3, #16]
 800bd4a:	f000 fbb5 	bl	800c4b8 <__hi0bits>
 800bd4e:	f1c0 0020 	rsb	r0, r0, #32
 800bd52:	9b05      	ldr	r3, [sp, #20]
 800bd54:	4418      	add	r0, r3
 800bd56:	f010 001f 	ands.w	r0, r0, #31
 800bd5a:	f000 8092 	beq.w	800be82 <_dtoa_r+0x90a>
 800bd5e:	f1c0 0320 	rsb	r3, r0, #32
 800bd62:	2b04      	cmp	r3, #4
 800bd64:	f340 808a 	ble.w	800be7c <_dtoa_r+0x904>
 800bd68:	f1c0 001c 	rsb	r0, r0, #28
 800bd6c:	9b04      	ldr	r3, [sp, #16]
 800bd6e:	4403      	add	r3, r0
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	9b05      	ldr	r3, [sp, #20]
 800bd74:	4403      	add	r3, r0
 800bd76:	4405      	add	r5, r0
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	9b04      	ldr	r3, [sp, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	dd07      	ble.n	800bd90 <_dtoa_r+0x818>
 800bd80:	ee18 1a10 	vmov	r1, s16
 800bd84:	461a      	mov	r2, r3
 800bd86:	4620      	mov	r0, r4
 800bd88:	f000 fd00 	bl	800c78c <__lshift>
 800bd8c:	ee08 0a10 	vmov	s16, r0
 800bd90:	9b05      	ldr	r3, [sp, #20]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dd05      	ble.n	800bda2 <_dtoa_r+0x82a>
 800bd96:	4631      	mov	r1, r6
 800bd98:	461a      	mov	r2, r3
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 fcf6 	bl	800c78c <__lshift>
 800bda0:	4606      	mov	r6, r0
 800bda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d06e      	beq.n	800be86 <_dtoa_r+0x90e>
 800bda8:	ee18 0a10 	vmov	r0, s16
 800bdac:	4631      	mov	r1, r6
 800bdae:	f000 fd5d 	bl	800c86c <__mcmp>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	da67      	bge.n	800be86 <_dtoa_r+0x90e>
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	ee18 1a10 	vmov	r1, s16
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	220a      	movs	r2, #10
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 fb31 	bl	800c42c <__multadd>
 800bdca:	9b08      	ldr	r3, [sp, #32]
 800bdcc:	ee08 0a10 	vmov	s16, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 81b1 	beq.w	800c138 <_dtoa_r+0xbc0>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4639      	mov	r1, r7
 800bdda:	220a      	movs	r2, #10
 800bddc:	4620      	mov	r0, r4
 800bdde:	f000 fb25 	bl	800c42c <__multadd>
 800bde2:	9b02      	ldr	r3, [sp, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	4607      	mov	r7, r0
 800bde8:	f300 808e 	bgt.w	800bf08 <_dtoa_r+0x990>
 800bdec:	9b06      	ldr	r3, [sp, #24]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	dc51      	bgt.n	800be96 <_dtoa_r+0x91e>
 800bdf2:	e089      	b.n	800bf08 <_dtoa_r+0x990>
 800bdf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdfa:	e74b      	b.n	800bc94 <_dtoa_r+0x71c>
 800bdfc:	9b03      	ldr	r3, [sp, #12]
 800bdfe:	1e5e      	subs	r6, r3, #1
 800be00:	9b07      	ldr	r3, [sp, #28]
 800be02:	42b3      	cmp	r3, r6
 800be04:	bfbf      	itttt	lt
 800be06:	9b07      	ldrlt	r3, [sp, #28]
 800be08:	9607      	strlt	r6, [sp, #28]
 800be0a:	1af2      	sublt	r2, r6, r3
 800be0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be0e:	bfb6      	itet	lt
 800be10:	189b      	addlt	r3, r3, r2
 800be12:	1b9e      	subge	r6, r3, r6
 800be14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	bfb8      	it	lt
 800be1a:	2600      	movlt	r6, #0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	bfb7      	itett	lt
 800be20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be28:	1a9d      	sublt	r5, r3, r2
 800be2a:	2300      	movlt	r3, #0
 800be2c:	e734      	b.n	800bc98 <_dtoa_r+0x720>
 800be2e:	9e07      	ldr	r6, [sp, #28]
 800be30:	9d04      	ldr	r5, [sp, #16]
 800be32:	9f08      	ldr	r7, [sp, #32]
 800be34:	e73b      	b.n	800bcae <_dtoa_r+0x736>
 800be36:	9a07      	ldr	r2, [sp, #28]
 800be38:	e767      	b.n	800bd0a <_dtoa_r+0x792>
 800be3a:	9b06      	ldr	r3, [sp, #24]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	dc18      	bgt.n	800be72 <_dtoa_r+0x8fa>
 800be40:	f1ba 0f00 	cmp.w	sl, #0
 800be44:	d115      	bne.n	800be72 <_dtoa_r+0x8fa>
 800be46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be4a:	b993      	cbnz	r3, 800be72 <_dtoa_r+0x8fa>
 800be4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be50:	0d1b      	lsrs	r3, r3, #20
 800be52:	051b      	lsls	r3, r3, #20
 800be54:	b183      	cbz	r3, 800be78 <_dtoa_r+0x900>
 800be56:	9b04      	ldr	r3, [sp, #16]
 800be58:	3301      	adds	r3, #1
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	9b05      	ldr	r3, [sp, #20]
 800be5e:	3301      	adds	r3, #1
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	f04f 0801 	mov.w	r8, #1
 800be66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f47f af6a 	bne.w	800bd42 <_dtoa_r+0x7ca>
 800be6e:	2001      	movs	r0, #1
 800be70:	e76f      	b.n	800bd52 <_dtoa_r+0x7da>
 800be72:	f04f 0800 	mov.w	r8, #0
 800be76:	e7f6      	b.n	800be66 <_dtoa_r+0x8ee>
 800be78:	4698      	mov	r8, r3
 800be7a:	e7f4      	b.n	800be66 <_dtoa_r+0x8ee>
 800be7c:	f43f af7d 	beq.w	800bd7a <_dtoa_r+0x802>
 800be80:	4618      	mov	r0, r3
 800be82:	301c      	adds	r0, #28
 800be84:	e772      	b.n	800bd6c <_dtoa_r+0x7f4>
 800be86:	9b03      	ldr	r3, [sp, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dc37      	bgt.n	800befc <_dtoa_r+0x984>
 800be8c:	9b06      	ldr	r3, [sp, #24]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	dd34      	ble.n	800befc <_dtoa_r+0x984>
 800be92:	9b03      	ldr	r3, [sp, #12]
 800be94:	9302      	str	r3, [sp, #8]
 800be96:	9b02      	ldr	r3, [sp, #8]
 800be98:	b96b      	cbnz	r3, 800beb6 <_dtoa_r+0x93e>
 800be9a:	4631      	mov	r1, r6
 800be9c:	2205      	movs	r2, #5
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 fac4 	bl	800c42c <__multadd>
 800bea4:	4601      	mov	r1, r0
 800bea6:	4606      	mov	r6, r0
 800bea8:	ee18 0a10 	vmov	r0, s16
 800beac:	f000 fcde 	bl	800c86c <__mcmp>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	f73f adbb 	bgt.w	800ba2c <_dtoa_r+0x4b4>
 800beb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb8:	9d01      	ldr	r5, [sp, #4]
 800beba:	43db      	mvns	r3, r3
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	f04f 0800 	mov.w	r8, #0
 800bec2:	4631      	mov	r1, r6
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 fa8f 	bl	800c3e8 <_Bfree>
 800beca:	2f00      	cmp	r7, #0
 800becc:	f43f aea4 	beq.w	800bc18 <_dtoa_r+0x6a0>
 800bed0:	f1b8 0f00 	cmp.w	r8, #0
 800bed4:	d005      	beq.n	800bee2 <_dtoa_r+0x96a>
 800bed6:	45b8      	cmp	r8, r7
 800bed8:	d003      	beq.n	800bee2 <_dtoa_r+0x96a>
 800beda:	4641      	mov	r1, r8
 800bedc:	4620      	mov	r0, r4
 800bede:	f000 fa83 	bl	800c3e8 <_Bfree>
 800bee2:	4639      	mov	r1, r7
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 fa7f 	bl	800c3e8 <_Bfree>
 800beea:	e695      	b.n	800bc18 <_dtoa_r+0x6a0>
 800beec:	2600      	movs	r6, #0
 800beee:	4637      	mov	r7, r6
 800bef0:	e7e1      	b.n	800beb6 <_dtoa_r+0x93e>
 800bef2:	9700      	str	r7, [sp, #0]
 800bef4:	4637      	mov	r7, r6
 800bef6:	e599      	b.n	800ba2c <_dtoa_r+0x4b4>
 800bef8:	40240000 	.word	0x40240000
 800befc:	9b08      	ldr	r3, [sp, #32]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 80ca 	beq.w	800c098 <_dtoa_r+0xb20>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	9302      	str	r3, [sp, #8]
 800bf08:	2d00      	cmp	r5, #0
 800bf0a:	dd05      	ble.n	800bf18 <_dtoa_r+0x9a0>
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	462a      	mov	r2, r5
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 fc3b 	bl	800c78c <__lshift>
 800bf16:	4607      	mov	r7, r0
 800bf18:	f1b8 0f00 	cmp.w	r8, #0
 800bf1c:	d05b      	beq.n	800bfd6 <_dtoa_r+0xa5e>
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	4620      	mov	r0, r4
 800bf22:	f000 fa21 	bl	800c368 <_Balloc>
 800bf26:	4605      	mov	r5, r0
 800bf28:	b928      	cbnz	r0, 800bf36 <_dtoa_r+0x9be>
 800bf2a:	4b87      	ldr	r3, [pc, #540]	; (800c148 <_dtoa_r+0xbd0>)
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf32:	f7ff bb3b 	b.w	800b5ac <_dtoa_r+0x34>
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	3202      	adds	r2, #2
 800bf3a:	0092      	lsls	r2, r2, #2
 800bf3c:	f107 010c 	add.w	r1, r7, #12
 800bf40:	300c      	adds	r0, #12
 800bf42:	f7fe fcd5 	bl	800a8f0 <memcpy>
 800bf46:	2201      	movs	r2, #1
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 fc1e 	bl	800c78c <__lshift>
 800bf50:	9b01      	ldr	r3, [sp, #4]
 800bf52:	f103 0901 	add.w	r9, r3, #1
 800bf56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	9305      	str	r3, [sp, #20]
 800bf5e:	f00a 0301 	and.w	r3, sl, #1
 800bf62:	46b8      	mov	r8, r7
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	4607      	mov	r7, r0
 800bf68:	4631      	mov	r1, r6
 800bf6a:	ee18 0a10 	vmov	r0, s16
 800bf6e:	f7ff fa76 	bl	800b45e <quorem>
 800bf72:	4641      	mov	r1, r8
 800bf74:	9002      	str	r0, [sp, #8]
 800bf76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf7a:	ee18 0a10 	vmov	r0, s16
 800bf7e:	f000 fc75 	bl	800c86c <__mcmp>
 800bf82:	463a      	mov	r2, r7
 800bf84:	9003      	str	r0, [sp, #12]
 800bf86:	4631      	mov	r1, r6
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f000 fc8b 	bl	800c8a4 <__mdiff>
 800bf8e:	68c2      	ldr	r2, [r0, #12]
 800bf90:	f109 3bff 	add.w	fp, r9, #4294967295
 800bf94:	4605      	mov	r5, r0
 800bf96:	bb02      	cbnz	r2, 800bfda <_dtoa_r+0xa62>
 800bf98:	4601      	mov	r1, r0
 800bf9a:	ee18 0a10 	vmov	r0, s16
 800bf9e:	f000 fc65 	bl	800c86c <__mcmp>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	9207      	str	r2, [sp, #28]
 800bfaa:	f000 fa1d 	bl	800c3e8 <_Bfree>
 800bfae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bfb2:	ea43 0102 	orr.w	r1, r3, r2
 800bfb6:	9b04      	ldr	r3, [sp, #16]
 800bfb8:	430b      	orrs	r3, r1
 800bfba:	464d      	mov	r5, r9
 800bfbc:	d10f      	bne.n	800bfde <_dtoa_r+0xa66>
 800bfbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfc2:	d02a      	beq.n	800c01a <_dtoa_r+0xaa2>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dd02      	ble.n	800bfd0 <_dtoa_r+0xa58>
 800bfca:	9b02      	ldr	r3, [sp, #8]
 800bfcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bfd0:	f88b a000 	strb.w	sl, [fp]
 800bfd4:	e775      	b.n	800bec2 <_dtoa_r+0x94a>
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	e7ba      	b.n	800bf50 <_dtoa_r+0x9d8>
 800bfda:	2201      	movs	r2, #1
 800bfdc:	e7e2      	b.n	800bfa4 <_dtoa_r+0xa2c>
 800bfde:	9b03      	ldr	r3, [sp, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	db04      	blt.n	800bfee <_dtoa_r+0xa76>
 800bfe4:	9906      	ldr	r1, [sp, #24]
 800bfe6:	430b      	orrs	r3, r1
 800bfe8:	9904      	ldr	r1, [sp, #16]
 800bfea:	430b      	orrs	r3, r1
 800bfec:	d122      	bne.n	800c034 <_dtoa_r+0xabc>
 800bfee:	2a00      	cmp	r2, #0
 800bff0:	ddee      	ble.n	800bfd0 <_dtoa_r+0xa58>
 800bff2:	ee18 1a10 	vmov	r1, s16
 800bff6:	2201      	movs	r2, #1
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 fbc7 	bl	800c78c <__lshift>
 800bffe:	4631      	mov	r1, r6
 800c000:	ee08 0a10 	vmov	s16, r0
 800c004:	f000 fc32 	bl	800c86c <__mcmp>
 800c008:	2800      	cmp	r0, #0
 800c00a:	dc03      	bgt.n	800c014 <_dtoa_r+0xa9c>
 800c00c:	d1e0      	bne.n	800bfd0 <_dtoa_r+0xa58>
 800c00e:	f01a 0f01 	tst.w	sl, #1
 800c012:	d0dd      	beq.n	800bfd0 <_dtoa_r+0xa58>
 800c014:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c018:	d1d7      	bne.n	800bfca <_dtoa_r+0xa52>
 800c01a:	2339      	movs	r3, #57	; 0x39
 800c01c:	f88b 3000 	strb.w	r3, [fp]
 800c020:	462b      	mov	r3, r5
 800c022:	461d      	mov	r5, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c02a:	2a39      	cmp	r2, #57	; 0x39
 800c02c:	d071      	beq.n	800c112 <_dtoa_r+0xb9a>
 800c02e:	3201      	adds	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]
 800c032:	e746      	b.n	800bec2 <_dtoa_r+0x94a>
 800c034:	2a00      	cmp	r2, #0
 800c036:	dd07      	ble.n	800c048 <_dtoa_r+0xad0>
 800c038:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c03c:	d0ed      	beq.n	800c01a <_dtoa_r+0xaa2>
 800c03e:	f10a 0301 	add.w	r3, sl, #1
 800c042:	f88b 3000 	strb.w	r3, [fp]
 800c046:	e73c      	b.n	800bec2 <_dtoa_r+0x94a>
 800c048:	9b05      	ldr	r3, [sp, #20]
 800c04a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c04e:	4599      	cmp	r9, r3
 800c050:	d047      	beq.n	800c0e2 <_dtoa_r+0xb6a>
 800c052:	ee18 1a10 	vmov	r1, s16
 800c056:	2300      	movs	r3, #0
 800c058:	220a      	movs	r2, #10
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 f9e6 	bl	800c42c <__multadd>
 800c060:	45b8      	cmp	r8, r7
 800c062:	ee08 0a10 	vmov	s16, r0
 800c066:	f04f 0300 	mov.w	r3, #0
 800c06a:	f04f 020a 	mov.w	r2, #10
 800c06e:	4641      	mov	r1, r8
 800c070:	4620      	mov	r0, r4
 800c072:	d106      	bne.n	800c082 <_dtoa_r+0xb0a>
 800c074:	f000 f9da 	bl	800c42c <__multadd>
 800c078:	4680      	mov	r8, r0
 800c07a:	4607      	mov	r7, r0
 800c07c:	f109 0901 	add.w	r9, r9, #1
 800c080:	e772      	b.n	800bf68 <_dtoa_r+0x9f0>
 800c082:	f000 f9d3 	bl	800c42c <__multadd>
 800c086:	4639      	mov	r1, r7
 800c088:	4680      	mov	r8, r0
 800c08a:	2300      	movs	r3, #0
 800c08c:	220a      	movs	r2, #10
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f9cc 	bl	800c42c <__multadd>
 800c094:	4607      	mov	r7, r0
 800c096:	e7f1      	b.n	800c07c <_dtoa_r+0xb04>
 800c098:	9b03      	ldr	r3, [sp, #12]
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	9d01      	ldr	r5, [sp, #4]
 800c09e:	ee18 0a10 	vmov	r0, s16
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	f7ff f9db 	bl	800b45e <quorem>
 800c0a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0ac:	9b01      	ldr	r3, [sp, #4]
 800c0ae:	f805 ab01 	strb.w	sl, [r5], #1
 800c0b2:	1aea      	subs	r2, r5, r3
 800c0b4:	9b02      	ldr	r3, [sp, #8]
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	dd09      	ble.n	800c0ce <_dtoa_r+0xb56>
 800c0ba:	ee18 1a10 	vmov	r1, s16
 800c0be:	2300      	movs	r3, #0
 800c0c0:	220a      	movs	r2, #10
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 f9b2 	bl	800c42c <__multadd>
 800c0c8:	ee08 0a10 	vmov	s16, r0
 800c0cc:	e7e7      	b.n	800c09e <_dtoa_r+0xb26>
 800c0ce:	9b02      	ldr	r3, [sp, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	bfc8      	it	gt
 800c0d4:	461d      	movgt	r5, r3
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	bfd8      	it	le
 800c0da:	2501      	movle	r5, #1
 800c0dc:	441d      	add	r5, r3
 800c0de:	f04f 0800 	mov.w	r8, #0
 800c0e2:	ee18 1a10 	vmov	r1, s16
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f000 fb4f 	bl	800c78c <__lshift>
 800c0ee:	4631      	mov	r1, r6
 800c0f0:	ee08 0a10 	vmov	s16, r0
 800c0f4:	f000 fbba 	bl	800c86c <__mcmp>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	dc91      	bgt.n	800c020 <_dtoa_r+0xaa8>
 800c0fc:	d102      	bne.n	800c104 <_dtoa_r+0xb8c>
 800c0fe:	f01a 0f01 	tst.w	sl, #1
 800c102:	d18d      	bne.n	800c020 <_dtoa_r+0xaa8>
 800c104:	462b      	mov	r3, r5
 800c106:	461d      	mov	r5, r3
 800c108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c10c:	2a30      	cmp	r2, #48	; 0x30
 800c10e:	d0fa      	beq.n	800c106 <_dtoa_r+0xb8e>
 800c110:	e6d7      	b.n	800bec2 <_dtoa_r+0x94a>
 800c112:	9a01      	ldr	r2, [sp, #4]
 800c114:	429a      	cmp	r2, r3
 800c116:	d184      	bne.n	800c022 <_dtoa_r+0xaaa>
 800c118:	9b00      	ldr	r3, [sp, #0]
 800c11a:	3301      	adds	r3, #1
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	2331      	movs	r3, #49	; 0x31
 800c120:	7013      	strb	r3, [r2, #0]
 800c122:	e6ce      	b.n	800bec2 <_dtoa_r+0x94a>
 800c124:	4b09      	ldr	r3, [pc, #36]	; (800c14c <_dtoa_r+0xbd4>)
 800c126:	f7ff ba95 	b.w	800b654 <_dtoa_r+0xdc>
 800c12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f47f aa6e 	bne.w	800b60e <_dtoa_r+0x96>
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <_dtoa_r+0xbd8>)
 800c134:	f7ff ba8e 	b.w	800b654 <_dtoa_r+0xdc>
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	dcae      	bgt.n	800c09c <_dtoa_r+0xb24>
 800c13e:	9b06      	ldr	r3, [sp, #24]
 800c140:	2b02      	cmp	r3, #2
 800c142:	f73f aea8 	bgt.w	800be96 <_dtoa_r+0x91e>
 800c146:	e7a9      	b.n	800c09c <_dtoa_r+0xb24>
 800c148:	08019ba7 	.word	0x08019ba7
 800c14c:	08019b04 	.word	0x08019b04
 800c150:	08019b28 	.word	0x08019b28

0800c154 <std>:
 800c154:	2300      	movs	r3, #0
 800c156:	b510      	push	{r4, lr}
 800c158:	4604      	mov	r4, r0
 800c15a:	e9c0 3300 	strd	r3, r3, [r0]
 800c15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c162:	6083      	str	r3, [r0, #8]
 800c164:	8181      	strh	r1, [r0, #12]
 800c166:	6643      	str	r3, [r0, #100]	; 0x64
 800c168:	81c2      	strh	r2, [r0, #14]
 800c16a:	6183      	str	r3, [r0, #24]
 800c16c:	4619      	mov	r1, r3
 800c16e:	2208      	movs	r2, #8
 800c170:	305c      	adds	r0, #92	; 0x5c
 800c172:	f7fe fbcb 	bl	800a90c <memset>
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <std+0x38>)
 800c178:	6263      	str	r3, [r4, #36]	; 0x24
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <std+0x3c>)
 800c17c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <std+0x40>)
 800c180:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c182:	4b05      	ldr	r3, [pc, #20]	; (800c198 <std+0x44>)
 800c184:	6224      	str	r4, [r4, #32]
 800c186:	6323      	str	r3, [r4, #48]	; 0x30
 800c188:	bd10      	pop	{r4, pc}
 800c18a:	bf00      	nop
 800c18c:	0800d065 	.word	0x0800d065
 800c190:	0800d087 	.word	0x0800d087
 800c194:	0800d0bf 	.word	0x0800d0bf
 800c198:	0800d0e3 	.word	0x0800d0e3

0800c19c <_cleanup_r>:
 800c19c:	4901      	ldr	r1, [pc, #4]	; (800c1a4 <_cleanup_r+0x8>)
 800c19e:	f000 b8af 	b.w	800c300 <_fwalk_reent>
 800c1a2:	bf00      	nop
 800c1a4:	0800d3f9 	.word	0x0800d3f9

0800c1a8 <__sfmoreglue>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	2268      	movs	r2, #104	; 0x68
 800c1ac:	1e4d      	subs	r5, r1, #1
 800c1ae:	4355      	muls	r5, r2
 800c1b0:	460e      	mov	r6, r1
 800c1b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c1b6:	f7fe fc1d 	bl	800a9f4 <_malloc_r>
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	b140      	cbz	r0, 800c1d0 <__sfmoreglue+0x28>
 800c1be:	2100      	movs	r1, #0
 800c1c0:	e9c0 1600 	strd	r1, r6, [r0]
 800c1c4:	300c      	adds	r0, #12
 800c1c6:	60a0      	str	r0, [r4, #8]
 800c1c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1cc:	f7fe fb9e 	bl	800a90c <memset>
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}

0800c1d4 <__sfp_lock_acquire>:
 800c1d4:	4801      	ldr	r0, [pc, #4]	; (800c1dc <__sfp_lock_acquire+0x8>)
 800c1d6:	f000 b8b8 	b.w	800c34a <__retarget_lock_acquire_recursive>
 800c1da:	bf00      	nop
 800c1dc:	2000404d 	.word	0x2000404d

0800c1e0 <__sfp_lock_release>:
 800c1e0:	4801      	ldr	r0, [pc, #4]	; (800c1e8 <__sfp_lock_release+0x8>)
 800c1e2:	f000 b8b3 	b.w	800c34c <__retarget_lock_release_recursive>
 800c1e6:	bf00      	nop
 800c1e8:	2000404d 	.word	0x2000404d

0800c1ec <__sinit_lock_acquire>:
 800c1ec:	4801      	ldr	r0, [pc, #4]	; (800c1f4 <__sinit_lock_acquire+0x8>)
 800c1ee:	f000 b8ac 	b.w	800c34a <__retarget_lock_acquire_recursive>
 800c1f2:	bf00      	nop
 800c1f4:	2000404e 	.word	0x2000404e

0800c1f8 <__sinit_lock_release>:
 800c1f8:	4801      	ldr	r0, [pc, #4]	; (800c200 <__sinit_lock_release+0x8>)
 800c1fa:	f000 b8a7 	b.w	800c34c <__retarget_lock_release_recursive>
 800c1fe:	bf00      	nop
 800c200:	2000404e 	.word	0x2000404e

0800c204 <__sinit>:
 800c204:	b510      	push	{r4, lr}
 800c206:	4604      	mov	r4, r0
 800c208:	f7ff fff0 	bl	800c1ec <__sinit_lock_acquire>
 800c20c:	69a3      	ldr	r3, [r4, #24]
 800c20e:	b11b      	cbz	r3, 800c218 <__sinit+0x14>
 800c210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c214:	f7ff bff0 	b.w	800c1f8 <__sinit_lock_release>
 800c218:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c21c:	6523      	str	r3, [r4, #80]	; 0x50
 800c21e:	4b13      	ldr	r3, [pc, #76]	; (800c26c <__sinit+0x68>)
 800c220:	4a13      	ldr	r2, [pc, #76]	; (800c270 <__sinit+0x6c>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	62a2      	str	r2, [r4, #40]	; 0x28
 800c226:	42a3      	cmp	r3, r4
 800c228:	bf04      	itt	eq
 800c22a:	2301      	moveq	r3, #1
 800c22c:	61a3      	streq	r3, [r4, #24]
 800c22e:	4620      	mov	r0, r4
 800c230:	f000 f820 	bl	800c274 <__sfp>
 800c234:	6060      	str	r0, [r4, #4]
 800c236:	4620      	mov	r0, r4
 800c238:	f000 f81c 	bl	800c274 <__sfp>
 800c23c:	60a0      	str	r0, [r4, #8]
 800c23e:	4620      	mov	r0, r4
 800c240:	f000 f818 	bl	800c274 <__sfp>
 800c244:	2200      	movs	r2, #0
 800c246:	60e0      	str	r0, [r4, #12]
 800c248:	2104      	movs	r1, #4
 800c24a:	6860      	ldr	r0, [r4, #4]
 800c24c:	f7ff ff82 	bl	800c154 <std>
 800c250:	68a0      	ldr	r0, [r4, #8]
 800c252:	2201      	movs	r2, #1
 800c254:	2109      	movs	r1, #9
 800c256:	f7ff ff7d 	bl	800c154 <std>
 800c25a:	68e0      	ldr	r0, [r4, #12]
 800c25c:	2202      	movs	r2, #2
 800c25e:	2112      	movs	r1, #18
 800c260:	f7ff ff78 	bl	800c154 <std>
 800c264:	2301      	movs	r3, #1
 800c266:	61a3      	str	r3, [r4, #24]
 800c268:	e7d2      	b.n	800c210 <__sinit+0xc>
 800c26a:	bf00      	nop
 800c26c:	08019af0 	.word	0x08019af0
 800c270:	0800c19d 	.word	0x0800c19d

0800c274 <__sfp>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	4607      	mov	r7, r0
 800c278:	f7ff ffac 	bl	800c1d4 <__sfp_lock_acquire>
 800c27c:	4b1e      	ldr	r3, [pc, #120]	; (800c2f8 <__sfp+0x84>)
 800c27e:	681e      	ldr	r6, [r3, #0]
 800c280:	69b3      	ldr	r3, [r6, #24]
 800c282:	b913      	cbnz	r3, 800c28a <__sfp+0x16>
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff ffbd 	bl	800c204 <__sinit>
 800c28a:	3648      	adds	r6, #72	; 0x48
 800c28c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c290:	3b01      	subs	r3, #1
 800c292:	d503      	bpl.n	800c29c <__sfp+0x28>
 800c294:	6833      	ldr	r3, [r6, #0]
 800c296:	b30b      	cbz	r3, 800c2dc <__sfp+0x68>
 800c298:	6836      	ldr	r6, [r6, #0]
 800c29a:	e7f7      	b.n	800c28c <__sfp+0x18>
 800c29c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2a0:	b9d5      	cbnz	r5, 800c2d8 <__sfp+0x64>
 800c2a2:	4b16      	ldr	r3, [pc, #88]	; (800c2fc <__sfp+0x88>)
 800c2a4:	60e3      	str	r3, [r4, #12]
 800c2a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2aa:	6665      	str	r5, [r4, #100]	; 0x64
 800c2ac:	f000 f84c 	bl	800c348 <__retarget_lock_init_recursive>
 800c2b0:	f7ff ff96 	bl	800c1e0 <__sfp_lock_release>
 800c2b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c2b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c2bc:	6025      	str	r5, [r4, #0]
 800c2be:	61a5      	str	r5, [r4, #24]
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2c8:	f7fe fb20 	bl	800a90c <memset>
 800c2cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d8:	3468      	adds	r4, #104	; 0x68
 800c2da:	e7d9      	b.n	800c290 <__sfp+0x1c>
 800c2dc:	2104      	movs	r1, #4
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f7ff ff62 	bl	800c1a8 <__sfmoreglue>
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	6030      	str	r0, [r6, #0]
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d1d5      	bne.n	800c298 <__sfp+0x24>
 800c2ec:	f7ff ff78 	bl	800c1e0 <__sfp_lock_release>
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	e7ee      	b.n	800c2d4 <__sfp+0x60>
 800c2f6:	bf00      	nop
 800c2f8:	08019af0 	.word	0x08019af0
 800c2fc:	ffff0001 	.word	0xffff0001

0800c300 <_fwalk_reent>:
 800c300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c304:	4606      	mov	r6, r0
 800c306:	4688      	mov	r8, r1
 800c308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c30c:	2700      	movs	r7, #0
 800c30e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c312:	f1b9 0901 	subs.w	r9, r9, #1
 800c316:	d505      	bpl.n	800c324 <_fwalk_reent+0x24>
 800c318:	6824      	ldr	r4, [r4, #0]
 800c31a:	2c00      	cmp	r4, #0
 800c31c:	d1f7      	bne.n	800c30e <_fwalk_reent+0xe>
 800c31e:	4638      	mov	r0, r7
 800c320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c324:	89ab      	ldrh	r3, [r5, #12]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d907      	bls.n	800c33a <_fwalk_reent+0x3a>
 800c32a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c32e:	3301      	adds	r3, #1
 800c330:	d003      	beq.n	800c33a <_fwalk_reent+0x3a>
 800c332:	4629      	mov	r1, r5
 800c334:	4630      	mov	r0, r6
 800c336:	47c0      	blx	r8
 800c338:	4307      	orrs	r7, r0
 800c33a:	3568      	adds	r5, #104	; 0x68
 800c33c:	e7e9      	b.n	800c312 <_fwalk_reent+0x12>
	...

0800c340 <_localeconv_r>:
 800c340:	4800      	ldr	r0, [pc, #0]	; (800c344 <_localeconv_r+0x4>)
 800c342:	4770      	bx	lr
 800c344:	200009c8 	.word	0x200009c8

0800c348 <__retarget_lock_init_recursive>:
 800c348:	4770      	bx	lr

0800c34a <__retarget_lock_acquire_recursive>:
 800c34a:	4770      	bx	lr

0800c34c <__retarget_lock_release_recursive>:
 800c34c:	4770      	bx	lr
	...

0800c350 <__malloc_lock>:
 800c350:	4801      	ldr	r0, [pc, #4]	; (800c358 <__malloc_lock+0x8>)
 800c352:	f7ff bffa 	b.w	800c34a <__retarget_lock_acquire_recursive>
 800c356:	bf00      	nop
 800c358:	2000404c 	.word	0x2000404c

0800c35c <__malloc_unlock>:
 800c35c:	4801      	ldr	r0, [pc, #4]	; (800c364 <__malloc_unlock+0x8>)
 800c35e:	f7ff bff5 	b.w	800c34c <__retarget_lock_release_recursive>
 800c362:	bf00      	nop
 800c364:	2000404c 	.word	0x2000404c

0800c368 <_Balloc>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c36c:	4604      	mov	r4, r0
 800c36e:	460d      	mov	r5, r1
 800c370:	b976      	cbnz	r6, 800c390 <_Balloc+0x28>
 800c372:	2010      	movs	r0, #16
 800c374:	f7fe fab4 	bl	800a8e0 <malloc>
 800c378:	4602      	mov	r2, r0
 800c37a:	6260      	str	r0, [r4, #36]	; 0x24
 800c37c:	b920      	cbnz	r0, 800c388 <_Balloc+0x20>
 800c37e:	4b18      	ldr	r3, [pc, #96]	; (800c3e0 <_Balloc+0x78>)
 800c380:	4818      	ldr	r0, [pc, #96]	; (800c3e4 <_Balloc+0x7c>)
 800c382:	2166      	movs	r1, #102	; 0x66
 800c384:	f000 ff84 	bl	800d290 <__assert_func>
 800c388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c38c:	6006      	str	r6, [r0, #0]
 800c38e:	60c6      	str	r6, [r0, #12]
 800c390:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c392:	68f3      	ldr	r3, [r6, #12]
 800c394:	b183      	cbz	r3, 800c3b8 <_Balloc+0x50>
 800c396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c39e:	b9b8      	cbnz	r0, 800c3d0 <_Balloc+0x68>
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c3a6:	1d72      	adds	r2, r6, #5
 800c3a8:	0092      	lsls	r2, r2, #2
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 fb60 	bl	800ca70 <_calloc_r>
 800c3b0:	b160      	cbz	r0, 800c3cc <_Balloc+0x64>
 800c3b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3b6:	e00e      	b.n	800c3d6 <_Balloc+0x6e>
 800c3b8:	2221      	movs	r2, #33	; 0x21
 800c3ba:	2104      	movs	r1, #4
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 fb57 	bl	800ca70 <_calloc_r>
 800c3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3c4:	60f0      	str	r0, [r6, #12]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1e4      	bne.n	800c396 <_Balloc+0x2e>
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	6802      	ldr	r2, [r0, #0]
 800c3d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3dc:	e7f7      	b.n	800c3ce <_Balloc+0x66>
 800c3de:	bf00      	nop
 800c3e0:	08019b35 	.word	0x08019b35
 800c3e4:	08019c18 	.word	0x08019c18

0800c3e8 <_Bfree>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	b976      	cbnz	r6, 800c410 <_Bfree+0x28>
 800c3f2:	2010      	movs	r0, #16
 800c3f4:	f7fe fa74 	bl	800a8e0 <malloc>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	6268      	str	r0, [r5, #36]	; 0x24
 800c3fc:	b920      	cbnz	r0, 800c408 <_Bfree+0x20>
 800c3fe:	4b09      	ldr	r3, [pc, #36]	; (800c424 <_Bfree+0x3c>)
 800c400:	4809      	ldr	r0, [pc, #36]	; (800c428 <_Bfree+0x40>)
 800c402:	218a      	movs	r1, #138	; 0x8a
 800c404:	f000 ff44 	bl	800d290 <__assert_func>
 800c408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c40c:	6006      	str	r6, [r0, #0]
 800c40e:	60c6      	str	r6, [r0, #12]
 800c410:	b13c      	cbz	r4, 800c422 <_Bfree+0x3a>
 800c412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c414:	6862      	ldr	r2, [r4, #4]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c41c:	6021      	str	r1, [r4, #0]
 800c41e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c422:	bd70      	pop	{r4, r5, r6, pc}
 800c424:	08019b35 	.word	0x08019b35
 800c428:	08019c18 	.word	0x08019c18

0800c42c <__multadd>:
 800c42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c430:	690d      	ldr	r5, [r1, #16]
 800c432:	4607      	mov	r7, r0
 800c434:	460c      	mov	r4, r1
 800c436:	461e      	mov	r6, r3
 800c438:	f101 0c14 	add.w	ip, r1, #20
 800c43c:	2000      	movs	r0, #0
 800c43e:	f8dc 3000 	ldr.w	r3, [ip]
 800c442:	b299      	uxth	r1, r3
 800c444:	fb02 6101 	mla	r1, r2, r1, r6
 800c448:	0c1e      	lsrs	r6, r3, #16
 800c44a:	0c0b      	lsrs	r3, r1, #16
 800c44c:	fb02 3306 	mla	r3, r2, r6, r3
 800c450:	b289      	uxth	r1, r1
 800c452:	3001      	adds	r0, #1
 800c454:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c458:	4285      	cmp	r5, r0
 800c45a:	f84c 1b04 	str.w	r1, [ip], #4
 800c45e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c462:	dcec      	bgt.n	800c43e <__multadd+0x12>
 800c464:	b30e      	cbz	r6, 800c4aa <__multadd+0x7e>
 800c466:	68a3      	ldr	r3, [r4, #8]
 800c468:	42ab      	cmp	r3, r5
 800c46a:	dc19      	bgt.n	800c4a0 <__multadd+0x74>
 800c46c:	6861      	ldr	r1, [r4, #4]
 800c46e:	4638      	mov	r0, r7
 800c470:	3101      	adds	r1, #1
 800c472:	f7ff ff79 	bl	800c368 <_Balloc>
 800c476:	4680      	mov	r8, r0
 800c478:	b928      	cbnz	r0, 800c486 <__multadd+0x5a>
 800c47a:	4602      	mov	r2, r0
 800c47c:	4b0c      	ldr	r3, [pc, #48]	; (800c4b0 <__multadd+0x84>)
 800c47e:	480d      	ldr	r0, [pc, #52]	; (800c4b4 <__multadd+0x88>)
 800c480:	21b5      	movs	r1, #181	; 0xb5
 800c482:	f000 ff05 	bl	800d290 <__assert_func>
 800c486:	6922      	ldr	r2, [r4, #16]
 800c488:	3202      	adds	r2, #2
 800c48a:	f104 010c 	add.w	r1, r4, #12
 800c48e:	0092      	lsls	r2, r2, #2
 800c490:	300c      	adds	r0, #12
 800c492:	f7fe fa2d 	bl	800a8f0 <memcpy>
 800c496:	4621      	mov	r1, r4
 800c498:	4638      	mov	r0, r7
 800c49a:	f7ff ffa5 	bl	800c3e8 <_Bfree>
 800c49e:	4644      	mov	r4, r8
 800c4a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4a4:	3501      	adds	r5, #1
 800c4a6:	615e      	str	r6, [r3, #20]
 800c4a8:	6125      	str	r5, [r4, #16]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b0:	08019ba7 	.word	0x08019ba7
 800c4b4:	08019c18 	.word	0x08019c18

0800c4b8 <__hi0bits>:
 800c4b8:	0c03      	lsrs	r3, r0, #16
 800c4ba:	041b      	lsls	r3, r3, #16
 800c4bc:	b9d3      	cbnz	r3, 800c4f4 <__hi0bits+0x3c>
 800c4be:	0400      	lsls	r0, r0, #16
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4c6:	bf04      	itt	eq
 800c4c8:	0200      	lsleq	r0, r0, #8
 800c4ca:	3308      	addeq	r3, #8
 800c4cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4d0:	bf04      	itt	eq
 800c4d2:	0100      	lsleq	r0, r0, #4
 800c4d4:	3304      	addeq	r3, #4
 800c4d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4da:	bf04      	itt	eq
 800c4dc:	0080      	lsleq	r0, r0, #2
 800c4de:	3302      	addeq	r3, #2
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	db05      	blt.n	800c4f0 <__hi0bits+0x38>
 800c4e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4e8:	f103 0301 	add.w	r3, r3, #1
 800c4ec:	bf08      	it	eq
 800c4ee:	2320      	moveq	r3, #32
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	4770      	bx	lr
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	e7e4      	b.n	800c4c2 <__hi0bits+0xa>

0800c4f8 <__lo0bits>:
 800c4f8:	6803      	ldr	r3, [r0, #0]
 800c4fa:	f013 0207 	ands.w	r2, r3, #7
 800c4fe:	4601      	mov	r1, r0
 800c500:	d00b      	beq.n	800c51a <__lo0bits+0x22>
 800c502:	07da      	lsls	r2, r3, #31
 800c504:	d423      	bmi.n	800c54e <__lo0bits+0x56>
 800c506:	0798      	lsls	r0, r3, #30
 800c508:	bf49      	itett	mi
 800c50a:	085b      	lsrmi	r3, r3, #1
 800c50c:	089b      	lsrpl	r3, r3, #2
 800c50e:	2001      	movmi	r0, #1
 800c510:	600b      	strmi	r3, [r1, #0]
 800c512:	bf5c      	itt	pl
 800c514:	600b      	strpl	r3, [r1, #0]
 800c516:	2002      	movpl	r0, #2
 800c518:	4770      	bx	lr
 800c51a:	b298      	uxth	r0, r3
 800c51c:	b9a8      	cbnz	r0, 800c54a <__lo0bits+0x52>
 800c51e:	0c1b      	lsrs	r3, r3, #16
 800c520:	2010      	movs	r0, #16
 800c522:	b2da      	uxtb	r2, r3
 800c524:	b90a      	cbnz	r2, 800c52a <__lo0bits+0x32>
 800c526:	3008      	adds	r0, #8
 800c528:	0a1b      	lsrs	r3, r3, #8
 800c52a:	071a      	lsls	r2, r3, #28
 800c52c:	bf04      	itt	eq
 800c52e:	091b      	lsreq	r3, r3, #4
 800c530:	3004      	addeq	r0, #4
 800c532:	079a      	lsls	r2, r3, #30
 800c534:	bf04      	itt	eq
 800c536:	089b      	lsreq	r3, r3, #2
 800c538:	3002      	addeq	r0, #2
 800c53a:	07da      	lsls	r2, r3, #31
 800c53c:	d403      	bmi.n	800c546 <__lo0bits+0x4e>
 800c53e:	085b      	lsrs	r3, r3, #1
 800c540:	f100 0001 	add.w	r0, r0, #1
 800c544:	d005      	beq.n	800c552 <__lo0bits+0x5a>
 800c546:	600b      	str	r3, [r1, #0]
 800c548:	4770      	bx	lr
 800c54a:	4610      	mov	r0, r2
 800c54c:	e7e9      	b.n	800c522 <__lo0bits+0x2a>
 800c54e:	2000      	movs	r0, #0
 800c550:	4770      	bx	lr
 800c552:	2020      	movs	r0, #32
 800c554:	4770      	bx	lr
	...

0800c558 <__i2b>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	2101      	movs	r1, #1
 800c55e:	f7ff ff03 	bl	800c368 <_Balloc>
 800c562:	4602      	mov	r2, r0
 800c564:	b928      	cbnz	r0, 800c572 <__i2b+0x1a>
 800c566:	4b05      	ldr	r3, [pc, #20]	; (800c57c <__i2b+0x24>)
 800c568:	4805      	ldr	r0, [pc, #20]	; (800c580 <__i2b+0x28>)
 800c56a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c56e:	f000 fe8f 	bl	800d290 <__assert_func>
 800c572:	2301      	movs	r3, #1
 800c574:	6144      	str	r4, [r0, #20]
 800c576:	6103      	str	r3, [r0, #16]
 800c578:	bd10      	pop	{r4, pc}
 800c57a:	bf00      	nop
 800c57c:	08019ba7 	.word	0x08019ba7
 800c580:	08019c18 	.word	0x08019c18

0800c584 <__multiply>:
 800c584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c588:	4691      	mov	r9, r2
 800c58a:	690a      	ldr	r2, [r1, #16]
 800c58c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c590:	429a      	cmp	r2, r3
 800c592:	bfb8      	it	lt
 800c594:	460b      	movlt	r3, r1
 800c596:	460c      	mov	r4, r1
 800c598:	bfbc      	itt	lt
 800c59a:	464c      	movlt	r4, r9
 800c59c:	4699      	movlt	r9, r3
 800c59e:	6927      	ldr	r7, [r4, #16]
 800c5a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5a4:	68a3      	ldr	r3, [r4, #8]
 800c5a6:	6861      	ldr	r1, [r4, #4]
 800c5a8:	eb07 060a 	add.w	r6, r7, sl
 800c5ac:	42b3      	cmp	r3, r6
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	bfb8      	it	lt
 800c5b2:	3101      	addlt	r1, #1
 800c5b4:	f7ff fed8 	bl	800c368 <_Balloc>
 800c5b8:	b930      	cbnz	r0, 800c5c8 <__multiply+0x44>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	4b44      	ldr	r3, [pc, #272]	; (800c6d0 <__multiply+0x14c>)
 800c5be:	4845      	ldr	r0, [pc, #276]	; (800c6d4 <__multiply+0x150>)
 800c5c0:	f240 115d 	movw	r1, #349	; 0x15d
 800c5c4:	f000 fe64 	bl	800d290 <__assert_func>
 800c5c8:	f100 0514 	add.w	r5, r0, #20
 800c5cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5d0:	462b      	mov	r3, r5
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	4543      	cmp	r3, r8
 800c5d6:	d321      	bcc.n	800c61c <__multiply+0x98>
 800c5d8:	f104 0314 	add.w	r3, r4, #20
 800c5dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5e0:	f109 0314 	add.w	r3, r9, #20
 800c5e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5e8:	9202      	str	r2, [sp, #8]
 800c5ea:	1b3a      	subs	r2, r7, r4
 800c5ec:	3a15      	subs	r2, #21
 800c5ee:	f022 0203 	bic.w	r2, r2, #3
 800c5f2:	3204      	adds	r2, #4
 800c5f4:	f104 0115 	add.w	r1, r4, #21
 800c5f8:	428f      	cmp	r7, r1
 800c5fa:	bf38      	it	cc
 800c5fc:	2204      	movcc	r2, #4
 800c5fe:	9201      	str	r2, [sp, #4]
 800c600:	9a02      	ldr	r2, [sp, #8]
 800c602:	9303      	str	r3, [sp, #12]
 800c604:	429a      	cmp	r2, r3
 800c606:	d80c      	bhi.n	800c622 <__multiply+0x9e>
 800c608:	2e00      	cmp	r6, #0
 800c60a:	dd03      	ble.n	800c614 <__multiply+0x90>
 800c60c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c610:	2b00      	cmp	r3, #0
 800c612:	d05a      	beq.n	800c6ca <__multiply+0x146>
 800c614:	6106      	str	r6, [r0, #16]
 800c616:	b005      	add	sp, #20
 800c618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61c:	f843 2b04 	str.w	r2, [r3], #4
 800c620:	e7d8      	b.n	800c5d4 <__multiply+0x50>
 800c622:	f8b3 a000 	ldrh.w	sl, [r3]
 800c626:	f1ba 0f00 	cmp.w	sl, #0
 800c62a:	d024      	beq.n	800c676 <__multiply+0xf2>
 800c62c:	f104 0e14 	add.w	lr, r4, #20
 800c630:	46a9      	mov	r9, r5
 800c632:	f04f 0c00 	mov.w	ip, #0
 800c636:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c63a:	f8d9 1000 	ldr.w	r1, [r9]
 800c63e:	fa1f fb82 	uxth.w	fp, r2
 800c642:	b289      	uxth	r1, r1
 800c644:	fb0a 110b 	mla	r1, sl, fp, r1
 800c648:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c64c:	f8d9 2000 	ldr.w	r2, [r9]
 800c650:	4461      	add	r1, ip
 800c652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c656:	fb0a c20b 	mla	r2, sl, fp, ip
 800c65a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c65e:	b289      	uxth	r1, r1
 800c660:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c664:	4577      	cmp	r7, lr
 800c666:	f849 1b04 	str.w	r1, [r9], #4
 800c66a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c66e:	d8e2      	bhi.n	800c636 <__multiply+0xb2>
 800c670:	9a01      	ldr	r2, [sp, #4]
 800c672:	f845 c002 	str.w	ip, [r5, r2]
 800c676:	9a03      	ldr	r2, [sp, #12]
 800c678:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c67c:	3304      	adds	r3, #4
 800c67e:	f1b9 0f00 	cmp.w	r9, #0
 800c682:	d020      	beq.n	800c6c6 <__multiply+0x142>
 800c684:	6829      	ldr	r1, [r5, #0]
 800c686:	f104 0c14 	add.w	ip, r4, #20
 800c68a:	46ae      	mov	lr, r5
 800c68c:	f04f 0a00 	mov.w	sl, #0
 800c690:	f8bc b000 	ldrh.w	fp, [ip]
 800c694:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c698:	fb09 220b 	mla	r2, r9, fp, r2
 800c69c:	4492      	add	sl, r2
 800c69e:	b289      	uxth	r1, r1
 800c6a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c6a4:	f84e 1b04 	str.w	r1, [lr], #4
 800c6a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6ac:	f8be 1000 	ldrh.w	r1, [lr]
 800c6b0:	0c12      	lsrs	r2, r2, #16
 800c6b2:	fb09 1102 	mla	r1, r9, r2, r1
 800c6b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c6ba:	4567      	cmp	r7, ip
 800c6bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6c0:	d8e6      	bhi.n	800c690 <__multiply+0x10c>
 800c6c2:	9a01      	ldr	r2, [sp, #4]
 800c6c4:	50a9      	str	r1, [r5, r2]
 800c6c6:	3504      	adds	r5, #4
 800c6c8:	e79a      	b.n	800c600 <__multiply+0x7c>
 800c6ca:	3e01      	subs	r6, #1
 800c6cc:	e79c      	b.n	800c608 <__multiply+0x84>
 800c6ce:	bf00      	nop
 800c6d0:	08019ba7 	.word	0x08019ba7
 800c6d4:	08019c18 	.word	0x08019c18

0800c6d8 <__pow5mult>:
 800c6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6dc:	4615      	mov	r5, r2
 800c6de:	f012 0203 	ands.w	r2, r2, #3
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	460f      	mov	r7, r1
 800c6e6:	d007      	beq.n	800c6f8 <__pow5mult+0x20>
 800c6e8:	4c25      	ldr	r4, [pc, #148]	; (800c780 <__pow5mult+0xa8>)
 800c6ea:	3a01      	subs	r2, #1
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6f2:	f7ff fe9b 	bl	800c42c <__multadd>
 800c6f6:	4607      	mov	r7, r0
 800c6f8:	10ad      	asrs	r5, r5, #2
 800c6fa:	d03d      	beq.n	800c778 <__pow5mult+0xa0>
 800c6fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6fe:	b97c      	cbnz	r4, 800c720 <__pow5mult+0x48>
 800c700:	2010      	movs	r0, #16
 800c702:	f7fe f8ed 	bl	800a8e0 <malloc>
 800c706:	4602      	mov	r2, r0
 800c708:	6270      	str	r0, [r6, #36]	; 0x24
 800c70a:	b928      	cbnz	r0, 800c718 <__pow5mult+0x40>
 800c70c:	4b1d      	ldr	r3, [pc, #116]	; (800c784 <__pow5mult+0xac>)
 800c70e:	481e      	ldr	r0, [pc, #120]	; (800c788 <__pow5mult+0xb0>)
 800c710:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c714:	f000 fdbc 	bl	800d290 <__assert_func>
 800c718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c71c:	6004      	str	r4, [r0, #0]
 800c71e:	60c4      	str	r4, [r0, #12]
 800c720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c728:	b94c      	cbnz	r4, 800c73e <__pow5mult+0x66>
 800c72a:	f240 2171 	movw	r1, #625	; 0x271
 800c72e:	4630      	mov	r0, r6
 800c730:	f7ff ff12 	bl	800c558 <__i2b>
 800c734:	2300      	movs	r3, #0
 800c736:	f8c8 0008 	str.w	r0, [r8, #8]
 800c73a:	4604      	mov	r4, r0
 800c73c:	6003      	str	r3, [r0, #0]
 800c73e:	f04f 0900 	mov.w	r9, #0
 800c742:	07eb      	lsls	r3, r5, #31
 800c744:	d50a      	bpl.n	800c75c <__pow5mult+0x84>
 800c746:	4639      	mov	r1, r7
 800c748:	4622      	mov	r2, r4
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7ff ff1a 	bl	800c584 <__multiply>
 800c750:	4639      	mov	r1, r7
 800c752:	4680      	mov	r8, r0
 800c754:	4630      	mov	r0, r6
 800c756:	f7ff fe47 	bl	800c3e8 <_Bfree>
 800c75a:	4647      	mov	r7, r8
 800c75c:	106d      	asrs	r5, r5, #1
 800c75e:	d00b      	beq.n	800c778 <__pow5mult+0xa0>
 800c760:	6820      	ldr	r0, [r4, #0]
 800c762:	b938      	cbnz	r0, 800c774 <__pow5mult+0x9c>
 800c764:	4622      	mov	r2, r4
 800c766:	4621      	mov	r1, r4
 800c768:	4630      	mov	r0, r6
 800c76a:	f7ff ff0b 	bl	800c584 <__multiply>
 800c76e:	6020      	str	r0, [r4, #0]
 800c770:	f8c0 9000 	str.w	r9, [r0]
 800c774:	4604      	mov	r4, r0
 800c776:	e7e4      	b.n	800c742 <__pow5mult+0x6a>
 800c778:	4638      	mov	r0, r7
 800c77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c77e:	bf00      	nop
 800c780:	08019d68 	.word	0x08019d68
 800c784:	08019b35 	.word	0x08019b35
 800c788:	08019c18 	.word	0x08019c18

0800c78c <__lshift>:
 800c78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c790:	460c      	mov	r4, r1
 800c792:	6849      	ldr	r1, [r1, #4]
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	4607      	mov	r7, r0
 800c79e:	4691      	mov	r9, r2
 800c7a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7a4:	f108 0601 	add.w	r6, r8, #1
 800c7a8:	42b3      	cmp	r3, r6
 800c7aa:	db0b      	blt.n	800c7c4 <__lshift+0x38>
 800c7ac:	4638      	mov	r0, r7
 800c7ae:	f7ff fddb 	bl	800c368 <_Balloc>
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	b948      	cbnz	r0, 800c7ca <__lshift+0x3e>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	4b2a      	ldr	r3, [pc, #168]	; (800c864 <__lshift+0xd8>)
 800c7ba:	482b      	ldr	r0, [pc, #172]	; (800c868 <__lshift+0xdc>)
 800c7bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7c0:	f000 fd66 	bl	800d290 <__assert_func>
 800c7c4:	3101      	adds	r1, #1
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	e7ee      	b.n	800c7a8 <__lshift+0x1c>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f100 0114 	add.w	r1, r0, #20
 800c7d0:	f100 0210 	add.w	r2, r0, #16
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	4553      	cmp	r3, sl
 800c7d8:	db37      	blt.n	800c84a <__lshift+0xbe>
 800c7da:	6920      	ldr	r0, [r4, #16]
 800c7dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7e0:	f104 0314 	add.w	r3, r4, #20
 800c7e4:	f019 091f 	ands.w	r9, r9, #31
 800c7e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7f0:	d02f      	beq.n	800c852 <__lshift+0xc6>
 800c7f2:	f1c9 0e20 	rsb	lr, r9, #32
 800c7f6:	468a      	mov	sl, r1
 800c7f8:	f04f 0c00 	mov.w	ip, #0
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	fa02 f209 	lsl.w	r2, r2, r9
 800c802:	ea42 020c 	orr.w	r2, r2, ip
 800c806:	f84a 2b04 	str.w	r2, [sl], #4
 800c80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c80e:	4298      	cmp	r0, r3
 800c810:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c814:	d8f2      	bhi.n	800c7fc <__lshift+0x70>
 800c816:	1b03      	subs	r3, r0, r4
 800c818:	3b15      	subs	r3, #21
 800c81a:	f023 0303 	bic.w	r3, r3, #3
 800c81e:	3304      	adds	r3, #4
 800c820:	f104 0215 	add.w	r2, r4, #21
 800c824:	4290      	cmp	r0, r2
 800c826:	bf38      	it	cc
 800c828:	2304      	movcc	r3, #4
 800c82a:	f841 c003 	str.w	ip, [r1, r3]
 800c82e:	f1bc 0f00 	cmp.w	ip, #0
 800c832:	d001      	beq.n	800c838 <__lshift+0xac>
 800c834:	f108 0602 	add.w	r6, r8, #2
 800c838:	3e01      	subs	r6, #1
 800c83a:	4638      	mov	r0, r7
 800c83c:	612e      	str	r6, [r5, #16]
 800c83e:	4621      	mov	r1, r4
 800c840:	f7ff fdd2 	bl	800c3e8 <_Bfree>
 800c844:	4628      	mov	r0, r5
 800c846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c84e:	3301      	adds	r3, #1
 800c850:	e7c1      	b.n	800c7d6 <__lshift+0x4a>
 800c852:	3904      	subs	r1, #4
 800c854:	f853 2b04 	ldr.w	r2, [r3], #4
 800c858:	f841 2f04 	str.w	r2, [r1, #4]!
 800c85c:	4298      	cmp	r0, r3
 800c85e:	d8f9      	bhi.n	800c854 <__lshift+0xc8>
 800c860:	e7ea      	b.n	800c838 <__lshift+0xac>
 800c862:	bf00      	nop
 800c864:	08019ba7 	.word	0x08019ba7
 800c868:	08019c18 	.word	0x08019c18

0800c86c <__mcmp>:
 800c86c:	b530      	push	{r4, r5, lr}
 800c86e:	6902      	ldr	r2, [r0, #16]
 800c870:	690c      	ldr	r4, [r1, #16]
 800c872:	1b12      	subs	r2, r2, r4
 800c874:	d10e      	bne.n	800c894 <__mcmp+0x28>
 800c876:	f100 0314 	add.w	r3, r0, #20
 800c87a:	3114      	adds	r1, #20
 800c87c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c884:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c888:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c88c:	42a5      	cmp	r5, r4
 800c88e:	d003      	beq.n	800c898 <__mcmp+0x2c>
 800c890:	d305      	bcc.n	800c89e <__mcmp+0x32>
 800c892:	2201      	movs	r2, #1
 800c894:	4610      	mov	r0, r2
 800c896:	bd30      	pop	{r4, r5, pc}
 800c898:	4283      	cmp	r3, r0
 800c89a:	d3f3      	bcc.n	800c884 <__mcmp+0x18>
 800c89c:	e7fa      	b.n	800c894 <__mcmp+0x28>
 800c89e:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a2:	e7f7      	b.n	800c894 <__mcmp+0x28>

0800c8a4 <__mdiff>:
 800c8a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	4690      	mov	r8, r2
 800c8b2:	f7ff ffdb 	bl	800c86c <__mcmp>
 800c8b6:	1e05      	subs	r5, r0, #0
 800c8b8:	d110      	bne.n	800c8dc <__mdiff+0x38>
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7ff fd53 	bl	800c368 <_Balloc>
 800c8c2:	b930      	cbnz	r0, 800c8d2 <__mdiff+0x2e>
 800c8c4:	4b3a      	ldr	r3, [pc, #232]	; (800c9b0 <__mdiff+0x10c>)
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	f240 2132 	movw	r1, #562	; 0x232
 800c8cc:	4839      	ldr	r0, [pc, #228]	; (800c9b4 <__mdiff+0x110>)
 800c8ce:	f000 fcdf 	bl	800d290 <__assert_func>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8dc:	bfa4      	itt	ge
 800c8de:	4643      	movge	r3, r8
 800c8e0:	46a0      	movge	r8, r4
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8e8:	bfa6      	itte	ge
 800c8ea:	461c      	movge	r4, r3
 800c8ec:	2500      	movge	r5, #0
 800c8ee:	2501      	movlt	r5, #1
 800c8f0:	f7ff fd3a 	bl	800c368 <_Balloc>
 800c8f4:	b920      	cbnz	r0, 800c900 <__mdiff+0x5c>
 800c8f6:	4b2e      	ldr	r3, [pc, #184]	; (800c9b0 <__mdiff+0x10c>)
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8fe:	e7e5      	b.n	800c8cc <__mdiff+0x28>
 800c900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c904:	6926      	ldr	r6, [r4, #16]
 800c906:	60c5      	str	r5, [r0, #12]
 800c908:	f104 0914 	add.w	r9, r4, #20
 800c90c:	f108 0514 	add.w	r5, r8, #20
 800c910:	f100 0e14 	add.w	lr, r0, #20
 800c914:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c91c:	f108 0210 	add.w	r2, r8, #16
 800c920:	46f2      	mov	sl, lr
 800c922:	2100      	movs	r1, #0
 800c924:	f859 3b04 	ldr.w	r3, [r9], #4
 800c928:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c92c:	fa1f f883 	uxth.w	r8, r3
 800c930:	fa11 f18b 	uxtah	r1, r1, fp
 800c934:	0c1b      	lsrs	r3, r3, #16
 800c936:	eba1 0808 	sub.w	r8, r1, r8
 800c93a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c93e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c942:	fa1f f888 	uxth.w	r8, r8
 800c946:	1419      	asrs	r1, r3, #16
 800c948:	454e      	cmp	r6, r9
 800c94a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c94e:	f84a 3b04 	str.w	r3, [sl], #4
 800c952:	d8e7      	bhi.n	800c924 <__mdiff+0x80>
 800c954:	1b33      	subs	r3, r6, r4
 800c956:	3b15      	subs	r3, #21
 800c958:	f023 0303 	bic.w	r3, r3, #3
 800c95c:	3304      	adds	r3, #4
 800c95e:	3415      	adds	r4, #21
 800c960:	42a6      	cmp	r6, r4
 800c962:	bf38      	it	cc
 800c964:	2304      	movcc	r3, #4
 800c966:	441d      	add	r5, r3
 800c968:	4473      	add	r3, lr
 800c96a:	469e      	mov	lr, r3
 800c96c:	462e      	mov	r6, r5
 800c96e:	4566      	cmp	r6, ip
 800c970:	d30e      	bcc.n	800c990 <__mdiff+0xec>
 800c972:	f10c 0203 	add.w	r2, ip, #3
 800c976:	1b52      	subs	r2, r2, r5
 800c978:	f022 0203 	bic.w	r2, r2, #3
 800c97c:	3d03      	subs	r5, #3
 800c97e:	45ac      	cmp	ip, r5
 800c980:	bf38      	it	cc
 800c982:	2200      	movcc	r2, #0
 800c984:	441a      	add	r2, r3
 800c986:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c98a:	b17b      	cbz	r3, 800c9ac <__mdiff+0x108>
 800c98c:	6107      	str	r7, [r0, #16]
 800c98e:	e7a3      	b.n	800c8d8 <__mdiff+0x34>
 800c990:	f856 8b04 	ldr.w	r8, [r6], #4
 800c994:	fa11 f288 	uxtah	r2, r1, r8
 800c998:	1414      	asrs	r4, r2, #16
 800c99a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c99e:	b292      	uxth	r2, r2
 800c9a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9a4:	f84e 2b04 	str.w	r2, [lr], #4
 800c9a8:	1421      	asrs	r1, r4, #16
 800c9aa:	e7e0      	b.n	800c96e <__mdiff+0xca>
 800c9ac:	3f01      	subs	r7, #1
 800c9ae:	e7ea      	b.n	800c986 <__mdiff+0xe2>
 800c9b0:	08019ba7 	.word	0x08019ba7
 800c9b4:	08019c18 	.word	0x08019c18

0800c9b8 <__d2b>:
 800c9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9bc:	4689      	mov	r9, r1
 800c9be:	2101      	movs	r1, #1
 800c9c0:	ec57 6b10 	vmov	r6, r7, d0
 800c9c4:	4690      	mov	r8, r2
 800c9c6:	f7ff fccf 	bl	800c368 <_Balloc>
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	b930      	cbnz	r0, 800c9dc <__d2b+0x24>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	4b25      	ldr	r3, [pc, #148]	; (800ca68 <__d2b+0xb0>)
 800c9d2:	4826      	ldr	r0, [pc, #152]	; (800ca6c <__d2b+0xb4>)
 800c9d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c9d8:	f000 fc5a 	bl	800d290 <__assert_func>
 800c9dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9e4:	bb35      	cbnz	r5, 800ca34 <__d2b+0x7c>
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	d028      	beq.n	800ca3e <__d2b+0x86>
 800c9ec:	4668      	mov	r0, sp
 800c9ee:	9600      	str	r6, [sp, #0]
 800c9f0:	f7ff fd82 	bl	800c4f8 <__lo0bits>
 800c9f4:	9900      	ldr	r1, [sp, #0]
 800c9f6:	b300      	cbz	r0, 800ca3a <__d2b+0x82>
 800c9f8:	9a01      	ldr	r2, [sp, #4]
 800c9fa:	f1c0 0320 	rsb	r3, r0, #32
 800c9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800ca02:	430b      	orrs	r3, r1
 800ca04:	40c2      	lsrs	r2, r0
 800ca06:	6163      	str	r3, [r4, #20]
 800ca08:	9201      	str	r2, [sp, #4]
 800ca0a:	9b01      	ldr	r3, [sp, #4]
 800ca0c:	61a3      	str	r3, [r4, #24]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	bf14      	ite	ne
 800ca12:	2202      	movne	r2, #2
 800ca14:	2201      	moveq	r2, #1
 800ca16:	6122      	str	r2, [r4, #16]
 800ca18:	b1d5      	cbz	r5, 800ca50 <__d2b+0x98>
 800ca1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca1e:	4405      	add	r5, r0
 800ca20:	f8c9 5000 	str.w	r5, [r9]
 800ca24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca28:	f8c8 0000 	str.w	r0, [r8]
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	b003      	add	sp, #12
 800ca30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca38:	e7d5      	b.n	800c9e6 <__d2b+0x2e>
 800ca3a:	6161      	str	r1, [r4, #20]
 800ca3c:	e7e5      	b.n	800ca0a <__d2b+0x52>
 800ca3e:	a801      	add	r0, sp, #4
 800ca40:	f7ff fd5a 	bl	800c4f8 <__lo0bits>
 800ca44:	9b01      	ldr	r3, [sp, #4]
 800ca46:	6163      	str	r3, [r4, #20]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	6122      	str	r2, [r4, #16]
 800ca4c:	3020      	adds	r0, #32
 800ca4e:	e7e3      	b.n	800ca18 <__d2b+0x60>
 800ca50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca58:	f8c9 0000 	str.w	r0, [r9]
 800ca5c:	6918      	ldr	r0, [r3, #16]
 800ca5e:	f7ff fd2b 	bl	800c4b8 <__hi0bits>
 800ca62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca66:	e7df      	b.n	800ca28 <__d2b+0x70>
 800ca68:	08019ba7 	.word	0x08019ba7
 800ca6c:	08019c18 	.word	0x08019c18

0800ca70 <_calloc_r>:
 800ca70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca72:	fba1 2402 	umull	r2, r4, r1, r2
 800ca76:	b94c      	cbnz	r4, 800ca8c <_calloc_r+0x1c>
 800ca78:	4611      	mov	r1, r2
 800ca7a:	9201      	str	r2, [sp, #4]
 800ca7c:	f7fd ffba 	bl	800a9f4 <_malloc_r>
 800ca80:	9a01      	ldr	r2, [sp, #4]
 800ca82:	4605      	mov	r5, r0
 800ca84:	b930      	cbnz	r0, 800ca94 <_calloc_r+0x24>
 800ca86:	4628      	mov	r0, r5
 800ca88:	b003      	add	sp, #12
 800ca8a:	bd30      	pop	{r4, r5, pc}
 800ca8c:	220c      	movs	r2, #12
 800ca8e:	6002      	str	r2, [r0, #0]
 800ca90:	2500      	movs	r5, #0
 800ca92:	e7f8      	b.n	800ca86 <_calloc_r+0x16>
 800ca94:	4621      	mov	r1, r4
 800ca96:	f7fd ff39 	bl	800a90c <memset>
 800ca9a:	e7f4      	b.n	800ca86 <_calloc_r+0x16>

0800ca9c <_realloc_r>:
 800ca9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa0:	4680      	mov	r8, r0
 800caa2:	4614      	mov	r4, r2
 800caa4:	460e      	mov	r6, r1
 800caa6:	b921      	cbnz	r1, 800cab2 <_realloc_r+0x16>
 800caa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caac:	4611      	mov	r1, r2
 800caae:	f7fd bfa1 	b.w	800a9f4 <_malloc_r>
 800cab2:	b92a      	cbnz	r2, 800cac0 <_realloc_r+0x24>
 800cab4:	f7fd ff32 	bl	800a91c <_free_r>
 800cab8:	4625      	mov	r5, r4
 800caba:	4628      	mov	r0, r5
 800cabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac0:	f000 fd8c 	bl	800d5dc <_malloc_usable_size_r>
 800cac4:	4284      	cmp	r4, r0
 800cac6:	4607      	mov	r7, r0
 800cac8:	d802      	bhi.n	800cad0 <_realloc_r+0x34>
 800caca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cace:	d812      	bhi.n	800caf6 <_realloc_r+0x5a>
 800cad0:	4621      	mov	r1, r4
 800cad2:	4640      	mov	r0, r8
 800cad4:	f7fd ff8e 	bl	800a9f4 <_malloc_r>
 800cad8:	4605      	mov	r5, r0
 800cada:	2800      	cmp	r0, #0
 800cadc:	d0ed      	beq.n	800caba <_realloc_r+0x1e>
 800cade:	42bc      	cmp	r4, r7
 800cae0:	4622      	mov	r2, r4
 800cae2:	4631      	mov	r1, r6
 800cae4:	bf28      	it	cs
 800cae6:	463a      	movcs	r2, r7
 800cae8:	f7fd ff02 	bl	800a8f0 <memcpy>
 800caec:	4631      	mov	r1, r6
 800caee:	4640      	mov	r0, r8
 800caf0:	f7fd ff14 	bl	800a91c <_free_r>
 800caf4:	e7e1      	b.n	800caba <_realloc_r+0x1e>
 800caf6:	4635      	mov	r5, r6
 800caf8:	e7df      	b.n	800caba <_realloc_r+0x1e>

0800cafa <__ssputs_r>:
 800cafa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cafe:	688e      	ldr	r6, [r1, #8]
 800cb00:	429e      	cmp	r6, r3
 800cb02:	4682      	mov	sl, r0
 800cb04:	460c      	mov	r4, r1
 800cb06:	4690      	mov	r8, r2
 800cb08:	461f      	mov	r7, r3
 800cb0a:	d838      	bhi.n	800cb7e <__ssputs_r+0x84>
 800cb0c:	898a      	ldrh	r2, [r1, #12]
 800cb0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb12:	d032      	beq.n	800cb7a <__ssputs_r+0x80>
 800cb14:	6825      	ldr	r5, [r4, #0]
 800cb16:	6909      	ldr	r1, [r1, #16]
 800cb18:	eba5 0901 	sub.w	r9, r5, r1
 800cb1c:	6965      	ldr	r5, [r4, #20]
 800cb1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb26:	3301      	adds	r3, #1
 800cb28:	444b      	add	r3, r9
 800cb2a:	106d      	asrs	r5, r5, #1
 800cb2c:	429d      	cmp	r5, r3
 800cb2e:	bf38      	it	cc
 800cb30:	461d      	movcc	r5, r3
 800cb32:	0553      	lsls	r3, r2, #21
 800cb34:	d531      	bpl.n	800cb9a <__ssputs_r+0xa0>
 800cb36:	4629      	mov	r1, r5
 800cb38:	f7fd ff5c 	bl	800a9f4 <_malloc_r>
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	b950      	cbnz	r0, 800cb56 <__ssputs_r+0x5c>
 800cb40:	230c      	movs	r3, #12
 800cb42:	f8ca 3000 	str.w	r3, [sl]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb56:	6921      	ldr	r1, [r4, #16]
 800cb58:	464a      	mov	r2, r9
 800cb5a:	f7fd fec9 	bl	800a8f0 <memcpy>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb68:	81a3      	strh	r3, [r4, #12]
 800cb6a:	6126      	str	r6, [r4, #16]
 800cb6c:	6165      	str	r5, [r4, #20]
 800cb6e:	444e      	add	r6, r9
 800cb70:	eba5 0509 	sub.w	r5, r5, r9
 800cb74:	6026      	str	r6, [r4, #0]
 800cb76:	60a5      	str	r5, [r4, #8]
 800cb78:	463e      	mov	r6, r7
 800cb7a:	42be      	cmp	r6, r7
 800cb7c:	d900      	bls.n	800cb80 <__ssputs_r+0x86>
 800cb7e:	463e      	mov	r6, r7
 800cb80:	6820      	ldr	r0, [r4, #0]
 800cb82:	4632      	mov	r2, r6
 800cb84:	4641      	mov	r1, r8
 800cb86:	f000 fd0f 	bl	800d5a8 <memmove>
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	1b9b      	subs	r3, r3, r6
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	4433      	add	r3, r6
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	2000      	movs	r0, #0
 800cb98:	e7db      	b.n	800cb52 <__ssputs_r+0x58>
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	f7ff ff7e 	bl	800ca9c <_realloc_r>
 800cba0:	4606      	mov	r6, r0
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d1e1      	bne.n	800cb6a <__ssputs_r+0x70>
 800cba6:	6921      	ldr	r1, [r4, #16]
 800cba8:	4650      	mov	r0, sl
 800cbaa:	f7fd feb7 	bl	800a91c <_free_r>
 800cbae:	e7c7      	b.n	800cb40 <__ssputs_r+0x46>

0800cbb0 <_svfiprintf_r>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	4698      	mov	r8, r3
 800cbb6:	898b      	ldrh	r3, [r1, #12]
 800cbb8:	061b      	lsls	r3, r3, #24
 800cbba:	b09d      	sub	sp, #116	; 0x74
 800cbbc:	4607      	mov	r7, r0
 800cbbe:	460d      	mov	r5, r1
 800cbc0:	4614      	mov	r4, r2
 800cbc2:	d50e      	bpl.n	800cbe2 <_svfiprintf_r+0x32>
 800cbc4:	690b      	ldr	r3, [r1, #16]
 800cbc6:	b963      	cbnz	r3, 800cbe2 <_svfiprintf_r+0x32>
 800cbc8:	2140      	movs	r1, #64	; 0x40
 800cbca:	f7fd ff13 	bl	800a9f4 <_malloc_r>
 800cbce:	6028      	str	r0, [r5, #0]
 800cbd0:	6128      	str	r0, [r5, #16]
 800cbd2:	b920      	cbnz	r0, 800cbde <_svfiprintf_r+0x2e>
 800cbd4:	230c      	movs	r3, #12
 800cbd6:	603b      	str	r3, [r7, #0]
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbdc:	e0d1      	b.n	800cd82 <_svfiprintf_r+0x1d2>
 800cbde:	2340      	movs	r3, #64	; 0x40
 800cbe0:	616b      	str	r3, [r5, #20]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe6:	2320      	movs	r3, #32
 800cbe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbec:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbf0:	2330      	movs	r3, #48	; 0x30
 800cbf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd9c <_svfiprintf_r+0x1ec>
 800cbf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbfa:	f04f 0901 	mov.w	r9, #1
 800cbfe:	4623      	mov	r3, r4
 800cc00:	469a      	mov	sl, r3
 800cc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc06:	b10a      	cbz	r2, 800cc0c <_svfiprintf_r+0x5c>
 800cc08:	2a25      	cmp	r2, #37	; 0x25
 800cc0a:	d1f9      	bne.n	800cc00 <_svfiprintf_r+0x50>
 800cc0c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc10:	d00b      	beq.n	800cc2a <_svfiprintf_r+0x7a>
 800cc12:	465b      	mov	r3, fp
 800cc14:	4622      	mov	r2, r4
 800cc16:	4629      	mov	r1, r5
 800cc18:	4638      	mov	r0, r7
 800cc1a:	f7ff ff6e 	bl	800cafa <__ssputs_r>
 800cc1e:	3001      	adds	r0, #1
 800cc20:	f000 80aa 	beq.w	800cd78 <_svfiprintf_r+0x1c8>
 800cc24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc26:	445a      	add	r2, fp
 800cc28:	9209      	str	r2, [sp, #36]	; 0x24
 800cc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 80a2 	beq.w	800cd78 <_svfiprintf_r+0x1c8>
 800cc34:	2300      	movs	r3, #0
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc3e:	f10a 0a01 	add.w	sl, sl, #1
 800cc42:	9304      	str	r3, [sp, #16]
 800cc44:	9307      	str	r3, [sp, #28]
 800cc46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc4a:	931a      	str	r3, [sp, #104]	; 0x68
 800cc4c:	4654      	mov	r4, sl
 800cc4e:	2205      	movs	r2, #5
 800cc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc54:	4851      	ldr	r0, [pc, #324]	; (800cd9c <_svfiprintf_r+0x1ec>)
 800cc56:	f7f3 fac3 	bl	80001e0 <memchr>
 800cc5a:	9a04      	ldr	r2, [sp, #16]
 800cc5c:	b9d8      	cbnz	r0, 800cc96 <_svfiprintf_r+0xe6>
 800cc5e:	06d0      	lsls	r0, r2, #27
 800cc60:	bf44      	itt	mi
 800cc62:	2320      	movmi	r3, #32
 800cc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc68:	0711      	lsls	r1, r2, #28
 800cc6a:	bf44      	itt	mi
 800cc6c:	232b      	movmi	r3, #43	; 0x2b
 800cc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc72:	f89a 3000 	ldrb.w	r3, [sl]
 800cc76:	2b2a      	cmp	r3, #42	; 0x2a
 800cc78:	d015      	beq.n	800cca6 <_svfiprintf_r+0xf6>
 800cc7a:	9a07      	ldr	r2, [sp, #28]
 800cc7c:	4654      	mov	r4, sl
 800cc7e:	2000      	movs	r0, #0
 800cc80:	f04f 0c0a 	mov.w	ip, #10
 800cc84:	4621      	mov	r1, r4
 800cc86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc8a:	3b30      	subs	r3, #48	; 0x30
 800cc8c:	2b09      	cmp	r3, #9
 800cc8e:	d94e      	bls.n	800cd2e <_svfiprintf_r+0x17e>
 800cc90:	b1b0      	cbz	r0, 800ccc0 <_svfiprintf_r+0x110>
 800cc92:	9207      	str	r2, [sp, #28]
 800cc94:	e014      	b.n	800ccc0 <_svfiprintf_r+0x110>
 800cc96:	eba0 0308 	sub.w	r3, r0, r8
 800cc9a:	fa09 f303 	lsl.w	r3, r9, r3
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	9304      	str	r3, [sp, #16]
 800cca2:	46a2      	mov	sl, r4
 800cca4:	e7d2      	b.n	800cc4c <_svfiprintf_r+0x9c>
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	1d19      	adds	r1, r3, #4
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	9103      	str	r1, [sp, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	bfbb      	ittet	lt
 800ccb2:	425b      	neglt	r3, r3
 800ccb4:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb8:	9307      	strge	r3, [sp, #28]
 800ccba:	9307      	strlt	r3, [sp, #28]
 800ccbc:	bfb8      	it	lt
 800ccbe:	9204      	strlt	r2, [sp, #16]
 800ccc0:	7823      	ldrb	r3, [r4, #0]
 800ccc2:	2b2e      	cmp	r3, #46	; 0x2e
 800ccc4:	d10c      	bne.n	800cce0 <_svfiprintf_r+0x130>
 800ccc6:	7863      	ldrb	r3, [r4, #1]
 800ccc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccca:	d135      	bne.n	800cd38 <_svfiprintf_r+0x188>
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	1d1a      	adds	r2, r3, #4
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	9203      	str	r2, [sp, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfb8      	it	lt
 800ccd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccdc:	3402      	adds	r4, #2
 800ccde:	9305      	str	r3, [sp, #20]
 800cce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cdac <_svfiprintf_r+0x1fc>
 800cce4:	7821      	ldrb	r1, [r4, #0]
 800cce6:	2203      	movs	r2, #3
 800cce8:	4650      	mov	r0, sl
 800ccea:	f7f3 fa79 	bl	80001e0 <memchr>
 800ccee:	b140      	cbz	r0, 800cd02 <_svfiprintf_r+0x152>
 800ccf0:	2340      	movs	r3, #64	; 0x40
 800ccf2:	eba0 000a 	sub.w	r0, r0, sl
 800ccf6:	fa03 f000 	lsl.w	r0, r3, r0
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	4303      	orrs	r3, r0
 800ccfe:	3401      	adds	r4, #1
 800cd00:	9304      	str	r3, [sp, #16]
 800cd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd06:	4826      	ldr	r0, [pc, #152]	; (800cda0 <_svfiprintf_r+0x1f0>)
 800cd08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd0c:	2206      	movs	r2, #6
 800cd0e:	f7f3 fa67 	bl	80001e0 <memchr>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d038      	beq.n	800cd88 <_svfiprintf_r+0x1d8>
 800cd16:	4b23      	ldr	r3, [pc, #140]	; (800cda4 <_svfiprintf_r+0x1f4>)
 800cd18:	bb1b      	cbnz	r3, 800cd62 <_svfiprintf_r+0x1b2>
 800cd1a:	9b03      	ldr	r3, [sp, #12]
 800cd1c:	3307      	adds	r3, #7
 800cd1e:	f023 0307 	bic.w	r3, r3, #7
 800cd22:	3308      	adds	r3, #8
 800cd24:	9303      	str	r3, [sp, #12]
 800cd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd28:	4433      	add	r3, r6
 800cd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2c:	e767      	b.n	800cbfe <_svfiprintf_r+0x4e>
 800cd2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd32:	460c      	mov	r4, r1
 800cd34:	2001      	movs	r0, #1
 800cd36:	e7a5      	b.n	800cc84 <_svfiprintf_r+0xd4>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	3401      	adds	r4, #1
 800cd3c:	9305      	str	r3, [sp, #20]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	f04f 0c0a 	mov.w	ip, #10
 800cd44:	4620      	mov	r0, r4
 800cd46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd4a:	3a30      	subs	r2, #48	; 0x30
 800cd4c:	2a09      	cmp	r2, #9
 800cd4e:	d903      	bls.n	800cd58 <_svfiprintf_r+0x1a8>
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d0c5      	beq.n	800cce0 <_svfiprintf_r+0x130>
 800cd54:	9105      	str	r1, [sp, #20]
 800cd56:	e7c3      	b.n	800cce0 <_svfiprintf_r+0x130>
 800cd58:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e7f0      	b.n	800cd44 <_svfiprintf_r+0x194>
 800cd62:	ab03      	add	r3, sp, #12
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	462a      	mov	r2, r5
 800cd68:	4b0f      	ldr	r3, [pc, #60]	; (800cda8 <_svfiprintf_r+0x1f8>)
 800cd6a:	a904      	add	r1, sp, #16
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	f7fd ff55 	bl	800ac1c <_printf_float>
 800cd72:	1c42      	adds	r2, r0, #1
 800cd74:	4606      	mov	r6, r0
 800cd76:	d1d6      	bne.n	800cd26 <_svfiprintf_r+0x176>
 800cd78:	89ab      	ldrh	r3, [r5, #12]
 800cd7a:	065b      	lsls	r3, r3, #25
 800cd7c:	f53f af2c 	bmi.w	800cbd8 <_svfiprintf_r+0x28>
 800cd80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd82:	b01d      	add	sp, #116	; 0x74
 800cd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd88:	ab03      	add	r3, sp, #12
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	462a      	mov	r2, r5
 800cd8e:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <_svfiprintf_r+0x1f8>)
 800cd90:	a904      	add	r1, sp, #16
 800cd92:	4638      	mov	r0, r7
 800cd94:	f7fe f9e6 	bl	800b164 <_printf_i>
 800cd98:	e7eb      	b.n	800cd72 <_svfiprintf_r+0x1c2>
 800cd9a:	bf00      	nop
 800cd9c:	08019d74 	.word	0x08019d74
 800cda0:	08019d7e 	.word	0x08019d7e
 800cda4:	0800ac1d 	.word	0x0800ac1d
 800cda8:	0800cafb 	.word	0x0800cafb
 800cdac:	08019d7a 	.word	0x08019d7a

0800cdb0 <__sfputc_r>:
 800cdb0:	6893      	ldr	r3, [r2, #8]
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	b410      	push	{r4}
 800cdb8:	6093      	str	r3, [r2, #8]
 800cdba:	da08      	bge.n	800cdce <__sfputc_r+0x1e>
 800cdbc:	6994      	ldr	r4, [r2, #24]
 800cdbe:	42a3      	cmp	r3, r4
 800cdc0:	db01      	blt.n	800cdc6 <__sfputc_r+0x16>
 800cdc2:	290a      	cmp	r1, #10
 800cdc4:	d103      	bne.n	800cdce <__sfputc_r+0x1e>
 800cdc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdca:	f000 b98f 	b.w	800d0ec <__swbuf_r>
 800cdce:	6813      	ldr	r3, [r2, #0]
 800cdd0:	1c58      	adds	r0, r3, #1
 800cdd2:	6010      	str	r0, [r2, #0]
 800cdd4:	7019      	strb	r1, [r3, #0]
 800cdd6:	4608      	mov	r0, r1
 800cdd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <__sfputs_r>:
 800cdde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde0:	4606      	mov	r6, r0
 800cde2:	460f      	mov	r7, r1
 800cde4:	4614      	mov	r4, r2
 800cde6:	18d5      	adds	r5, r2, r3
 800cde8:	42ac      	cmp	r4, r5
 800cdea:	d101      	bne.n	800cdf0 <__sfputs_r+0x12>
 800cdec:	2000      	movs	r0, #0
 800cdee:	e007      	b.n	800ce00 <__sfputs_r+0x22>
 800cdf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf4:	463a      	mov	r2, r7
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7ff ffda 	bl	800cdb0 <__sfputc_r>
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	d1f3      	bne.n	800cde8 <__sfputs_r+0xa>
 800ce00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce04 <_vfiprintf_r>:
 800ce04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce08:	460d      	mov	r5, r1
 800ce0a:	b09d      	sub	sp, #116	; 0x74
 800ce0c:	4614      	mov	r4, r2
 800ce0e:	4698      	mov	r8, r3
 800ce10:	4606      	mov	r6, r0
 800ce12:	b118      	cbz	r0, 800ce1c <_vfiprintf_r+0x18>
 800ce14:	6983      	ldr	r3, [r0, #24]
 800ce16:	b90b      	cbnz	r3, 800ce1c <_vfiprintf_r+0x18>
 800ce18:	f7ff f9f4 	bl	800c204 <__sinit>
 800ce1c:	4b89      	ldr	r3, [pc, #548]	; (800d044 <_vfiprintf_r+0x240>)
 800ce1e:	429d      	cmp	r5, r3
 800ce20:	d11b      	bne.n	800ce5a <_vfiprintf_r+0x56>
 800ce22:	6875      	ldr	r5, [r6, #4]
 800ce24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce26:	07d9      	lsls	r1, r3, #31
 800ce28:	d405      	bmi.n	800ce36 <_vfiprintf_r+0x32>
 800ce2a:	89ab      	ldrh	r3, [r5, #12]
 800ce2c:	059a      	lsls	r2, r3, #22
 800ce2e:	d402      	bmi.n	800ce36 <_vfiprintf_r+0x32>
 800ce30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce32:	f7ff fa8a 	bl	800c34a <__retarget_lock_acquire_recursive>
 800ce36:	89ab      	ldrh	r3, [r5, #12]
 800ce38:	071b      	lsls	r3, r3, #28
 800ce3a:	d501      	bpl.n	800ce40 <_vfiprintf_r+0x3c>
 800ce3c:	692b      	ldr	r3, [r5, #16]
 800ce3e:	b9eb      	cbnz	r3, 800ce7c <_vfiprintf_r+0x78>
 800ce40:	4629      	mov	r1, r5
 800ce42:	4630      	mov	r0, r6
 800ce44:	f000 f9b6 	bl	800d1b4 <__swsetup_r>
 800ce48:	b1c0      	cbz	r0, 800ce7c <_vfiprintf_r+0x78>
 800ce4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce4c:	07dc      	lsls	r4, r3, #31
 800ce4e:	d50e      	bpl.n	800ce6e <_vfiprintf_r+0x6a>
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	b01d      	add	sp, #116	; 0x74
 800ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5a:	4b7b      	ldr	r3, [pc, #492]	; (800d048 <_vfiprintf_r+0x244>)
 800ce5c:	429d      	cmp	r5, r3
 800ce5e:	d101      	bne.n	800ce64 <_vfiprintf_r+0x60>
 800ce60:	68b5      	ldr	r5, [r6, #8]
 800ce62:	e7df      	b.n	800ce24 <_vfiprintf_r+0x20>
 800ce64:	4b79      	ldr	r3, [pc, #484]	; (800d04c <_vfiprintf_r+0x248>)
 800ce66:	429d      	cmp	r5, r3
 800ce68:	bf08      	it	eq
 800ce6a:	68f5      	ldreq	r5, [r6, #12]
 800ce6c:	e7da      	b.n	800ce24 <_vfiprintf_r+0x20>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	0598      	lsls	r0, r3, #22
 800ce72:	d4ed      	bmi.n	800ce50 <_vfiprintf_r+0x4c>
 800ce74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce76:	f7ff fa69 	bl	800c34c <__retarget_lock_release_recursive>
 800ce7a:	e7e9      	b.n	800ce50 <_vfiprintf_r+0x4c>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce80:	2320      	movs	r3, #32
 800ce82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce8a:	2330      	movs	r3, #48	; 0x30
 800ce8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d050 <_vfiprintf_r+0x24c>
 800ce90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce94:	f04f 0901 	mov.w	r9, #1
 800ce98:	4623      	mov	r3, r4
 800ce9a:	469a      	mov	sl, r3
 800ce9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cea0:	b10a      	cbz	r2, 800cea6 <_vfiprintf_r+0xa2>
 800cea2:	2a25      	cmp	r2, #37	; 0x25
 800cea4:	d1f9      	bne.n	800ce9a <_vfiprintf_r+0x96>
 800cea6:	ebba 0b04 	subs.w	fp, sl, r4
 800ceaa:	d00b      	beq.n	800cec4 <_vfiprintf_r+0xc0>
 800ceac:	465b      	mov	r3, fp
 800ceae:	4622      	mov	r2, r4
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7ff ff93 	bl	800cdde <__sfputs_r>
 800ceb8:	3001      	adds	r0, #1
 800ceba:	f000 80aa 	beq.w	800d012 <_vfiprintf_r+0x20e>
 800cebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cec0:	445a      	add	r2, fp
 800cec2:	9209      	str	r2, [sp, #36]	; 0x24
 800cec4:	f89a 3000 	ldrb.w	r3, [sl]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 80a2 	beq.w	800d012 <_vfiprintf_r+0x20e>
 800cece:	2300      	movs	r3, #0
 800ced0:	f04f 32ff 	mov.w	r2, #4294967295
 800ced4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced8:	f10a 0a01 	add.w	sl, sl, #1
 800cedc:	9304      	str	r3, [sp, #16]
 800cede:	9307      	str	r3, [sp, #28]
 800cee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cee4:	931a      	str	r3, [sp, #104]	; 0x68
 800cee6:	4654      	mov	r4, sl
 800cee8:	2205      	movs	r2, #5
 800ceea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceee:	4858      	ldr	r0, [pc, #352]	; (800d050 <_vfiprintf_r+0x24c>)
 800cef0:	f7f3 f976 	bl	80001e0 <memchr>
 800cef4:	9a04      	ldr	r2, [sp, #16]
 800cef6:	b9d8      	cbnz	r0, 800cf30 <_vfiprintf_r+0x12c>
 800cef8:	06d1      	lsls	r1, r2, #27
 800cefa:	bf44      	itt	mi
 800cefc:	2320      	movmi	r3, #32
 800cefe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf02:	0713      	lsls	r3, r2, #28
 800cf04:	bf44      	itt	mi
 800cf06:	232b      	movmi	r3, #43	; 0x2b
 800cf08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf10:	2b2a      	cmp	r3, #42	; 0x2a
 800cf12:	d015      	beq.n	800cf40 <_vfiprintf_r+0x13c>
 800cf14:	9a07      	ldr	r2, [sp, #28]
 800cf16:	4654      	mov	r4, sl
 800cf18:	2000      	movs	r0, #0
 800cf1a:	f04f 0c0a 	mov.w	ip, #10
 800cf1e:	4621      	mov	r1, r4
 800cf20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf24:	3b30      	subs	r3, #48	; 0x30
 800cf26:	2b09      	cmp	r3, #9
 800cf28:	d94e      	bls.n	800cfc8 <_vfiprintf_r+0x1c4>
 800cf2a:	b1b0      	cbz	r0, 800cf5a <_vfiprintf_r+0x156>
 800cf2c:	9207      	str	r2, [sp, #28]
 800cf2e:	e014      	b.n	800cf5a <_vfiprintf_r+0x156>
 800cf30:	eba0 0308 	sub.w	r3, r0, r8
 800cf34:	fa09 f303 	lsl.w	r3, r9, r3
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	46a2      	mov	sl, r4
 800cf3e:	e7d2      	b.n	800cee6 <_vfiprintf_r+0xe2>
 800cf40:	9b03      	ldr	r3, [sp, #12]
 800cf42:	1d19      	adds	r1, r3, #4
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	9103      	str	r1, [sp, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bfbb      	ittet	lt
 800cf4c:	425b      	neglt	r3, r3
 800cf4e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf52:	9307      	strge	r3, [sp, #28]
 800cf54:	9307      	strlt	r3, [sp, #28]
 800cf56:	bfb8      	it	lt
 800cf58:	9204      	strlt	r2, [sp, #16]
 800cf5a:	7823      	ldrb	r3, [r4, #0]
 800cf5c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf5e:	d10c      	bne.n	800cf7a <_vfiprintf_r+0x176>
 800cf60:	7863      	ldrb	r3, [r4, #1]
 800cf62:	2b2a      	cmp	r3, #42	; 0x2a
 800cf64:	d135      	bne.n	800cfd2 <_vfiprintf_r+0x1ce>
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	1d1a      	adds	r2, r3, #4
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	9203      	str	r2, [sp, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	bfb8      	it	lt
 800cf72:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf76:	3402      	adds	r4, #2
 800cf78:	9305      	str	r3, [sp, #20]
 800cf7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d060 <_vfiprintf_r+0x25c>
 800cf7e:	7821      	ldrb	r1, [r4, #0]
 800cf80:	2203      	movs	r2, #3
 800cf82:	4650      	mov	r0, sl
 800cf84:	f7f3 f92c 	bl	80001e0 <memchr>
 800cf88:	b140      	cbz	r0, 800cf9c <_vfiprintf_r+0x198>
 800cf8a:	2340      	movs	r3, #64	; 0x40
 800cf8c:	eba0 000a 	sub.w	r0, r0, sl
 800cf90:	fa03 f000 	lsl.w	r0, r3, r0
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	4303      	orrs	r3, r0
 800cf98:	3401      	adds	r4, #1
 800cf9a:	9304      	str	r3, [sp, #16]
 800cf9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa0:	482c      	ldr	r0, [pc, #176]	; (800d054 <_vfiprintf_r+0x250>)
 800cfa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfa6:	2206      	movs	r2, #6
 800cfa8:	f7f3 f91a 	bl	80001e0 <memchr>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d03f      	beq.n	800d030 <_vfiprintf_r+0x22c>
 800cfb0:	4b29      	ldr	r3, [pc, #164]	; (800d058 <_vfiprintf_r+0x254>)
 800cfb2:	bb1b      	cbnz	r3, 800cffc <_vfiprintf_r+0x1f8>
 800cfb4:	9b03      	ldr	r3, [sp, #12]
 800cfb6:	3307      	adds	r3, #7
 800cfb8:	f023 0307 	bic.w	r3, r3, #7
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	9303      	str	r3, [sp, #12]
 800cfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc2:	443b      	add	r3, r7
 800cfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc6:	e767      	b.n	800ce98 <_vfiprintf_r+0x94>
 800cfc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfcc:	460c      	mov	r4, r1
 800cfce:	2001      	movs	r0, #1
 800cfd0:	e7a5      	b.n	800cf1e <_vfiprintf_r+0x11a>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	3401      	adds	r4, #1
 800cfd6:	9305      	str	r3, [sp, #20]
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f04f 0c0a 	mov.w	ip, #10
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfe4:	3a30      	subs	r2, #48	; 0x30
 800cfe6:	2a09      	cmp	r2, #9
 800cfe8:	d903      	bls.n	800cff2 <_vfiprintf_r+0x1ee>
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d0c5      	beq.n	800cf7a <_vfiprintf_r+0x176>
 800cfee:	9105      	str	r1, [sp, #20]
 800cff0:	e7c3      	b.n	800cf7a <_vfiprintf_r+0x176>
 800cff2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cff6:	4604      	mov	r4, r0
 800cff8:	2301      	movs	r3, #1
 800cffa:	e7f0      	b.n	800cfde <_vfiprintf_r+0x1da>
 800cffc:	ab03      	add	r3, sp, #12
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	462a      	mov	r2, r5
 800d002:	4b16      	ldr	r3, [pc, #88]	; (800d05c <_vfiprintf_r+0x258>)
 800d004:	a904      	add	r1, sp, #16
 800d006:	4630      	mov	r0, r6
 800d008:	f7fd fe08 	bl	800ac1c <_printf_float>
 800d00c:	4607      	mov	r7, r0
 800d00e:	1c78      	adds	r0, r7, #1
 800d010:	d1d6      	bne.n	800cfc0 <_vfiprintf_r+0x1bc>
 800d012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d014:	07d9      	lsls	r1, r3, #31
 800d016:	d405      	bmi.n	800d024 <_vfiprintf_r+0x220>
 800d018:	89ab      	ldrh	r3, [r5, #12]
 800d01a:	059a      	lsls	r2, r3, #22
 800d01c:	d402      	bmi.n	800d024 <_vfiprintf_r+0x220>
 800d01e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d020:	f7ff f994 	bl	800c34c <__retarget_lock_release_recursive>
 800d024:	89ab      	ldrh	r3, [r5, #12]
 800d026:	065b      	lsls	r3, r3, #25
 800d028:	f53f af12 	bmi.w	800ce50 <_vfiprintf_r+0x4c>
 800d02c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d02e:	e711      	b.n	800ce54 <_vfiprintf_r+0x50>
 800d030:	ab03      	add	r3, sp, #12
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	462a      	mov	r2, r5
 800d036:	4b09      	ldr	r3, [pc, #36]	; (800d05c <_vfiprintf_r+0x258>)
 800d038:	a904      	add	r1, sp, #16
 800d03a:	4630      	mov	r0, r6
 800d03c:	f7fe f892 	bl	800b164 <_printf_i>
 800d040:	e7e4      	b.n	800d00c <_vfiprintf_r+0x208>
 800d042:	bf00      	nop
 800d044:	08019bd8 	.word	0x08019bd8
 800d048:	08019bf8 	.word	0x08019bf8
 800d04c:	08019bb8 	.word	0x08019bb8
 800d050:	08019d74 	.word	0x08019d74
 800d054:	08019d7e 	.word	0x08019d7e
 800d058:	0800ac1d 	.word	0x0800ac1d
 800d05c:	0800cddf 	.word	0x0800cddf
 800d060:	08019d7a 	.word	0x08019d7a

0800d064 <__sread>:
 800d064:	b510      	push	{r4, lr}
 800d066:	460c      	mov	r4, r1
 800d068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06c:	f000 fabe 	bl	800d5ec <_read_r>
 800d070:	2800      	cmp	r0, #0
 800d072:	bfab      	itete	ge
 800d074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d076:	89a3      	ldrhlt	r3, [r4, #12]
 800d078:	181b      	addge	r3, r3, r0
 800d07a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d07e:	bfac      	ite	ge
 800d080:	6563      	strge	r3, [r4, #84]	; 0x54
 800d082:	81a3      	strhlt	r3, [r4, #12]
 800d084:	bd10      	pop	{r4, pc}

0800d086 <__swrite>:
 800d086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08a:	461f      	mov	r7, r3
 800d08c:	898b      	ldrh	r3, [r1, #12]
 800d08e:	05db      	lsls	r3, r3, #23
 800d090:	4605      	mov	r5, r0
 800d092:	460c      	mov	r4, r1
 800d094:	4616      	mov	r6, r2
 800d096:	d505      	bpl.n	800d0a4 <__swrite+0x1e>
 800d098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d09c:	2302      	movs	r3, #2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f000 f9f8 	bl	800d494 <_lseek_r>
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0ae:	81a3      	strh	r3, [r4, #12]
 800d0b0:	4632      	mov	r2, r6
 800d0b2:	463b      	mov	r3, r7
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	f000 b869 	b.w	800d190 <_write_r>

0800d0be <__sseek>:
 800d0be:	b510      	push	{r4, lr}
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c6:	f000 f9e5 	bl	800d494 <_lseek_r>
 800d0ca:	1c43      	adds	r3, r0, #1
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	bf15      	itete	ne
 800d0d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0da:	81a3      	strheq	r3, [r4, #12]
 800d0dc:	bf18      	it	ne
 800d0de:	81a3      	strhne	r3, [r4, #12]
 800d0e0:	bd10      	pop	{r4, pc}

0800d0e2 <__sclose>:
 800d0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e6:	f000 b8f1 	b.w	800d2cc <_close_r>
	...

0800d0ec <__swbuf_r>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	460e      	mov	r6, r1
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	b118      	cbz	r0, 800d0fe <__swbuf_r+0x12>
 800d0f6:	6983      	ldr	r3, [r0, #24]
 800d0f8:	b90b      	cbnz	r3, 800d0fe <__swbuf_r+0x12>
 800d0fa:	f7ff f883 	bl	800c204 <__sinit>
 800d0fe:	4b21      	ldr	r3, [pc, #132]	; (800d184 <__swbuf_r+0x98>)
 800d100:	429c      	cmp	r4, r3
 800d102:	d12b      	bne.n	800d15c <__swbuf_r+0x70>
 800d104:	686c      	ldr	r4, [r5, #4]
 800d106:	69a3      	ldr	r3, [r4, #24]
 800d108:	60a3      	str	r3, [r4, #8]
 800d10a:	89a3      	ldrh	r3, [r4, #12]
 800d10c:	071a      	lsls	r2, r3, #28
 800d10e:	d52f      	bpl.n	800d170 <__swbuf_r+0x84>
 800d110:	6923      	ldr	r3, [r4, #16]
 800d112:	b36b      	cbz	r3, 800d170 <__swbuf_r+0x84>
 800d114:	6923      	ldr	r3, [r4, #16]
 800d116:	6820      	ldr	r0, [r4, #0]
 800d118:	1ac0      	subs	r0, r0, r3
 800d11a:	6963      	ldr	r3, [r4, #20]
 800d11c:	b2f6      	uxtb	r6, r6
 800d11e:	4283      	cmp	r3, r0
 800d120:	4637      	mov	r7, r6
 800d122:	dc04      	bgt.n	800d12e <__swbuf_r+0x42>
 800d124:	4621      	mov	r1, r4
 800d126:	4628      	mov	r0, r5
 800d128:	f000 f966 	bl	800d3f8 <_fflush_r>
 800d12c:	bb30      	cbnz	r0, 800d17c <__swbuf_r+0x90>
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	3b01      	subs	r3, #1
 800d132:	60a3      	str	r3, [r4, #8]
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	1c5a      	adds	r2, r3, #1
 800d138:	6022      	str	r2, [r4, #0]
 800d13a:	701e      	strb	r6, [r3, #0]
 800d13c:	6963      	ldr	r3, [r4, #20]
 800d13e:	3001      	adds	r0, #1
 800d140:	4283      	cmp	r3, r0
 800d142:	d004      	beq.n	800d14e <__swbuf_r+0x62>
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	07db      	lsls	r3, r3, #31
 800d148:	d506      	bpl.n	800d158 <__swbuf_r+0x6c>
 800d14a:	2e0a      	cmp	r6, #10
 800d14c:	d104      	bne.n	800d158 <__swbuf_r+0x6c>
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	f000 f951 	bl	800d3f8 <_fflush_r>
 800d156:	b988      	cbnz	r0, 800d17c <__swbuf_r+0x90>
 800d158:	4638      	mov	r0, r7
 800d15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d15c:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <__swbuf_r+0x9c>)
 800d15e:	429c      	cmp	r4, r3
 800d160:	d101      	bne.n	800d166 <__swbuf_r+0x7a>
 800d162:	68ac      	ldr	r4, [r5, #8]
 800d164:	e7cf      	b.n	800d106 <__swbuf_r+0x1a>
 800d166:	4b09      	ldr	r3, [pc, #36]	; (800d18c <__swbuf_r+0xa0>)
 800d168:	429c      	cmp	r4, r3
 800d16a:	bf08      	it	eq
 800d16c:	68ec      	ldreq	r4, [r5, #12]
 800d16e:	e7ca      	b.n	800d106 <__swbuf_r+0x1a>
 800d170:	4621      	mov	r1, r4
 800d172:	4628      	mov	r0, r5
 800d174:	f000 f81e 	bl	800d1b4 <__swsetup_r>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d0cb      	beq.n	800d114 <__swbuf_r+0x28>
 800d17c:	f04f 37ff 	mov.w	r7, #4294967295
 800d180:	e7ea      	b.n	800d158 <__swbuf_r+0x6c>
 800d182:	bf00      	nop
 800d184:	08019bd8 	.word	0x08019bd8
 800d188:	08019bf8 	.word	0x08019bf8
 800d18c:	08019bb8 	.word	0x08019bb8

0800d190 <_write_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	; (800d1b0 <_write_r+0x20>)
 800d194:	4604      	mov	r4, r0
 800d196:	4608      	mov	r0, r1
 800d198:	4611      	mov	r1, r2
 800d19a:	2200      	movs	r2, #0
 800d19c:	602a      	str	r2, [r5, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	f000 fc1c 	bl	800d9dc <_write>
 800d1a4:	1c43      	adds	r3, r0, #1
 800d1a6:	d102      	bne.n	800d1ae <_write_r+0x1e>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	b103      	cbz	r3, 800d1ae <_write_r+0x1e>
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	bd38      	pop	{r3, r4, r5, pc}
 800d1b0:	20004050 	.word	0x20004050

0800d1b4 <__swsetup_r>:
 800d1b4:	4b32      	ldr	r3, [pc, #200]	; (800d280 <__swsetup_r+0xcc>)
 800d1b6:	b570      	push	{r4, r5, r6, lr}
 800d1b8:	681d      	ldr	r5, [r3, #0]
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460c      	mov	r4, r1
 800d1be:	b125      	cbz	r5, 800d1ca <__swsetup_r+0x16>
 800d1c0:	69ab      	ldr	r3, [r5, #24]
 800d1c2:	b913      	cbnz	r3, 800d1ca <__swsetup_r+0x16>
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f7ff f81d 	bl	800c204 <__sinit>
 800d1ca:	4b2e      	ldr	r3, [pc, #184]	; (800d284 <__swsetup_r+0xd0>)
 800d1cc:	429c      	cmp	r4, r3
 800d1ce:	d10f      	bne.n	800d1f0 <__swsetup_r+0x3c>
 800d1d0:	686c      	ldr	r4, [r5, #4]
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1d8:	0719      	lsls	r1, r3, #28
 800d1da:	d42c      	bmi.n	800d236 <__swsetup_r+0x82>
 800d1dc:	06dd      	lsls	r5, r3, #27
 800d1de:	d411      	bmi.n	800d204 <__swsetup_r+0x50>
 800d1e0:	2309      	movs	r3, #9
 800d1e2:	6033      	str	r3, [r6, #0]
 800d1e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ee:	e03e      	b.n	800d26e <__swsetup_r+0xba>
 800d1f0:	4b25      	ldr	r3, [pc, #148]	; (800d288 <__swsetup_r+0xd4>)
 800d1f2:	429c      	cmp	r4, r3
 800d1f4:	d101      	bne.n	800d1fa <__swsetup_r+0x46>
 800d1f6:	68ac      	ldr	r4, [r5, #8]
 800d1f8:	e7eb      	b.n	800d1d2 <__swsetup_r+0x1e>
 800d1fa:	4b24      	ldr	r3, [pc, #144]	; (800d28c <__swsetup_r+0xd8>)
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	bf08      	it	eq
 800d200:	68ec      	ldreq	r4, [r5, #12]
 800d202:	e7e6      	b.n	800d1d2 <__swsetup_r+0x1e>
 800d204:	0758      	lsls	r0, r3, #29
 800d206:	d512      	bpl.n	800d22e <__swsetup_r+0x7a>
 800d208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d20a:	b141      	cbz	r1, 800d21e <__swsetup_r+0x6a>
 800d20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d210:	4299      	cmp	r1, r3
 800d212:	d002      	beq.n	800d21a <__swsetup_r+0x66>
 800d214:	4630      	mov	r0, r6
 800d216:	f7fd fb81 	bl	800a91c <_free_r>
 800d21a:	2300      	movs	r3, #0
 800d21c:	6363      	str	r3, [r4, #52]	; 0x34
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d224:	81a3      	strh	r3, [r4, #12]
 800d226:	2300      	movs	r3, #0
 800d228:	6063      	str	r3, [r4, #4]
 800d22a:	6923      	ldr	r3, [r4, #16]
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	f043 0308 	orr.w	r3, r3, #8
 800d234:	81a3      	strh	r3, [r4, #12]
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	b94b      	cbnz	r3, 800d24e <__swsetup_r+0x9a>
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d244:	d003      	beq.n	800d24e <__swsetup_r+0x9a>
 800d246:	4621      	mov	r1, r4
 800d248:	4630      	mov	r0, r6
 800d24a:	f000 f95b 	bl	800d504 <__smakebuf_r>
 800d24e:	89a0      	ldrh	r0, [r4, #12]
 800d250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d254:	f010 0301 	ands.w	r3, r0, #1
 800d258:	d00a      	beq.n	800d270 <__swsetup_r+0xbc>
 800d25a:	2300      	movs	r3, #0
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	6963      	ldr	r3, [r4, #20]
 800d260:	425b      	negs	r3, r3
 800d262:	61a3      	str	r3, [r4, #24]
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	b943      	cbnz	r3, 800d27a <__swsetup_r+0xc6>
 800d268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d26c:	d1ba      	bne.n	800d1e4 <__swsetup_r+0x30>
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	0781      	lsls	r1, r0, #30
 800d272:	bf58      	it	pl
 800d274:	6963      	ldrpl	r3, [r4, #20]
 800d276:	60a3      	str	r3, [r4, #8]
 800d278:	e7f4      	b.n	800d264 <__swsetup_r+0xb0>
 800d27a:	2000      	movs	r0, #0
 800d27c:	e7f7      	b.n	800d26e <__swsetup_r+0xba>
 800d27e:	bf00      	nop
 800d280:	20000874 	.word	0x20000874
 800d284:	08019bd8 	.word	0x08019bd8
 800d288:	08019bf8 	.word	0x08019bf8
 800d28c:	08019bb8 	.word	0x08019bb8

0800d290 <__assert_func>:
 800d290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d292:	4614      	mov	r4, r2
 800d294:	461a      	mov	r2, r3
 800d296:	4b09      	ldr	r3, [pc, #36]	; (800d2bc <__assert_func+0x2c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4605      	mov	r5, r0
 800d29c:	68d8      	ldr	r0, [r3, #12]
 800d29e:	b14c      	cbz	r4, 800d2b4 <__assert_func+0x24>
 800d2a0:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <__assert_func+0x30>)
 800d2a2:	9100      	str	r1, [sp, #0]
 800d2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2a8:	4906      	ldr	r1, [pc, #24]	; (800d2c4 <__assert_func+0x34>)
 800d2aa:	462b      	mov	r3, r5
 800d2ac:	f000 f8e0 	bl	800d470 <fiprintf>
 800d2b0:	f000 f9bb 	bl	800d62a <abort>
 800d2b4:	4b04      	ldr	r3, [pc, #16]	; (800d2c8 <__assert_func+0x38>)
 800d2b6:	461c      	mov	r4, r3
 800d2b8:	e7f3      	b.n	800d2a2 <__assert_func+0x12>
 800d2ba:	bf00      	nop
 800d2bc:	20000874 	.word	0x20000874
 800d2c0:	08019d85 	.word	0x08019d85
 800d2c4:	08019d92 	.word	0x08019d92
 800d2c8:	08019dc0 	.word	0x08019dc0

0800d2cc <_close_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d06      	ldr	r5, [pc, #24]	; (800d2e8 <_close_r+0x1c>)
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	f000 fb48 	bl	800d96c <_close>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_close_r+0x1a>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_close_r+0x1a>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	20004050 	.word	0x20004050

0800d2ec <__sflush_r>:
 800d2ec:	898a      	ldrh	r2, [r1, #12]
 800d2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	0710      	lsls	r0, r2, #28
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	d458      	bmi.n	800d3ac <__sflush_r+0xc0>
 800d2fa:	684b      	ldr	r3, [r1, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	dc05      	bgt.n	800d30c <__sflush_r+0x20>
 800d300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d302:	2b00      	cmp	r3, #0
 800d304:	dc02      	bgt.n	800d30c <__sflush_r+0x20>
 800d306:	2000      	movs	r0, #0
 800d308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d30e:	2e00      	cmp	r6, #0
 800d310:	d0f9      	beq.n	800d306 <__sflush_r+0x1a>
 800d312:	2300      	movs	r3, #0
 800d314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d318:	682f      	ldr	r7, [r5, #0]
 800d31a:	602b      	str	r3, [r5, #0]
 800d31c:	d032      	beq.n	800d384 <__sflush_r+0x98>
 800d31e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	075a      	lsls	r2, r3, #29
 800d324:	d505      	bpl.n	800d332 <__sflush_r+0x46>
 800d326:	6863      	ldr	r3, [r4, #4]
 800d328:	1ac0      	subs	r0, r0, r3
 800d32a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d32c:	b10b      	cbz	r3, 800d332 <__sflush_r+0x46>
 800d32e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d330:	1ac0      	subs	r0, r0, r3
 800d332:	2300      	movs	r3, #0
 800d334:	4602      	mov	r2, r0
 800d336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d338:	6a21      	ldr	r1, [r4, #32]
 800d33a:	4628      	mov	r0, r5
 800d33c:	47b0      	blx	r6
 800d33e:	1c43      	adds	r3, r0, #1
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	d106      	bne.n	800d352 <__sflush_r+0x66>
 800d344:	6829      	ldr	r1, [r5, #0]
 800d346:	291d      	cmp	r1, #29
 800d348:	d82c      	bhi.n	800d3a4 <__sflush_r+0xb8>
 800d34a:	4a2a      	ldr	r2, [pc, #168]	; (800d3f4 <__sflush_r+0x108>)
 800d34c:	40ca      	lsrs	r2, r1
 800d34e:	07d6      	lsls	r6, r2, #31
 800d350:	d528      	bpl.n	800d3a4 <__sflush_r+0xb8>
 800d352:	2200      	movs	r2, #0
 800d354:	6062      	str	r2, [r4, #4]
 800d356:	04d9      	lsls	r1, r3, #19
 800d358:	6922      	ldr	r2, [r4, #16]
 800d35a:	6022      	str	r2, [r4, #0]
 800d35c:	d504      	bpl.n	800d368 <__sflush_r+0x7c>
 800d35e:	1c42      	adds	r2, r0, #1
 800d360:	d101      	bne.n	800d366 <__sflush_r+0x7a>
 800d362:	682b      	ldr	r3, [r5, #0]
 800d364:	b903      	cbnz	r3, 800d368 <__sflush_r+0x7c>
 800d366:	6560      	str	r0, [r4, #84]	; 0x54
 800d368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d36a:	602f      	str	r7, [r5, #0]
 800d36c:	2900      	cmp	r1, #0
 800d36e:	d0ca      	beq.n	800d306 <__sflush_r+0x1a>
 800d370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d374:	4299      	cmp	r1, r3
 800d376:	d002      	beq.n	800d37e <__sflush_r+0x92>
 800d378:	4628      	mov	r0, r5
 800d37a:	f7fd facf 	bl	800a91c <_free_r>
 800d37e:	2000      	movs	r0, #0
 800d380:	6360      	str	r0, [r4, #52]	; 0x34
 800d382:	e7c1      	b.n	800d308 <__sflush_r+0x1c>
 800d384:	6a21      	ldr	r1, [r4, #32]
 800d386:	2301      	movs	r3, #1
 800d388:	4628      	mov	r0, r5
 800d38a:	47b0      	blx	r6
 800d38c:	1c41      	adds	r1, r0, #1
 800d38e:	d1c7      	bne.n	800d320 <__sflush_r+0x34>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0c4      	beq.n	800d320 <__sflush_r+0x34>
 800d396:	2b1d      	cmp	r3, #29
 800d398:	d001      	beq.n	800d39e <__sflush_r+0xb2>
 800d39a:	2b16      	cmp	r3, #22
 800d39c:	d101      	bne.n	800d3a2 <__sflush_r+0xb6>
 800d39e:	602f      	str	r7, [r5, #0]
 800d3a0:	e7b1      	b.n	800d306 <__sflush_r+0x1a>
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	e7ad      	b.n	800d308 <__sflush_r+0x1c>
 800d3ac:	690f      	ldr	r7, [r1, #16]
 800d3ae:	2f00      	cmp	r7, #0
 800d3b0:	d0a9      	beq.n	800d306 <__sflush_r+0x1a>
 800d3b2:	0793      	lsls	r3, r2, #30
 800d3b4:	680e      	ldr	r6, [r1, #0]
 800d3b6:	bf08      	it	eq
 800d3b8:	694b      	ldreq	r3, [r1, #20]
 800d3ba:	600f      	str	r7, [r1, #0]
 800d3bc:	bf18      	it	ne
 800d3be:	2300      	movne	r3, #0
 800d3c0:	eba6 0807 	sub.w	r8, r6, r7
 800d3c4:	608b      	str	r3, [r1, #8]
 800d3c6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ca:	dd9c      	ble.n	800d306 <__sflush_r+0x1a>
 800d3cc:	6a21      	ldr	r1, [r4, #32]
 800d3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3d0:	4643      	mov	r3, r8
 800d3d2:	463a      	mov	r2, r7
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b0      	blx	r6
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	dc06      	bgt.n	800d3ea <__sflush_r+0xfe>
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e2:	81a3      	strh	r3, [r4, #12]
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e8:	e78e      	b.n	800d308 <__sflush_r+0x1c>
 800d3ea:	4407      	add	r7, r0
 800d3ec:	eba8 0800 	sub.w	r8, r8, r0
 800d3f0:	e7e9      	b.n	800d3c6 <__sflush_r+0xda>
 800d3f2:	bf00      	nop
 800d3f4:	20400001 	.word	0x20400001

0800d3f8 <_fflush_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	690b      	ldr	r3, [r1, #16]
 800d3fc:	4605      	mov	r5, r0
 800d3fe:	460c      	mov	r4, r1
 800d400:	b913      	cbnz	r3, 800d408 <_fflush_r+0x10>
 800d402:	2500      	movs	r5, #0
 800d404:	4628      	mov	r0, r5
 800d406:	bd38      	pop	{r3, r4, r5, pc}
 800d408:	b118      	cbz	r0, 800d412 <_fflush_r+0x1a>
 800d40a:	6983      	ldr	r3, [r0, #24]
 800d40c:	b90b      	cbnz	r3, 800d412 <_fflush_r+0x1a>
 800d40e:	f7fe fef9 	bl	800c204 <__sinit>
 800d412:	4b14      	ldr	r3, [pc, #80]	; (800d464 <_fflush_r+0x6c>)
 800d414:	429c      	cmp	r4, r3
 800d416:	d11b      	bne.n	800d450 <_fflush_r+0x58>
 800d418:	686c      	ldr	r4, [r5, #4]
 800d41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d0ef      	beq.n	800d402 <_fflush_r+0xa>
 800d422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d424:	07d0      	lsls	r0, r2, #31
 800d426:	d404      	bmi.n	800d432 <_fflush_r+0x3a>
 800d428:	0599      	lsls	r1, r3, #22
 800d42a:	d402      	bmi.n	800d432 <_fflush_r+0x3a>
 800d42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d42e:	f7fe ff8c 	bl	800c34a <__retarget_lock_acquire_recursive>
 800d432:	4628      	mov	r0, r5
 800d434:	4621      	mov	r1, r4
 800d436:	f7ff ff59 	bl	800d2ec <__sflush_r>
 800d43a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d43c:	07da      	lsls	r2, r3, #31
 800d43e:	4605      	mov	r5, r0
 800d440:	d4e0      	bmi.n	800d404 <_fflush_r+0xc>
 800d442:	89a3      	ldrh	r3, [r4, #12]
 800d444:	059b      	lsls	r3, r3, #22
 800d446:	d4dd      	bmi.n	800d404 <_fflush_r+0xc>
 800d448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d44a:	f7fe ff7f 	bl	800c34c <__retarget_lock_release_recursive>
 800d44e:	e7d9      	b.n	800d404 <_fflush_r+0xc>
 800d450:	4b05      	ldr	r3, [pc, #20]	; (800d468 <_fflush_r+0x70>)
 800d452:	429c      	cmp	r4, r3
 800d454:	d101      	bne.n	800d45a <_fflush_r+0x62>
 800d456:	68ac      	ldr	r4, [r5, #8]
 800d458:	e7df      	b.n	800d41a <_fflush_r+0x22>
 800d45a:	4b04      	ldr	r3, [pc, #16]	; (800d46c <_fflush_r+0x74>)
 800d45c:	429c      	cmp	r4, r3
 800d45e:	bf08      	it	eq
 800d460:	68ec      	ldreq	r4, [r5, #12]
 800d462:	e7da      	b.n	800d41a <_fflush_r+0x22>
 800d464:	08019bd8 	.word	0x08019bd8
 800d468:	08019bf8 	.word	0x08019bf8
 800d46c:	08019bb8 	.word	0x08019bb8

0800d470 <fiprintf>:
 800d470:	b40e      	push	{r1, r2, r3}
 800d472:	b503      	push	{r0, r1, lr}
 800d474:	4601      	mov	r1, r0
 800d476:	ab03      	add	r3, sp, #12
 800d478:	4805      	ldr	r0, [pc, #20]	; (800d490 <fiprintf+0x20>)
 800d47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d47e:	6800      	ldr	r0, [r0, #0]
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	f7ff fcbf 	bl	800ce04 <_vfiprintf_r>
 800d486:	b002      	add	sp, #8
 800d488:	f85d eb04 	ldr.w	lr, [sp], #4
 800d48c:	b003      	add	sp, #12
 800d48e:	4770      	bx	lr
 800d490:	20000874 	.word	0x20000874

0800d494 <_lseek_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	4d07      	ldr	r5, [pc, #28]	; (800d4b4 <_lseek_r+0x20>)
 800d498:	4604      	mov	r4, r0
 800d49a:	4608      	mov	r0, r1
 800d49c:	4611      	mov	r1, r2
 800d49e:	2200      	movs	r2, #0
 800d4a0:	602a      	str	r2, [r5, #0]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f000 fa8a 	bl	800d9bc <_lseek>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d102      	bne.n	800d4b2 <_lseek_r+0x1e>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	b103      	cbz	r3, 800d4b2 <_lseek_r+0x1e>
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	20004050 	.word	0x20004050

0800d4b8 <__swhatbuf_r>:
 800d4b8:	b570      	push	{r4, r5, r6, lr}
 800d4ba:	460e      	mov	r6, r1
 800d4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c0:	2900      	cmp	r1, #0
 800d4c2:	b096      	sub	sp, #88	; 0x58
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	461d      	mov	r5, r3
 800d4c8:	da08      	bge.n	800d4dc <__swhatbuf_r+0x24>
 800d4ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	602a      	str	r2, [r5, #0]
 800d4d2:	061a      	lsls	r2, r3, #24
 800d4d4:	d410      	bmi.n	800d4f8 <__swhatbuf_r+0x40>
 800d4d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4da:	e00e      	b.n	800d4fa <__swhatbuf_r+0x42>
 800d4dc:	466a      	mov	r2, sp
 800d4de:	f000 f8ab 	bl	800d638 <_fstat_r>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	dbf1      	blt.n	800d4ca <__swhatbuf_r+0x12>
 800d4e6:	9a01      	ldr	r2, [sp, #4]
 800d4e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d4ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d4f0:	425a      	negs	r2, r3
 800d4f2:	415a      	adcs	r2, r3
 800d4f4:	602a      	str	r2, [r5, #0]
 800d4f6:	e7ee      	b.n	800d4d6 <__swhatbuf_r+0x1e>
 800d4f8:	2340      	movs	r3, #64	; 0x40
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	6023      	str	r3, [r4, #0]
 800d4fe:	b016      	add	sp, #88	; 0x58
 800d500:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d504 <__smakebuf_r>:
 800d504:	898b      	ldrh	r3, [r1, #12]
 800d506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d508:	079d      	lsls	r5, r3, #30
 800d50a:	4606      	mov	r6, r0
 800d50c:	460c      	mov	r4, r1
 800d50e:	d507      	bpl.n	800d520 <__smakebuf_r+0x1c>
 800d510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	6123      	str	r3, [r4, #16]
 800d518:	2301      	movs	r3, #1
 800d51a:	6163      	str	r3, [r4, #20]
 800d51c:	b002      	add	sp, #8
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	ab01      	add	r3, sp, #4
 800d522:	466a      	mov	r2, sp
 800d524:	f7ff ffc8 	bl	800d4b8 <__swhatbuf_r>
 800d528:	9900      	ldr	r1, [sp, #0]
 800d52a:	4605      	mov	r5, r0
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7fd fa61 	bl	800a9f4 <_malloc_r>
 800d532:	b948      	cbnz	r0, 800d548 <__smakebuf_r+0x44>
 800d534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d538:	059a      	lsls	r2, r3, #22
 800d53a:	d4ef      	bmi.n	800d51c <__smakebuf_r+0x18>
 800d53c:	f023 0303 	bic.w	r3, r3, #3
 800d540:	f043 0302 	orr.w	r3, r3, #2
 800d544:	81a3      	strh	r3, [r4, #12]
 800d546:	e7e3      	b.n	800d510 <__smakebuf_r+0xc>
 800d548:	4b0d      	ldr	r3, [pc, #52]	; (800d580 <__smakebuf_r+0x7c>)
 800d54a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	6020      	str	r0, [r4, #0]
 800d550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	9b00      	ldr	r3, [sp, #0]
 800d558:	6163      	str	r3, [r4, #20]
 800d55a:	9b01      	ldr	r3, [sp, #4]
 800d55c:	6120      	str	r0, [r4, #16]
 800d55e:	b15b      	cbz	r3, 800d578 <__smakebuf_r+0x74>
 800d560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d564:	4630      	mov	r0, r6
 800d566:	f000 f879 	bl	800d65c <_isatty_r>
 800d56a:	b128      	cbz	r0, 800d578 <__smakebuf_r+0x74>
 800d56c:	89a3      	ldrh	r3, [r4, #12]
 800d56e:	f023 0303 	bic.w	r3, r3, #3
 800d572:	f043 0301 	orr.w	r3, r3, #1
 800d576:	81a3      	strh	r3, [r4, #12]
 800d578:	89a0      	ldrh	r0, [r4, #12]
 800d57a:	4305      	orrs	r5, r0
 800d57c:	81a5      	strh	r5, [r4, #12]
 800d57e:	e7cd      	b.n	800d51c <__smakebuf_r+0x18>
 800d580:	0800c19d 	.word	0x0800c19d

0800d584 <__ascii_mbtowc>:
 800d584:	b082      	sub	sp, #8
 800d586:	b901      	cbnz	r1, 800d58a <__ascii_mbtowc+0x6>
 800d588:	a901      	add	r1, sp, #4
 800d58a:	b142      	cbz	r2, 800d59e <__ascii_mbtowc+0x1a>
 800d58c:	b14b      	cbz	r3, 800d5a2 <__ascii_mbtowc+0x1e>
 800d58e:	7813      	ldrb	r3, [r2, #0]
 800d590:	600b      	str	r3, [r1, #0]
 800d592:	7812      	ldrb	r2, [r2, #0]
 800d594:	1e10      	subs	r0, r2, #0
 800d596:	bf18      	it	ne
 800d598:	2001      	movne	r0, #1
 800d59a:	b002      	add	sp, #8
 800d59c:	4770      	bx	lr
 800d59e:	4610      	mov	r0, r2
 800d5a0:	e7fb      	b.n	800d59a <__ascii_mbtowc+0x16>
 800d5a2:	f06f 0001 	mvn.w	r0, #1
 800d5a6:	e7f8      	b.n	800d59a <__ascii_mbtowc+0x16>

0800d5a8 <memmove>:
 800d5a8:	4288      	cmp	r0, r1
 800d5aa:	b510      	push	{r4, lr}
 800d5ac:	eb01 0402 	add.w	r4, r1, r2
 800d5b0:	d902      	bls.n	800d5b8 <memmove+0x10>
 800d5b2:	4284      	cmp	r4, r0
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	d807      	bhi.n	800d5c8 <memmove+0x20>
 800d5b8:	1e43      	subs	r3, r0, #1
 800d5ba:	42a1      	cmp	r1, r4
 800d5bc:	d008      	beq.n	800d5d0 <memmove+0x28>
 800d5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5c6:	e7f8      	b.n	800d5ba <memmove+0x12>
 800d5c8:	4402      	add	r2, r0
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	428a      	cmp	r2, r1
 800d5ce:	d100      	bne.n	800d5d2 <memmove+0x2a>
 800d5d0:	bd10      	pop	{r4, pc}
 800d5d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5da:	e7f7      	b.n	800d5cc <memmove+0x24>

0800d5dc <_malloc_usable_size_r>:
 800d5dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5e0:	1f18      	subs	r0, r3, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	bfbc      	itt	lt
 800d5e6:	580b      	ldrlt	r3, [r1, r0]
 800d5e8:	18c0      	addlt	r0, r0, r3
 800d5ea:	4770      	bx	lr

0800d5ec <_read_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d07      	ldr	r5, [pc, #28]	; (800d60c <_read_r+0x20>)
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	4608      	mov	r0, r1
 800d5f4:	4611      	mov	r1, r2
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	602a      	str	r2, [r5, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	f000 f9e6 	bl	800d9cc <_read>
 800d600:	1c43      	adds	r3, r0, #1
 800d602:	d102      	bne.n	800d60a <_read_r+0x1e>
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	b103      	cbz	r3, 800d60a <_read_r+0x1e>
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	bd38      	pop	{r3, r4, r5, pc}
 800d60c:	20004050 	.word	0x20004050

0800d610 <__ascii_wctomb>:
 800d610:	b149      	cbz	r1, 800d626 <__ascii_wctomb+0x16>
 800d612:	2aff      	cmp	r2, #255	; 0xff
 800d614:	bf85      	ittet	hi
 800d616:	238a      	movhi	r3, #138	; 0x8a
 800d618:	6003      	strhi	r3, [r0, #0]
 800d61a:	700a      	strbls	r2, [r1, #0]
 800d61c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d620:	bf98      	it	ls
 800d622:	2001      	movls	r0, #1
 800d624:	4770      	bx	lr
 800d626:	4608      	mov	r0, r1
 800d628:	4770      	bx	lr

0800d62a <abort>:
 800d62a:	b508      	push	{r3, lr}
 800d62c:	2006      	movs	r0, #6
 800d62e:	f000 f84d 	bl	800d6cc <raise>
 800d632:	2001      	movs	r0, #1
 800d634:	f000 f9da 	bl	800d9ec <_exit>

0800d638 <_fstat_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4d07      	ldr	r5, [pc, #28]	; (800d658 <_fstat_r+0x20>)
 800d63c:	2300      	movs	r3, #0
 800d63e:	4604      	mov	r4, r0
 800d640:	4608      	mov	r0, r1
 800d642:	4611      	mov	r1, r2
 800d644:	602b      	str	r3, [r5, #0]
 800d646:	f000 f999 	bl	800d97c <_fstat>
 800d64a:	1c43      	adds	r3, r0, #1
 800d64c:	d102      	bne.n	800d654 <_fstat_r+0x1c>
 800d64e:	682b      	ldr	r3, [r5, #0]
 800d650:	b103      	cbz	r3, 800d654 <_fstat_r+0x1c>
 800d652:	6023      	str	r3, [r4, #0]
 800d654:	bd38      	pop	{r3, r4, r5, pc}
 800d656:	bf00      	nop
 800d658:	20004050 	.word	0x20004050

0800d65c <_isatty_r>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	4d06      	ldr	r5, [pc, #24]	; (800d678 <_isatty_r+0x1c>)
 800d660:	2300      	movs	r3, #0
 800d662:	4604      	mov	r4, r0
 800d664:	4608      	mov	r0, r1
 800d666:	602b      	str	r3, [r5, #0]
 800d668:	f000 f998 	bl	800d99c <_isatty>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	d102      	bne.n	800d676 <_isatty_r+0x1a>
 800d670:	682b      	ldr	r3, [r5, #0]
 800d672:	b103      	cbz	r3, 800d676 <_isatty_r+0x1a>
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	bd38      	pop	{r3, r4, r5, pc}
 800d678:	20004050 	.word	0x20004050

0800d67c <_raise_r>:
 800d67c:	291f      	cmp	r1, #31
 800d67e:	b538      	push	{r3, r4, r5, lr}
 800d680:	4604      	mov	r4, r0
 800d682:	460d      	mov	r5, r1
 800d684:	d904      	bls.n	800d690 <_raise_r+0x14>
 800d686:	2316      	movs	r3, #22
 800d688:	6003      	str	r3, [r0, #0]
 800d68a:	f04f 30ff 	mov.w	r0, #4294967295
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d692:	b112      	cbz	r2, 800d69a <_raise_r+0x1e>
 800d694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d698:	b94b      	cbnz	r3, 800d6ae <_raise_r+0x32>
 800d69a:	4620      	mov	r0, r4
 800d69c:	f000 f830 	bl	800d700 <_getpid_r>
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6aa:	f000 b817 	b.w	800d6dc <_kill_r>
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d00a      	beq.n	800d6c8 <_raise_r+0x4c>
 800d6b2:	1c59      	adds	r1, r3, #1
 800d6b4:	d103      	bne.n	800d6be <_raise_r+0x42>
 800d6b6:	2316      	movs	r3, #22
 800d6b8:	6003      	str	r3, [r0, #0]
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	e7e7      	b.n	800d68e <_raise_r+0x12>
 800d6be:	2400      	movs	r4, #0
 800d6c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	4798      	blx	r3
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	e7e0      	b.n	800d68e <_raise_r+0x12>

0800d6cc <raise>:
 800d6cc:	4b02      	ldr	r3, [pc, #8]	; (800d6d8 <raise+0xc>)
 800d6ce:	4601      	mov	r1, r0
 800d6d0:	6818      	ldr	r0, [r3, #0]
 800d6d2:	f7ff bfd3 	b.w	800d67c <_raise_r>
 800d6d6:	bf00      	nop
 800d6d8:	20000874 	.word	0x20000874

0800d6dc <_kill_r>:
 800d6dc:	b538      	push	{r3, r4, r5, lr}
 800d6de:	4d07      	ldr	r5, [pc, #28]	; (800d6fc <_kill_r+0x20>)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	4608      	mov	r0, r1
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	602b      	str	r3, [r5, #0]
 800d6ea:	f000 f95f 	bl	800d9ac <_kill>
 800d6ee:	1c43      	adds	r3, r0, #1
 800d6f0:	d102      	bne.n	800d6f8 <_kill_r+0x1c>
 800d6f2:	682b      	ldr	r3, [r5, #0]
 800d6f4:	b103      	cbz	r3, 800d6f8 <_kill_r+0x1c>
 800d6f6:	6023      	str	r3, [r4, #0]
 800d6f8:	bd38      	pop	{r3, r4, r5, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20004050 	.word	0x20004050

0800d700 <_getpid_r>:
 800d700:	f000 b944 	b.w	800d98c <_getpid>

0800d704 <expf>:
 800d704:	b508      	push	{r3, lr}
 800d706:	ed2d 8b02 	vpush	{d8}
 800d70a:	eef0 8a40 	vmov.f32	s17, s0
 800d70e:	f000 f82f 	bl	800d770 <__ieee754_expf>
 800d712:	eeb0 8a40 	vmov.f32	s16, s0
 800d716:	eeb0 0a68 	vmov.f32	s0, s17
 800d71a:	f000 f919 	bl	800d950 <finitef>
 800d71e:	b160      	cbz	r0, 800d73a <expf+0x36>
 800d720:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d760 <expf+0x5c>
 800d724:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72c:	dd0a      	ble.n	800d744 <expf+0x40>
 800d72e:	f7fd f8ad 	bl	800a88c <__errno>
 800d732:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800d764 <expf+0x60>
 800d736:	2322      	movs	r3, #34	; 0x22
 800d738:	6003      	str	r3, [r0, #0]
 800d73a:	eeb0 0a48 	vmov.f32	s0, s16
 800d73e:	ecbd 8b02 	vpop	{d8}
 800d742:	bd08      	pop	{r3, pc}
 800d744:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d768 <expf+0x64>
 800d748:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d750:	d5f3      	bpl.n	800d73a <expf+0x36>
 800d752:	f7fd f89b 	bl	800a88c <__errno>
 800d756:	2322      	movs	r3, #34	; 0x22
 800d758:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d76c <expf+0x68>
 800d75c:	6003      	str	r3, [r0, #0]
 800d75e:	e7ec      	b.n	800d73a <expf+0x36>
 800d760:	42b17180 	.word	0x42b17180
 800d764:	7f800000 	.word	0x7f800000
 800d768:	c2cff1b5 	.word	0xc2cff1b5
 800d76c:	00000000 	.word	0x00000000

0800d770 <__ieee754_expf>:
 800d770:	ee10 2a10 	vmov	r2, s0
 800d774:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d778:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d77c:	d902      	bls.n	800d784 <__ieee754_expf+0x14>
 800d77e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d782:	4770      	bx	lr
 800d784:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800d788:	d106      	bne.n	800d798 <__ieee754_expf+0x28>
 800d78a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800d8c4 <__ieee754_expf+0x154>
 800d78e:	2b00      	cmp	r3, #0
 800d790:	bf18      	it	ne
 800d792:	eeb0 0a67 	vmovne.f32	s0, s15
 800d796:	4770      	bx	lr
 800d798:	484b      	ldr	r0, [pc, #300]	; (800d8c8 <__ieee754_expf+0x158>)
 800d79a:	4282      	cmp	r2, r0
 800d79c:	dd02      	ble.n	800d7a4 <__ieee754_expf+0x34>
 800d79e:	2000      	movs	r0, #0
 800d7a0:	f000 b8d0 	b.w	800d944 <__math_oflowf>
 800d7a4:	2a00      	cmp	r2, #0
 800d7a6:	da05      	bge.n	800d7b4 <__ieee754_expf+0x44>
 800d7a8:	4a48      	ldr	r2, [pc, #288]	; (800d8cc <__ieee754_expf+0x15c>)
 800d7aa:	4291      	cmp	r1, r2
 800d7ac:	d902      	bls.n	800d7b4 <__ieee754_expf+0x44>
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	f000 b8c2 	b.w	800d938 <__math_uflowf>
 800d7b4:	4a46      	ldr	r2, [pc, #280]	; (800d8d0 <__ieee754_expf+0x160>)
 800d7b6:	4291      	cmp	r1, r2
 800d7b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d7bc:	d952      	bls.n	800d864 <__ieee754_expf+0xf4>
 800d7be:	4a45      	ldr	r2, [pc, #276]	; (800d8d4 <__ieee754_expf+0x164>)
 800d7c0:	4291      	cmp	r1, r2
 800d7c2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d7c6:	d834      	bhi.n	800d832 <__ieee754_expf+0xc2>
 800d7c8:	4943      	ldr	r1, [pc, #268]	; (800d8d8 <__ieee754_expf+0x168>)
 800d7ca:	4411      	add	r1, r2
 800d7cc:	ed91 7a00 	vldr	s14, [r1]
 800d7d0:	4942      	ldr	r1, [pc, #264]	; (800d8dc <__ieee754_expf+0x16c>)
 800d7d2:	440a      	add	r2, r1
 800d7d4:	edd2 7a00 	vldr	s15, [r2]
 800d7d8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d7dc:	f1c3 0201 	rsb	r2, r3, #1
 800d7e0:	1ad2      	subs	r2, r2, r3
 800d7e2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d7e6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d7ea:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800d8e0 <__ieee754_expf+0x170>
 800d7ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d8e4 <__ieee754_expf+0x174>
 800d7f2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800d7f6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d8e8 <__ieee754_expf+0x178>
 800d7fa:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d7fe:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d8ec <__ieee754_expf+0x17c>
 800d802:	eee5 6a06 	vfma.f32	s13, s10, s12
 800d806:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d8f0 <__ieee754_expf+0x180>
 800d80a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d80e:	eef0 6a40 	vmov.f32	s13, s0
 800d812:	eee5 6a46 	vfms.f32	s13, s10, s12
 800d816:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d81a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800d81e:	bb92      	cbnz	r2, 800d886 <__ieee754_expf+0x116>
 800d820:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800d824:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d828:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d82c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800d830:	4770      	bx	lr
 800d832:	4b30      	ldr	r3, [pc, #192]	; (800d8f4 <__ieee754_expf+0x184>)
 800d834:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d8f8 <__ieee754_expf+0x188>
 800d838:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d8fc <__ieee754_expf+0x18c>
 800d83c:	4413      	add	r3, r2
 800d83e:	edd3 7a00 	vldr	s15, [r3]
 800d842:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d846:	eeb0 7a40 	vmov.f32	s14, s0
 800d84a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d84e:	ee17 2a90 	vmov	r2, s15
 800d852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d856:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d85a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d900 <__ieee754_expf+0x190>
 800d85e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d862:	e7be      	b.n	800d7e2 <__ieee754_expf+0x72>
 800d864:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800d868:	d20b      	bcs.n	800d882 <__ieee754_expf+0x112>
 800d86a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d904 <__ieee754_expf+0x194>
 800d86e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d872:	eef4 6ae5 	vcmpe.f32	s13, s11
 800d876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87a:	dd02      	ble.n	800d882 <__ieee754_expf+0x112>
 800d87c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800d880:	4770      	bx	lr
 800d882:	2200      	movs	r2, #0
 800d884:	e7af      	b.n	800d7e6 <__ieee754_expf+0x76>
 800d886:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d88a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d88e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800d892:	bfb8      	it	lt
 800d894:	3264      	addlt	r2, #100	; 0x64
 800d896:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d89a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d89e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800d8a2:	ee17 3a90 	vmov	r3, s15
 800d8a6:	bfab      	itete	ge
 800d8a8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d8ac:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d8b0:	ee00 3a10 	vmovge	s0, r3
 800d8b4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800d908 <__ieee754_expf+0x198>
 800d8b8:	bfbc      	itt	lt
 800d8ba:	ee00 3a10 	vmovlt	s0, r3
 800d8be:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d8c2:	4770      	bx	lr
 800d8c4:	00000000 	.word	0x00000000
 800d8c8:	42b17217 	.word	0x42b17217
 800d8cc:	42cff1b5 	.word	0x42cff1b5
 800d8d0:	3eb17218 	.word	0x3eb17218
 800d8d4:	3f851591 	.word	0x3f851591
 800d8d8:	08019ed4 	.word	0x08019ed4
 800d8dc:	08019edc 	.word	0x08019edc
 800d8e0:	3331bb4c 	.word	0x3331bb4c
 800d8e4:	b5ddea0e 	.word	0xb5ddea0e
 800d8e8:	388ab355 	.word	0x388ab355
 800d8ec:	bb360b61 	.word	0xbb360b61
 800d8f0:	3e2aaaab 	.word	0x3e2aaaab
 800d8f4:	08019ecc 	.word	0x08019ecc
 800d8f8:	3fb8aa3b 	.word	0x3fb8aa3b
 800d8fc:	3f317180 	.word	0x3f317180
 800d900:	3717f7d1 	.word	0x3717f7d1
 800d904:	7149f2ca 	.word	0x7149f2ca
 800d908:	0d800000 	.word	0x0d800000

0800d90c <with_errnof>:
 800d90c:	b513      	push	{r0, r1, r4, lr}
 800d90e:	4604      	mov	r4, r0
 800d910:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d914:	f7fc ffba 	bl	800a88c <__errno>
 800d918:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d91c:	6004      	str	r4, [r0, #0]
 800d91e:	b002      	add	sp, #8
 800d920:	bd10      	pop	{r4, pc}

0800d922 <xflowf>:
 800d922:	b130      	cbz	r0, 800d932 <xflowf+0x10>
 800d924:	eef1 7a40 	vneg.f32	s15, s0
 800d928:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d92c:	2022      	movs	r0, #34	; 0x22
 800d92e:	f7ff bfed 	b.w	800d90c <with_errnof>
 800d932:	eef0 7a40 	vmov.f32	s15, s0
 800d936:	e7f7      	b.n	800d928 <xflowf+0x6>

0800d938 <__math_uflowf>:
 800d938:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d940 <__math_uflowf+0x8>
 800d93c:	f7ff bff1 	b.w	800d922 <xflowf>
 800d940:	10000000 	.word	0x10000000

0800d944 <__math_oflowf>:
 800d944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d94c <__math_oflowf+0x8>
 800d948:	f7ff bfeb 	b.w	800d922 <xflowf>
 800d94c:	70000000 	.word	0x70000000

0800d950 <finitef>:
 800d950:	b082      	sub	sp, #8
 800d952:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d956:	9801      	ldr	r0, [sp, #4]
 800d958:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d95c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d960:	bfac      	ite	ge
 800d962:	2000      	movge	r0, #0
 800d964:	2001      	movlt	r0, #1
 800d966:	b002      	add	sp, #8
 800d968:	4770      	bx	lr
	...

0800d96c <_close>:
 800d96c:	4b02      	ldr	r3, [pc, #8]	; (800d978 <_close+0xc>)
 800d96e:	2258      	movs	r2, #88	; 0x58
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	f04f 30ff 	mov.w	r0, #4294967295
 800d976:	4770      	bx	lr
 800d978:	20004050 	.word	0x20004050

0800d97c <_fstat>:
 800d97c:	4b02      	ldr	r3, [pc, #8]	; (800d988 <_fstat+0xc>)
 800d97e:	2258      	movs	r2, #88	; 0x58
 800d980:	601a      	str	r2, [r3, #0]
 800d982:	f04f 30ff 	mov.w	r0, #4294967295
 800d986:	4770      	bx	lr
 800d988:	20004050 	.word	0x20004050

0800d98c <_getpid>:
 800d98c:	4b02      	ldr	r3, [pc, #8]	; (800d998 <_getpid+0xc>)
 800d98e:	2258      	movs	r2, #88	; 0x58
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	f04f 30ff 	mov.w	r0, #4294967295
 800d996:	4770      	bx	lr
 800d998:	20004050 	.word	0x20004050

0800d99c <_isatty>:
 800d99c:	4b02      	ldr	r3, [pc, #8]	; (800d9a8 <_isatty+0xc>)
 800d99e:	2258      	movs	r2, #88	; 0x58
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	20004050 	.word	0x20004050

0800d9ac <_kill>:
 800d9ac:	4b02      	ldr	r3, [pc, #8]	; (800d9b8 <_kill+0xc>)
 800d9ae:	2258      	movs	r2, #88	; 0x58
 800d9b0:	601a      	str	r2, [r3, #0]
 800d9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b6:	4770      	bx	lr
 800d9b8:	20004050 	.word	0x20004050

0800d9bc <_lseek>:
 800d9bc:	4b02      	ldr	r3, [pc, #8]	; (800d9c8 <_lseek+0xc>)
 800d9be:	2258      	movs	r2, #88	; 0x58
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c6:	4770      	bx	lr
 800d9c8:	20004050 	.word	0x20004050

0800d9cc <_read>:
 800d9cc:	4b02      	ldr	r3, [pc, #8]	; (800d9d8 <_read+0xc>)
 800d9ce:	2258      	movs	r2, #88	; 0x58
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d6:	4770      	bx	lr
 800d9d8:	20004050 	.word	0x20004050

0800d9dc <_write>:
 800d9dc:	4b02      	ldr	r3, [pc, #8]	; (800d9e8 <_write+0xc>)
 800d9de:	2258      	movs	r2, #88	; 0x58
 800d9e0:	601a      	str	r2, [r3, #0]
 800d9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e6:	4770      	bx	lr
 800d9e8:	20004050 	.word	0x20004050

0800d9ec <_exit>:
 800d9ec:	e7fe      	b.n	800d9ec <_exit>
	...

0800d9f0 <_init>:
 800d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f2:	bf00      	nop
 800d9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9f6:	bc08      	pop	{r3}
 800d9f8:	469e      	mov	lr, r3
 800d9fa:	4770      	bx	lr

0800d9fc <_fini>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	bf00      	nop
 800da00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da02:	bc08      	pop	{r3}
 800da04:	469e      	mov	lr, r3
 800da06:	4770      	bx	lr
